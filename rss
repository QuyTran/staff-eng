<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[StaffEng RSS]]></title><description><![CDATA[Stories of folks reaching Staff-plus engineering levels.]]></description><link>https://staffeng.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 22 Jun 2020 00:13:51 GMT</lastBuildDate><item><title><![CDATA[Dmitry Petrashko - Infrastructure Pillar Tech Lead at Stripe]]></title><description><![CDATA[<p><span class="date">May, 2020</span>
<a href="https://d-d.me/site/presentations/">presentations</a>,
<a href="https://twitter.com/darkdimius">twitter</a>,
<a href="https://www.linkedin.com/in/darkdimius/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.</em></strong>
I am a Staff engineer and one of 5 Pillar Tech Leads of the Infrastructure org at Stripe, representing Developer Productivity group of teams.</p>
<p>My team builds processes, tools and core libraries used during product development at Stripe, including testing frameworks, linters, typecheckers, build tools, libraries used for gradual rollout, and many others. Our work empowers Stripe engineers to focus on product.</p>
<p><strong><em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?</em></strong></p>
<p>A Staff Engineer at Stripe isn’t a role, rather it’s a level that corresponds to expectation of impact, communication, people and project leadership skills. Staff engineers fill different roles, mine is a Pillar Tech Lead (PTL) role. In that role:</p>
<ul>
<li>PTLs help their teams make technical decisions that will play well with each other and with technical decisions made by other groups at Stripe. Teams at Stripe make most technical decisions themselves, but an experienced PTL can help fine tune those decisions to achieve better outcomes. PTLs also work as arbiters in cases where teams cannot reach an agreement amongst themselves on technical topics.</li>
<li>PTLs guide the technical direction of Stripe, providing input on what are the most important problems to solve and setting the high level technical approaches to solving them.</li>
<li>PTLs help their organization by representing it to other pillar tech leads and also bring technical decisions made elsewhere back to the teams they work with to create alignment.</li>
<li>PTLs create opportunities for other engineers to take on impactful projects and help them succeed.</li>
</ul>
<p>In this role, I closely partner with the Head of Developer Productivity and managers of the teams inside the group. We exchange context and work towards an agreed goal. Due to the kind of work that I do, I have good insight into the needs of our users &#x26; tools at our disposal to address them, while the Head of DevProd has a better understanding of Stripe-wide non-technical constraints(e.g. resourcing constraints).</p>
<div class="pull">
<p><strong>Talks from Dmitry</strong></p>
<ul>
<li><a href="https://www.youtube.com/watch?v=GJOWlDv_Fcs">State of Sorbet</a></li>
<li><a href="https://www.youtube.com/watch?v=Gdx6by6tcvw">Gradual typing for Ruby at Scale with Sorbet</a></li>
<li><a href="https://www.youtube.com/watch?v=8mFl8fywIP4">Adventures in Efficiency and Performance</a></li>
<li><a href="https://d-d.me/site/presentations/">Earlier presentations</a></li>
</ul>
</div>
<p><strong><em>How do you spend your time day-to-day?</em></strong></p>
<p>On a perfect week I’d spend Monday, Wednesday and Friday in meetings or working groups: either 1:1’s or team meetings, collaborating on plans &#x26; strategy, both short term and long term. Tuesday and Thursday of my perfect week would be spent coding alone. In reality, depending on team needs at the time, I may end up having more meetings or more time coding. If I’m working to set up a new project, I’ll commonly start by having a week with less meetings: focusing on project briefs, thinking through design, deliverables/milestones and security/reliability implications; followed by a week of socializing the proposal around the company and addressing feedback.</p>
<p>While, from time to time it might seem hard to find time to write code, I believe it’s important as it allows me to maintain a strong connection to engineering and be the bridge between business needs/prioritization and engineering constraints that PTLs need to be.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer?</em></strong></p>
<p>Staff Engineers, and Pillar Tech Leads in particular, frequently help set direction for a new project. I feel particularly impactful when I can help improve a proposal that's well intentioned and solves a real need, but the team that drafted it lacks either experience or context to write a good plan to capture the opportunity. In such cases, having a well structured plan can help substantially reduce the scope while getting to most of the value, and thus demonstrate impact sooner. Or, alternatively, see that the proposal in hand addresses more use cases than the team has originally anticipated and refocusing the project towards a usecases that was not known by the team would lead to bigger business impact: in both of these cases, I feel impactful by empowering other engineers.</p>
<p><strong><em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?</em></strong></p>
<p>No, Stripe intends the Staff-badge to not be a gate into new opportunities and I believe we’re good at it. This is also true about the PTL role. We choose enginers for PTL position that are good at representing opinions of others. Even before I became a PTL I felt that prior PTL, <a href="https://paultarjan.com/">Paul Tarjan</a>, always made sure my perspective was presented.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?</em></strong></p>
<p>I was hired specifically to introduce typechecking into Ruby at Stripe. This included, together with <a href="https://nelhage.com/">Nelson</a> and <a href="https://paultarjan.com/">Paul</a>, architecting and implementing the typechecker, <a href="https://sorbet.org/">Sorbet</a>, and growing the culture around using it.</p>
<p>In the early days of Sorbet, we’ve carefully chosen what features to add based on usecases that Stripe needs the most. I believe we’ve succeeded in covering most of usecases that Stripe had with a typesystem and, at the same time, keeping the simplicity: it’s very easy to get to a typesystem and culture that promotes complexity and elitism for sake of it and I’m happy that our efforts avoided swinging from untypedness to the other end of spectrum.</p>
<p><strong><em>How do you keep in touch with how things really work as you spend less time on hands-on development?</em></strong></p>
<p>I try to have at least a couple of days a week where I can code. Additionally, I work closely with other engineers on my teams and we continuously learn from each other.</p>
<p>Developer productivity also organises a Stripe-wide engineer survey, where we are looking to find what are the biggest things keeping our engineers from being productive: maybe there’s some tool that became slow since the last survey or some use case that had a user base grow that’s not well supported. While this survey rarely finds things that we weren’t aware of, it’s a great tool for relative prioritization: we can compare how many people complain about things and prioritize them accordingly.</p>
<p>Additionally, before Covid-19-induced lockdown, I used to join random tables for dinners at Stripe. I’d ask 3 questions:</p>
<ul>
<li>What are you working on?</li>
<li>What makes it hard?</li>
<li>How can infrastructure teams help?</li>
</ul>
<p>This became a great tool in two ways: 1) connecting me to my users, helping discover their needs; 2) helping mitigate unhappiness of teams that aren’t yet supported by having a discussion similar to: “yes, I agree we could help you by doing X, now, lets together look on what we should stop doing to create place for this”, where a person would frequently discover that, while they would like us to address their pain point, they don't want it addressed at cost of us deprioritizing our current projects.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>While sponsoring other engineers isn’t required for a Staff Engineer, I believe it helps to succeed as one, as it helps you deliver more impact by creating opportunities for others and helping them succeed.</p>
<p>And yes, there have been multiple projects that I have helped scope, kick-off and derisk, while also helping grow a person to take it over from me when I roll off to the next thing.</p>
<p>There’s also a distinction between mentorship and sponsorship and I do both. Mentorship is about helping people grow and deliver impact. Sponsorship is about helping a person get in a position where they could demonstrate their ability to deliver greater impact. In working with my teams, I try to help people work on projects somewhat out of their comfort zone, and in that I sponsor them, and then, I could mentor them to help the project succeed.</p>
<p><strong><em>You first got the title Staff Engineer at your current company. Were you hired as a Staff Engineer? If not, what was the process of getting promoted to Staff?</em></strong></p>
<p>I wasn’t hired as a Staff Engineer. I had to get uplevelled twice to get to Staff level at Stripe. Both of these uplevels were similar: Stripe uplevels after an employee has already been operating on the next level for quite a while and this adjusts expectations that they are expected to continue operating on that level going forward.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff?</em></strong></p>
<p>In order of decreasing importance:</p>
<ol>
<li>Focusing on impact on business and company.</li>
<li>Being collaborative: by joining meetings/working groups you should help achieve a better outcome.</li>
<li>Technical knowledge.</li>
</ol>
<p>For me personally, the area that I needed to get good at before getting Staff Engineer was the second item. I was already delivering impact and was considered a person to go to for technical advice. I needed to improve my communication skills and collaboration skills so that I could constructively help people who are outside of my team, who might see me for first time ever and who, despite having good intentions behind their project, may not have the best plan to get it delivered.</p>
<p>Technique that helped me in that was asking for feedback in private chat immediately after the meeting, in particular after meetings that didn't not go perfectly. This has allowed me to learn what I did that might have contributed to other parties not feeling comfortable in these meetings and, in a few cases, the genuinity of asking for how it could have gone better helped fix the outcome of a meeting that has already gone poorly.</p>
<p><strong><em>How have where you worked and your education impacted your path?</em></strong></p>
<p><strong>Companies:</strong> I appreciate that Stripe has so many opportunities for impact and this definitely helped me.</p>
<p><strong>Education:</strong> I happened to have got a very practical PhD (on how to build fast &#x26; maintainable compilers) that almost fully translated to knowledge that’s applicable to my work: helping a company to scale engineering. And, while it served me well, I think there’s a lot of luck involved: I happened to join the right lab at the right time (when conditions for Scala3 being born became material, I’d been at the lab long enough to not be too “green” but still early enough to not have totally set the direction of my research). I’m unsure if I’d advise others to do a PhD: from my perspective, in practical terms, many of my friends would have learned as much by building systems at Stripe/Google/Facebook for the same 4+ years it takes to complete a PhD. If you’d like to learn how databases work - you’d probably learn this not only at the laboratory that does research on databases, but also at the companies that have some of the highest demands for databases and have teams working to improve them. That said, PhD was something that was a good tool for me to change my location.</p>
<p><strong>Location:</strong> I came to the US from Switzerland to join Stripe. I came to Switzerland from Russia to join one of the best PhD programs in Computer Science. I came to Russia to join one of the best ex-USSR universities from Ukraine. In each of these relocations, I feel, I played geographical arbitrage: I was looking to escape the place where I was among the best to the place where I’d be average. In some of them, I think I wasn’t the prime candidate. By joining the people there and learning from them, I grew a lot. It’s hard for me to tell if US vs EU is a better location career-wise, but I can definitely tell from my experience that changing locations helped me grow a lot.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p>It's a very hard question for me to answer in retrospect. This is because: AFAIK Sorbet was big enough to be my Staff engineer project, BUT with Nelson and Paul being there and us working closely and very fast with each other, it was very hard to attribute success of the project to specific individuals rather than the whole team.</p>
<p>Around the first performance evaluation into the projects, all three of us got feedback that we should have better ways to prescribe which impact was the result of which individual. While I’d love to say that the fact that we didn’t face similar issue on the next performance evaluation was due to intentional actions, I don’t think that is true: I think the project just naturally entered a stage where it was much bigger and thus we didn’t need to “quickly iterate in the same 10 files”, naturally leading to us having clearer and bigger areas of ownership.</p>
<p>I became the “internal architecture/subtyping” person, as well as “talk to users” person, while Paul became the “change the code to make typechecker like it” person. Nelson clearly knew better how other systems at Stripe work and thus helped integrate the tool with them. All of these played to our strong points: I had prior experience with type checkers (this is what my PhD was about), Paul has a huge skill for programmatic codemods and Nelson is both very knowledgeable in systems in general and has been at Stripe long enough and early enough to know pretty much every system at Stripe. At this point in the project (stabilization, rollout) all of these became huge areas and thus it became much easier to have a person be a directly responsible individual (DRI) for an area, with others helping occasionally.</p>
<p>After Sorbet I had a couple other impactful projects delivered in short timeframe (6 months), that, I believe, sealed the deal of me getting the Staff Engineer level, but, If I was to choose one, I’d still choose Sorbet due to vast scope of project: both technical and cultural.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<ol>
<li>Working with Martin Odersky and Ondrej Lhotak in academia helped me understand how complex systems work together and how to explain that clearly.</li>
<li>Brian Goetz helped me understand how much work is behind a simple, yet, robust to withstand widespread adoption, design.</li>
<li>Paul Tarjan showed me the importance of adjusting my communication style to lead to constructive outcomes for all involved parties.</li>
</ol>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p>At least, at Stripe, Staff Engineers work on very different areas. Make sure you agree with your reporting chain on what is the impact you should be achieving and what are the things you’re allowed to compromise on on the way to that impact. Communicate clearly what compromises you're doing and why.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>Every time I considered it in the past it was by asking myself and others around me “would it be a way to bring more impact”. So far, every time the answer was “seems like no”.</p>
<p>That said, I’ve found that learning some management skills from great managers(in my case, James Iry, Scott MacVicar, Will Larson, Christian Anderson and Shane O’Sullivan) provides huge benefits even in IC role.</p>]]></description><link>https://staffeng.com/stories/dmitry-petrashko</link><guid isPermaLink="false">https://staffeng.com/stories/dmitry-petrashko</guid><pubDate>Thu, 07 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;May, 2020&lt;/span&gt;
&lt;a href=&quot;https://d-d.me/site/presentations/&quot;&gt;presentations&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/darkdimius&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/darkdimius/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em&gt;&lt;/strong&gt;
I am a Staff engineer and one of 5 Pillar Tech Leads of the Infrastructure org at Stripe, representing Developer Productivity group of teams.&lt;/p&gt;
&lt;p&gt;My team builds processes, tools and core libraries used during product development at Stripe, including testing frameworks, linters, typecheckers, build tools, libraries used for gradual rollout, and many others. Our work empowers Stripe engineers to focus on product.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Staff Engineer at Stripe isn’t a role, rather it’s a level that corresponds to expectation of impact, communication, people and project leadership skills. Staff engineers fill different roles, mine is a Pillar Tech Lead (PTL) role. In that role:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTLs help their teams make technical decisions that will play well with each other and with technical decisions made by other groups at Stripe. Teams at Stripe make most technical decisions themselves, but an experienced PTL can help fine tune those decisions to achieve better outcomes. PTLs also work as arbiters in cases where teams cannot reach an agreement amongst themselves on technical topics.&lt;/li&gt;
&lt;li&gt;PTLs guide the technical direction of Stripe, providing input on what are the most important problems to solve and setting the high level technical approaches to solving them.&lt;/li&gt;
&lt;li&gt;PTLs help their organization by representing it to other pillar tech leads and also bring technical decisions made elsewhere back to the teams they work with to create alignment.&lt;/li&gt;
&lt;li&gt;PTLs create opportunities for other engineers to take on impactful projects and help them succeed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this role, I closely partner with the Head of Developer Productivity and managers of the teams inside the group. We exchange context and work towards an agreed goal. Due to the kind of work that I do, I have good insight into the needs of our users &amp;#x26; tools at our disposal to address them, while the Head of DevProd has a better understanding of Stripe-wide non-technical constraints(e.g. resourcing constraints).&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Talks from Dmitry&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GJOWlDv_Fcs&quot;&gt;State of Sorbet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Gdx6by6tcvw&quot;&gt;Gradual typing for Ruby at Scale with Sorbet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8mFl8fywIP4&quot;&gt;Adventures in Efficiency and Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://d-d.me/site/presentations/&quot;&gt;Earlier presentations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On a perfect week I’d spend Monday, Wednesday and Friday in meetings or working groups: either 1:1’s or team meetings, collaborating on plans &amp;#x26; strategy, both short term and long term. Tuesday and Thursday of my perfect week would be spent coding alone. In reality, depending on team needs at the time, I may end up having more meetings or more time coding. If I’m working to set up a new project, I’ll commonly start by having a week with less meetings: focusing on project briefs, thinking through design, deliverables/milestones and security/reliability implications; followed by a week of socializing the proposal around the company and addressing feedback.&lt;/p&gt;
&lt;p&gt;While, from time to time it might seem hard to find time to write code, I believe it’s important as it allows me to maintain a strong connection to engineering and be the bridge between business needs/prioritization and engineering constraints that PTLs need to be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Staff Engineers, and Pillar Tech Leads in particular, frequently help set direction for a new project. I feel particularly impactful when I can help improve a proposal that&apos;s well intentioned and solves a real need, but the team that drafted it lacks either experience or context to write a good plan to capture the opportunity. In such cases, having a well structured plan can help substantially reduce the scope while getting to most of the value, and thus demonstrate impact sooner. Or, alternatively, see that the proposal in hand addresses more use cases than the team has originally anticipated and refocusing the project towards a usecases that was not known by the team would lead to bigger business impact: in both of these cases, I feel impactful by empowering other engineers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No, Stripe intends the Staff-badge to not be a gate into new opportunities and I believe we’re good at it. This is also true about the PTL role. We choose enginers for PTL position that are good at representing opinions of others. Even before I became a PTL I felt that prior PTL, &lt;a href=&quot;https://paultarjan.com/&quot;&gt;Paul Tarjan&lt;/a&gt;, always made sure my perspective was presented.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was hired specifically to introduce typechecking into Ruby at Stripe. This included, together with &lt;a href=&quot;https://nelhage.com/&quot;&gt;Nelson&lt;/a&gt; and &lt;a href=&quot;https://paultarjan.com/&quot;&gt;Paul&lt;/a&gt;, architecting and implementing the typechecker, &lt;a href=&quot;https://sorbet.org/&quot;&gt;Sorbet&lt;/a&gt;, and growing the culture around using it.&lt;/p&gt;
&lt;p&gt;In the early days of Sorbet, we’ve carefully chosen what features to add based on usecases that Stripe needs the most. I believe we’ve succeeded in covering most of usecases that Stripe had with a typesystem and, at the same time, keeping the simplicity: it’s very easy to get to a typesystem and culture that promotes complexity and elitism for sake of it and I’m happy that our efforts avoided swinging from untypedness to the other end of spectrum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I try to have at least a couple of days a week where I can code. Additionally, I work closely with other engineers on my teams and we continuously learn from each other.&lt;/p&gt;
&lt;p&gt;Developer productivity also organises a Stripe-wide engineer survey, where we are looking to find what are the biggest things keeping our engineers from being productive: maybe there’s some tool that became slow since the last survey or some use case that had a user base grow that’s not well supported. While this survey rarely finds things that we weren’t aware of, it’s a great tool for relative prioritization: we can compare how many people complain about things and prioritize them accordingly.&lt;/p&gt;
&lt;p&gt;Additionally, before Covid-19-induced lockdown, I used to join random tables for dinners at Stripe. I’d ask 3 questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are you working on?&lt;/li&gt;
&lt;li&gt;What makes it hard?&lt;/li&gt;
&lt;li&gt;How can infrastructure teams help?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This became a great tool in two ways: 1) connecting me to my users, helping discover their needs; 2) helping mitigate unhappiness of teams that aren’t yet supported by having a discussion similar to: “yes, I agree we could help you by doing X, now, lets together look on what we should stop doing to create place for this”, where a person would frequently discover that, while they would like us to address their pain point, they don&apos;t want it addressed at cost of us deprioritizing our current projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While sponsoring other engineers isn’t required for a Staff Engineer, I believe it helps to succeed as one, as it helps you deliver more impact by creating opportunities for others and helping them succeed.&lt;/p&gt;
&lt;p&gt;And yes, there have been multiple projects that I have helped scope, kick-off and derisk, while also helping grow a person to take it over from me when I roll off to the next thing.&lt;/p&gt;
&lt;p&gt;There’s also a distinction between mentorship and sponsorship and I do both. Mentorship is about helping people grow and deliver impact. Sponsorship is about helping a person get in a position where they could demonstrate their ability to deliver greater impact. In working with my teams, I try to help people work on projects somewhat out of their comfort zone, and in that I sponsor them, and then, I could mentor them to help the project succeed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title Staff Engineer at your current company. Were you hired as a Staff Engineer? If not, what was the process of getting promoted to Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wasn’t hired as a Staff Engineer. I had to get uplevelled twice to get to Staff level at Stripe. Both of these uplevels were similar: Stripe uplevels after an employee has already been operating on the next level for quite a while and this adjusts expectations that they are expected to continue operating on that level going forward.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order of decreasing importance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Focusing on impact on business and company.&lt;/li&gt;
&lt;li&gt;Being collaborative: by joining meetings/working groups you should help achieve a better outcome.&lt;/li&gt;
&lt;li&gt;Technical knowledge.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For me personally, the area that I needed to get good at before getting Staff Engineer was the second item. I was already delivering impact and was considered a person to go to for technical advice. I needed to improve my communication skills and collaboration skills so that I could constructively help people who are outside of my team, who might see me for first time ever and who, despite having good intentions behind their project, may not have the best plan to get it delivered.&lt;/p&gt;
&lt;p&gt;Technique that helped me in that was asking for feedback in private chat immediately after the meeting, in particular after meetings that didn&apos;t not go perfectly. This has allowed me to learn what I did that might have contributed to other parties not feeling comfortable in these meetings and, in a few cases, the genuinity of asking for how it could have gone better helped fix the outcome of a meeting that has already gone poorly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have where you worked and your education impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Companies:&lt;/strong&gt; I appreciate that Stripe has so many opportunities for impact and this definitely helped me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Education:&lt;/strong&gt; I happened to have got a very practical PhD (on how to build fast &amp;#x26; maintainable compilers) that almost fully translated to knowledge that’s applicable to my work: helping a company to scale engineering. And, while it served me well, I think there’s a lot of luck involved: I happened to join the right lab at the right time (when conditions for Scala3 being born became material, I’d been at the lab long enough to not be too “green” but still early enough to not have totally set the direction of my research). I’m unsure if I’d advise others to do a PhD: from my perspective, in practical terms, many of my friends would have learned as much by building systems at Stripe/Google/Facebook for the same 4+ years it takes to complete a PhD. If you’d like to learn how databases work - you’d probably learn this not only at the laboratory that does research on databases, but also at the companies that have some of the highest demands for databases and have teams working to improve them. That said, PhD was something that was a good tool for me to change my location.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; I came to the US from Switzerland to join Stripe. I came to Switzerland from Russia to join one of the best PhD programs in Computer Science. I came to Russia to join one of the best ex-USSR universities from Ukraine. In each of these relocations, I feel, I played geographical arbitrage: I was looking to escape the place where I was among the best to the place where I’d be average. In some of them, I think I wasn’t the prime candidate. By joining the people there and learning from them, I grew a lot. It’s hard for me to tell if US vs EU is a better location career-wise, but I can definitely tell from my experience that changing locations helped me grow a lot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&apos;s a very hard question for me to answer in retrospect. This is because: AFAIK Sorbet was big enough to be my Staff engineer project, BUT with Nelson and Paul being there and us working closely and very fast with each other, it was very hard to attribute success of the project to specific individuals rather than the whole team.&lt;/p&gt;
&lt;p&gt;Around the first performance evaluation into the projects, all three of us got feedback that we should have better ways to prescribe which impact was the result of which individual. While I’d love to say that the fact that we didn’t face similar issue on the next performance evaluation was due to intentional actions, I don’t think that is true: I think the project just naturally entered a stage where it was much bigger and thus we didn’t need to “quickly iterate in the same 10 files”, naturally leading to us having clearer and bigger areas of ownership.&lt;/p&gt;
&lt;p&gt;I became the “internal architecture/subtyping” person, as well as “talk to users” person, while Paul became the “change the code to make typechecker like it” person. Nelson clearly knew better how other systems at Stripe work and thus helped integrate the tool with them. All of these played to our strong points: I had prior experience with type checkers (this is what my PhD was about), Paul has a huge skill for programmatic codemods and Nelson is both very knowledgeable in systems in general and has been at Stripe long enough and early enough to know pretty much every system at Stripe. At this point in the project (stabilization, rollout) all of these became huge areas and thus it became much easier to have a person be a directly responsible individual (DRI) for an area, with others helping occasionally.&lt;/p&gt;
&lt;p&gt;After Sorbet I had a couple other impactful projects delivered in short timeframe (6 months), that, I believe, sealed the deal of me getting the Staff Engineer level, but, If I was to choose one, I’d still choose Sorbet due to vast scope of project: both technical and cultural.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Working with Martin Odersky and Ondrej Lhotak in academia helped me understand how complex systems work together and how to explain that clearly.&lt;/li&gt;
&lt;li&gt;Brian Goetz helped me understand how much work is behind a simple, yet, robust to withstand widespread adoption, design.&lt;/li&gt;
&lt;li&gt;Paul Tarjan showed me the importance of adjusting my communication style to lead to constructive outcomes for all involved parties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At least, at Stripe, Staff Engineers work on very different areas. Make sure you agree with your reporting chain on what is the impact you should be achieving and what are the things you’re allowed to compromise on on the way to that impact. Communicate clearly what compromises you&apos;re doing and why.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every time I considered it in the past it was by asking myself and others around me “would it be a way to bring more impact”. So far, every time the answer was “seems like no”.&lt;/p&gt;
&lt;p&gt;That said, I’ve found that learning some management skills from great managers(in my case, James Iry, Scott MacVicar, Will Larson, Christian Anderson and Shane O’Sullivan) provides huge benefits even in IC role.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Bert Fan - Senior Staff Engineer at Slack]]></title><description><![CDATA[<p><span class="date">May, 2020</span>
<a href="https://bert.org">blog</a>,
<a href="https://twitter.com/bertrandom">twitter</a>,
<a href="https://www.linkedin.com/in/bertrandom/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.</em></strong></p>
<p>I’m a Senior Staff Engineer on the Platform team at Slack. I was lucky enough to join Slack shortly after we launched the <a href="http://slack.com/apps">Slack App Directory</a> so I’ve had the opportunity to help evolve the Slack Platform into what it is today.</p>
<p>It’s hard to generalize the work that I do but the goal is always the same: enable developers to build on top of Slack to make our customers’ working lives simpler, more pleasant, and more productive. Examples of this include building new platform features, improving API performance, writing documentation, and working with partners, internal integrators, and third-party developers to ensure that they can build impactful software.</p>
<p><strong><em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?</em></strong></p>
<p>The work that Staff-plus engineers at Slack do is incredibly varied depending on which part of the company you’re in, the composition and size of your team, and what the business needs from you. Staff-plus engineers are often the tech leads of projects, which means that they help write the tech spec, get feedback from various stakeholders, work closely with design and product to decide what to build, and lead the technical implementation for the project. They also mentor other engineers, improve our interview process and engineering culture, develop engineering processes and tools, and provide technical direction for refactors and tech debt. Staff-plus is all about enabling other people to do better work - to be a force multiplier.</p>
<p>My role includes all the things that I’ve mentioned but I tend to focus less on specific pieces of technology and more on what the technology is enabling. So I might spend time prototyping concepts that will almost certainly be thrown away or gathering usage metrics around a particular user flow to better understand how to improve the system. I will often build apps on top of the Slack Platform to keep myself honest about what the developer experience is actually like and actively try to build on other people’s platforms to see what works and what doesn’t. A lot less of the code that I write makes it into production than other engineers at the company and I’m completely fine with that.</p>
<p><strong><em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?</em></strong></p>
<p>I’ve done a lot of experimentation with various product ideas in the last year, some of which have evolved into actual features of our Platform. Part of the reason I was given the opportunity to do that is that I’ve established trust through other projects that I’ve successfully shipped, but having a Staff-plus title seems to bestow a little more flexibility in what I choose to work on.</p>
<p>For better or worse, I’m also in a lot of strategy and planning meetings I was never in before. If you’ve ever wanted to know how the sausage was made from a leadership angle, maybe consider if you actually want to know how the sausage is made.</p>
<p><strong><em>How do you keep in touch with how things really work as you spend less time on hands-on development?</em></strong></p>
<p>The best way I’ve found is to have regular 1:1s with engineers across the company and spend a lot of time listening. You can learn a lot about the current state of engineering if you take the time to develop relationships where engineers feel like they can be honest with you. As a Staff-plus engineer, you have no real influence over how much money someone makes or their next promotion, so engineers can be more candid with you if you make yourself accessible to them.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?</em></strong></p>
<p>I come from a fairly privileged background - I graduated from college with a computer science degree and no debt or student loans and part of what that bought me was the flexibility to leave a job without worrying how I was going to make rent or if I was going to find a new one. And I leveraged that flexibility into becoming pickier and more strategic about the places that I wanted to work.</p>
<p>I acknowledge that most people don’t have that option but for me I thought it was important to work on things that I felt were meaningful - things that I personally used that I thought were having a positive impact on the world. And I believe those choices have paid dividends because companies like that attract like-minded folks who will go on to other companies that hopefully are aligned in the same way. This is not a meritocracy and your professional network is important. I’ve gotten jobs because I’ve applied on the company’s website like everybody else but I’ve also gotten jobs because I’ve awkwardly e-mailed a manager there that I haven’t talked to in years but that I respect and know that they respect me as an engineer. We work in an industry where there are a lot of options of how to spend your time and if you’re lucky enough to be in a position where you have the flexibility and privilege to choose, you’re doing yourself a disservice by not regularly evaluating what you work on.</p>
<p>Maybe at one point you’ll become the kind of engineer that when you announce on Twitter that you’re starting a new job, people who you’ve worked with before will create a calendar reminder for four years in the future when you’re fully vested so they they have the highest likelihood of poaching you, but until then, you’re going to have to write awkward e-mails to people that you would like to work with again.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p>The best advice I’ve heard is that often reaching Staff is a combination of luck, timing, and work. Here’s a path of events that I’ve observed and personally experienced:</p>
<ol>
<li>Develop a relationship with your manager where they implicitly trust you and you implicitly trust them. Be honest and direct with them about what you want. Developing this trust will require you successfully delivering on the things they ask you to work on.</li>
<li>Because your manager trusts you, when they hear about projects that will have a significant impact for the company, they will advocate for you to lead those projects. Alternatively, you’ll have to find or create a project yourself and advocate for it to happen. This is much harder but still plausible.</li>
<li>Deliver the project successfully.</li>
<li>The project has a significant impact on the company.</li>
<li>Because you successfully delivered a project that had a significant impact on the company, it’s easy to advocate for your promotion to Staff, which your manager is happy to do.</li>
</ol>
<p>Hopefully you can see where luck and timing can affect this simple plan - what if you don’t get along with your manager? What if your manager leaves the company or gets promoted? What if you’re in an area of a company that gets no interesting projects? What if the project is doomed to fail? What if the project succeeds but has no impact?</p>
<p>These are all possible and there’s no generic piece of advice that I can give to overcome any of them except that sometimes you’re never going to get promoted and you should probably be honest with yourself and identify when you’re in that situation. In that case, sometimes the only way to get promoted would be to leave the company and do something else. You may boomerang back into the company at a higher level than you left at later in your career, but much like a failed relationship that you revisit, do you still want to be there or is there too much baggage to ever make it work?</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p>It’s kind of a running joke in engineering but a lot of people get into this profession because they don’t like talking to people but to be effective at your job as a Staff Engineer, you’re likely going to spend a lot of your time talking to people. I think you can progress early in your career by focusing on just writing better and better code but at some point you should probably shift to focusing on working better with other people. Trusting other people and giving them the freedom to make technical decisions (even ones that you disagree with!), understanding other people’s motivations, learning to give difficult feedback, knowing when to pick your battles - these are all useful skills to have.</p>
<p>If you haven’t already, try to become the engineer that people want to work with. There are a handful of engineers at every company who, if you ever left your job, you would try to circumvent a non-solicitation agreement to work with again. Become one of those engineers for other people and it’ll unlock a lot of doors for you in your career.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>Early in my career, I once told my manager I was concerned that I would have to go into management at some point and they said something like, “Don’t worry about that! At this company we have two different tracks, the management track and the IC (individual contributor) track, and there are equivalent roles in the IC track for the highest management positions, so you’ll never have to switch to management in order to move up in the company.” While technically true, the omission that seems obvious to me now is that at a lot of companies, the management track is a lot less vague than the engineering track.</p>
<p>The higher up you climb in the engineering ladder, the less examples you’ll have of what to emulate and the examples seem more and more unattainable. When you start to dig into it, you may realize that someone had gotten the title when their company was acquired or they were the author of a programming language or framework or they unlocked tens of millions of dollars in revenue for the company.</p>
<p>A lot of my colleagues have gone into management for various reasons and I suspect one of those reasons may be the more obvious, reliable progression that I’ve described. But I believe strongly that that shouldn’t be your primary motivating factor. If you have open calendars, take a look at your manager’s schedule and the number of 1:1s they conduct a week. Is that a schedule that you would enjoy? The desire to write code isn’t black and white since there are tech lead manager positions where you write code and Staff-plus engineer roles where you never write a line of production code and spend the majority of your day in Google Docs or Dropbox Paper. But in my career, I’ve never had to lay someone off or deny them a promotion or write performance reviews - I know which side of the coin I’d rather be on.</p>]]></description><link>https://staffeng.com/stories/bert-fan</link><guid isPermaLink="false">https://staffeng.com/stories/bert-fan</guid><pubDate>Tue, 05 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;May, 2020&lt;/span&gt;
&lt;a href=&quot;https://bert.org&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/bertrandom&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/bertrandom/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m a Senior Staff Engineer on the Platform team at Slack. I was lucky enough to join Slack shortly after we launched the &lt;a href=&quot;http://slack.com/apps&quot;&gt;Slack App Directory&lt;/a&gt; so I’ve had the opportunity to help evolve the Slack Platform into what it is today.&lt;/p&gt;
&lt;p&gt;It’s hard to generalize the work that I do but the goal is always the same: enable developers to build on top of Slack to make our customers’ working lives simpler, more pleasant, and more productive. Examples of this include building new platform features, improving API performance, writing documentation, and working with partners, internal integrators, and third-party developers to ensure that they can build impactful software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The work that Staff-plus engineers at Slack do is incredibly varied depending on which part of the company you’re in, the composition and size of your team, and what the business needs from you. Staff-plus engineers are often the tech leads of projects, which means that they help write the tech spec, get feedback from various stakeholders, work closely with design and product to decide what to build, and lead the technical implementation for the project. They also mentor other engineers, improve our interview process and engineering culture, develop engineering processes and tools, and provide technical direction for refactors and tech debt. Staff-plus is all about enabling other people to do better work - to be a force multiplier.&lt;/p&gt;
&lt;p&gt;My role includes all the things that I’ve mentioned but I tend to focus less on specific pieces of technology and more on what the technology is enabling. So I might spend time prototyping concepts that will almost certainly be thrown away or gathering usage metrics around a particular user flow to better understand how to improve the system. I will often build apps on top of the Slack Platform to keep myself honest about what the developer experience is actually like and actively try to build on other people’s platforms to see what works and what doesn’t. A lot less of the code that I write makes it into production than other engineers at the company and I’m completely fine with that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve done a lot of experimentation with various product ideas in the last year, some of which have evolved into actual features of our Platform. Part of the reason I was given the opportunity to do that is that I’ve established trust through other projects that I’ve successfully shipped, but having a Staff-plus title seems to bestow a little more flexibility in what I choose to work on.&lt;/p&gt;
&lt;p&gt;For better or worse, I’m also in a lot of strategy and planning meetings I was never in before. If you’ve ever wanted to know how the sausage was made from a leadership angle, maybe consider if you actually want to know how the sausage is made.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best way I’ve found is to have regular 1:1s with engineers across the company and spend a lot of time listening. You can learn a lot about the current state of engineering if you take the time to develop relationships where engineers feel like they can be honest with you. As a Staff-plus engineer, you have no real influence over how much money someone makes or their next promotion, so engineers can be more candid with you if you make yourself accessible to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I come from a fairly privileged background - I graduated from college with a computer science degree and no debt or student loans and part of what that bought me was the flexibility to leave a job without worrying how I was going to make rent or if I was going to find a new one. And I leveraged that flexibility into becoming pickier and more strategic about the places that I wanted to work.&lt;/p&gt;
&lt;p&gt;I acknowledge that most people don’t have that option but for me I thought it was important to work on things that I felt were meaningful - things that I personally used that I thought were having a positive impact on the world. And I believe those choices have paid dividends because companies like that attract like-minded folks who will go on to other companies that hopefully are aligned in the same way. This is not a meritocracy and your professional network is important. I’ve gotten jobs because I’ve applied on the company’s website like everybody else but I’ve also gotten jobs because I’ve awkwardly e-mailed a manager there that I haven’t talked to in years but that I respect and know that they respect me as an engineer. We work in an industry where there are a lot of options of how to spend your time and if you’re lucky enough to be in a position where you have the flexibility and privilege to choose, you’re doing yourself a disservice by not regularly evaluating what you work on.&lt;/p&gt;
&lt;p&gt;Maybe at one point you’ll become the kind of engineer that when you announce on Twitter that you’re starting a new job, people who you’ve worked with before will create a calendar reminder for four years in the future when you’re fully vested so they they have the highest likelihood of poaching you, but until then, you’re going to have to write awkward e-mails to people that you would like to work with again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best advice I’ve heard is that often reaching Staff is a combination of luck, timing, and work. Here’s a path of events that I’ve observed and personally experienced:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Develop a relationship with your manager where they implicitly trust you and you implicitly trust them. Be honest and direct with them about what you want. Developing this trust will require you successfully delivering on the things they ask you to work on.&lt;/li&gt;
&lt;li&gt;Because your manager trusts you, when they hear about projects that will have a significant impact for the company, they will advocate for you to lead those projects. Alternatively, you’ll have to find or create a project yourself and advocate for it to happen. This is much harder but still plausible.&lt;/li&gt;
&lt;li&gt;Deliver the project successfully.&lt;/li&gt;
&lt;li&gt;The project has a significant impact on the company.&lt;/li&gt;
&lt;li&gt;Because you successfully delivered a project that had a significant impact on the company, it’s easy to advocate for your promotion to Staff, which your manager is happy to do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully you can see where luck and timing can affect this simple plan - what if you don’t get along with your manager? What if your manager leaves the company or gets promoted? What if you’re in an area of a company that gets no interesting projects? What if the project is doomed to fail? What if the project succeeds but has no impact?&lt;/p&gt;
&lt;p&gt;These are all possible and there’s no generic piece of advice that I can give to overcome any of them except that sometimes you’re never going to get promoted and you should probably be honest with yourself and identify when you’re in that situation. In that case, sometimes the only way to get promoted would be to leave the company and do something else. You may boomerang back into the company at a higher level than you left at later in your career, but much like a failed relationship that you revisit, do you still want to be there or is there too much baggage to ever make it work?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s kind of a running joke in engineering but a lot of people get into this profession because they don’t like talking to people but to be effective at your job as a Staff Engineer, you’re likely going to spend a lot of your time talking to people. I think you can progress early in your career by focusing on just writing better and better code but at some point you should probably shift to focusing on working better with other people. Trusting other people and giving them the freedom to make technical decisions (even ones that you disagree with!), understanding other people’s motivations, learning to give difficult feedback, knowing when to pick your battles - these are all useful skills to have.&lt;/p&gt;
&lt;p&gt;If you haven’t already, try to become the engineer that people want to work with. There are a handful of engineers at every company who, if you ever left your job, you would try to circumvent a non-solicitation agreement to work with again. Become one of those engineers for other people and it’ll unlock a lot of doors for you in your career.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Early in my career, I once told my manager I was concerned that I would have to go into management at some point and they said something like, “Don’t worry about that! At this company we have two different tracks, the management track and the IC (individual contributor) track, and there are equivalent roles in the IC track for the highest management positions, so you’ll never have to switch to management in order to move up in the company.” While technically true, the omission that seems obvious to me now is that at a lot of companies, the management track is a lot less vague than the engineering track.&lt;/p&gt;
&lt;p&gt;The higher up you climb in the engineering ladder, the less examples you’ll have of what to emulate and the examples seem more and more unattainable. When you start to dig into it, you may realize that someone had gotten the title when their company was acquired or they were the author of a programming language or framework or they unlocked tens of millions of dollars in revenue for the company.&lt;/p&gt;
&lt;p&gt;A lot of my colleagues have gone into management for various reasons and I suspect one of those reasons may be the more obvious, reliable progression that I’ve described. But I believe strongly that that shouldn’t be your primary motivating factor. If you have open calendars, take a look at your manager’s schedule and the number of 1:1s they conduct a week. Is that a schedule that you would enjoy? The desire to write code isn’t black and white since there are tech lead manager positions where you write code and Staff-plus engineer roles where you never write a line of production code and spend the majority of your day in Google Docs or Dropbox Paper. But in my career, I’ve never had to lay someone off or deny them a promotion or write performance reviews - I know which side of the coin I’d rather be on.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Silvia Botros - Senior Principal Engineer at Twilio Inc.]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="https://blog.dbsmasher.com/">blog</a>,
<a href="https://twitter.com/dbsmasher">twitter</a>,
<a href="https://www.linkedin.com/in/silviabotros/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.</em></strong></p>
<p>I work at Twilio and my title is Senior Principal Engineer. I’m part of the Architecture Team, one of the architects reporting to the Chief Architect. We’re also not the only architects at Twilio, typically every Business Unit is led by a General Manager and GMs have architects who report to them and are focused on their particular product.</p>
<p>I joined Twilio through the acquisition of SendGrid, and Twilio’s Chief Architect came forward from SendGrid as well, and formed this architecture team after the acquisition. Since our team is new we don’t have our goals or KPIs super formalized yet, some of our work is very hard to measure, but this is an area we’re thinking about, along with our longer-term vision.</p>
<p>Personally, I am focused on databases at large, and tend to jump around to help out with projects that touch our databases. My coworkers are in similar roles in different areas. Steve Kinney is the architect for frontend. Josh Barratt focuses on our platform, looking for commonalities across products that could be centralized in a useful way. We are what we call ‘horizontal’ architects, working along the specific product architects.</p>
<p><strong><em>What do typical Staff-plus engineers do at Twilio?</em></strong></p>
<p>Twilio doesn’t actually have a Staff Engineer title, for us it goes from Senior Engineer to Principal Engineer. “What do Principal Engineers do?” is a fascinating question. Before the acquisition there was a big effort to align titles between SendGrid and Twilio, and while we did do that, some of the underlying parts still haven’t coalesced entirely, and maybe they’ll never totally align depending on the Business Unit and product.</p>
<p>There’s always going to be details of the role that vary wildly depending on what you’re specifically doing. For example, Twilio has already bifurcated the role, where you can either be a Principal who spends most of your time writing software or an Architect who focuses more on strategy and less on coding.</p>
<div class="pull">
<p><strong>More from and about Silvia</strong></p>
<ul>
<li><a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer</a></li>
<li><a href="https://www.arresteddevops.com/principal-engineer/">Principal Engineering with Silvia Botros on Arrested DevOps</a></li>
<li><a href="https://www.learningfromincidents.io/blog/teaching-the-smell">Teaching "the smell"</a></li>
<li><a href="https://blog.dbsmasher.com/2020/04/08/high-performance-mysql.html">High Performance MySQL</a></li>
</ul>
</div>
<p><strong><em>How do you spend your time day-to-day?</em></strong></p>
<p>For me specifically, it's a lot of being on Slack and email to answer questions, along with tons and tons of Google documents. The documents I collaborate on will vary from strategy plans to blueprints. I also spend a lot of time reading other people’s documents. If someone is testing a new tool and writes up their findings, I’ll review that. If someone is writing a proposal that changes how we deliver software or how to tackle a new and emerging business need, I will review that and provide feedback.</p>
<p>I don’t do coding for the business anymore. I think the last time I had to pull up my terminal it was to refactor my dot files. This is an intentional decision by my boss, the Chief Architect. He’ll check in with us every quarter to make sure we didn’t contribute any code that goes into production. Part of that is his vision for the architect role, and another part of that is purely related to classifying our work for the Finance organization.</p>
<p>Our philosophy is that our job isn’t to do the code, but to help others do it with growth and the long-term in mind.</p>
<p><strong><em>One of the challenges I've seen as people stop writing software is they lose empathy for how things actually work on the ground. How do you maintain that awareness if you aren't frequently writing software?</em></strong></p>
<p>I spend a lot of time maintaining empathy. If I have an empty slot between meetings I’ll look through the rooms in Slack to see what issues are cropping up. I’ll also reach out to folks and have one-on-ones to understand their pain points. It’s a challenge and I’m not entirely sure how I’ll be able to keep up with it long-term.</p>
<p>We did an engineering survey before the acquisition and also recently the Platform Group did one for a team offsite. We got feedback on how to provision infrastructure, deploying changes to production, CI/CD, and so on. The thing that always surprises me is that we’ll often have an existing solution but a lot of people within engineering won’t know it exists. This means the baseline isn’t always getting feedback to improve the tool, but instead it’s getting folks to know it exists at all.</p>
<p>Similarly, I also find that I need to spend time explaining the glue work required to integrate vendors and tools effectively into our infrastructure. Sometimes it can seem like you just install a new enterprise tool and it all works, and folks will propose dropping in a new tool because an existing one has some issues, but there’s a lot of hidden work to do that. The current tool might not be great, but it’s probably one of the better ones and we’ve probably already spent a lot of time making it work as well as it does.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer?</em></strong></p>
<p>Often the most impactful things I do is convince someone not to write a new thing. I often find myself asking people, “Why are you doing that?”, genuinely asking to understand how they got here and try to steer them towards an existing solution.</p>
<p>I joined SendGrid back when it was roughly thirty engineers, maybe sixty in the whole company. We grew to about five hundred before we got acquired by Twilio, and I’ve watched over that period how the overhead of communication costs have increased, and noticed that they’re often underinvested in relative to our technical systems. Some of my most impactful work is noticing similar approaches across groups and facilitating communication so they don’t find themselves running almost identical systems in a year.</p>
<p><strong><em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?</em></strong></p>
<p>This was less noticeable when I reached Principal Engineer, but it’s definitely the case as a Senior Principal Engineer. We consider Senior Principals to be at the Director level, and that’s not just a verbal acknowledgement but also getting included in certain private email groups, being invited to performance calibration meetings, and so on. Calibration meetings are particularly important, because you can bring feedback that might not otherwise surface in a room of managers.</p>
<p>My opinion is more respected with the title. I don’t subscribe to the idea that titles don’t matter. I think only a certain demographic gets to say that, and that’s not my demographic.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change?</em></strong></p>
<p>I spend a lot of my time advocating for technology and architecture decisions. If it were up to me, yeah, I’d love to specify the one or two patterns for all applications to access the database, but it doesn’t really work out that way. There is always a team that has a business case that doesn’t work with what you thought was a reasonable solution for everyone. There will always be a prioritization conversation where you make imperfect tradeoffs.</p>
<p>Once you reach the Principal and Senior Principal level, you start getting into the room for the prioritization and dependency meetings, and you see the long list of other projects on the roadmap for the teams you’re asking to make changes. The obvious decisions aren’t so obvious after that.</p>
<p>There’s a misconception that as an architect you’re a manager without reports and can simply tell people what to do, but no, it means that you’re exposed to the full details of the sausage making and that makes things much more complex. In some ways, I’ve had it relatively easy because I’ve had a specific focus on databases most of my entire time at SendGrid and now at Twilio. Compared to databases, the business side’s complexity is much larger, and their decisions carry more complex consequences.</p>
<p>Early on, I also had the unfair advantage of being the only full-time employee working on databases, because the only other people working on databases for a long time at SendGrid were contractors. This made it easy for me to make a bunch of decisions around database architecture. Now my challenge is having influence at a much larger and more complex org with a lot more stakeholders and no direct impact on the code.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>I don’t think that sponsoring others is specifically called out in my role because I don’t have direct reports, but I do some strategic sponsorship work. For example, I pushed to expand our database team and pushed to make sure we hired a diverse team.</p>
<p>Since then, my contributions have been things like bringing my voice to calibration meetings, particularly around raising visibility around how bias can impact underrepresented people. This is the sort of work you can’t do until you’re in the room, which is why becoming Principal has been important.</p>
<p><strong><em>You first got the title Principal Engineer at Sendgrid. What was the process of getting promoted to Principal?</em></strong></p>
<p>I got the Principal title at SendGrid and then 18 months later I got the Senior Principal title. The move to Senior Principal technically happened after the Twilio acquisition, but the performance cycle was still using the SendGrid system since we hadn’t fully integrated HR processes yet at that point. So take this as a disclaimer that i did not get through a promotion process at Twilio :)</p>
<p>For the first promotion, I had to get heavily involved, document all my work, and then show how it matched with the career development framework we had. Although, really my work started even earlier! Early on at SendGrid we didn’t even have a career ladder defined, and I grabbed Camille Fournier’s career ladder for <a href="https://dresscode.renttherunway.com/blog/ladder">Rent the Runway</a>, and used that to get the Senior Engineer title.</p>
<p>Going back to the Principal Engineer promotion, I put the materials together myself and gave that to my manager. I was expecting to do the same thing for the Senior Principal promotion, but actually I didn’t do anything that time. I had a new manager and he surprised me: he’d already been talking with the Chief Architect about the promotion because I would report to the Chief Architect if the promotion went through, and it all happened without me preparing anything.</p>
<p>What I learned from that is that it’s really a function of who the people are and the circumstances they’re in. My manager when I went from Senior to Principal was incredibly oversubscribed. He had something like twenty direct reports and he was doing all these projects in addition to managing the team.</p>
<p>But later, having a manager who was invested in my progress, advocated for me and worked with the right people to make the case for promoting me to Senior Principal meant all the difference in how and when it happened.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff?</em></strong></p>
<p> Writing and speaking externally helped, as did joining early so I know where all the bodies are in the infrastructure and the code. I wrote my first blog post more than five years ago, not with a clear goal but more because we were doing all this cool stuff and I thought people would find it interesting. It definitely wasn’t to get a promotion, but it snowballed from there.</p>
<p>My first blog post got noticed by Baron Schwartz, who’s pretty well known in the database community, and he reached out for me to create a case study with his new company. Then I became more involved in the emerging database community, and from that I got to do a couple of conference speaking slots. All of this built into more visibility for me and my work.</p>
<p><strong><em>Do you feel that it’s important to continue speaking and writing in public? Or have you already established your credibility and don’t feel the need to do more?</em></strong></p>
<p>I don’t think of it this way, it’s more that if I’m passionate about something then I really enjoy speaking and writing about it. I’ve spoken at about three conferences and stepped back a bit since it’s logistically difficult with younger children. I might get back into speaking more in a few years.</p>
<p>I have found that I prefer blog posts more than speaking. I’ve done some writing on company blogs, but most of my writing has been on my personal blog. Often I’ll have a strong opinion and it might be one that the company doesn’t share, so I’ve found that’s easier.</p>
<p>My blog post that’s gotten the most traction was <a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer</a>, which I’m still having people reach out about frequently.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p>I don't know if other engineers who are trying to get to Principal have had explicit “Staff Projects” where they had to complete this specific project to get promoted, but I did not have one. Most of my promotions have come from work that I’ve been doing for many months and we can see the results.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p>The most valuable advice I got is that it’s not always about being right. If you roll back five or six years ago, I was bad at this. I would dig in when I felt I was right. It didn’t matter to me if there was a business deliverable or something was burning, I would still try to stop someone from taking approaches I disagreed with. I wouldn’t take the time to understand the alternatives or the product priorities that were creating tension with doing the right thing.</p>
<p>Eventually our former VP of Engineering gave me feedback on this. He was kind of Yoda-like, a man of few words, but when he said something you would listen. When he started at SendGrid, I was incredibly burned out and jaded, getting increasingly frustrated as the product grew. I was five years into the job and felt like people kept throwing problems over the wall for me to deal with.</p>
<p>He helped me turn that around, helped me understand what the product teams were having to deal with, why their concerns mattered, and how to use my knowledge to help them get to the right tradeoff instead of being antagonistic.  He was incredibly helpful, and this advice changed my career.</p>
<p><strong><em>What about a piece of advice for someone who is trying to reach Staff Engineer?</em></strong></p>
<p>The advice I’d give is so different for every company, it would even vary a lot between SendGrid and Twilio. You have to understand “what does Staff mean?” for your company, and to realize that you might not like it when you find it. That doesn’t necessarily mean you have to change your company, like when I had to bring in Rent the Runway’s career ladder to establish the idea of having a career ladder.</p>
<p>It took the company a while to make that change, but ultimately leadership also saw why the change was necessary and it happened. But you’ve got to go into it with eyes wide open, it can be a long haul if your view of the job is not aligned with the company. Be aware it may never align and moving on might become the only path.</p>
<p>On the other hand, if I was giving advice to someone who had just started as a Staff Engineer, I’d tell them to not to focus so much on the code and to be prepared not to write nearly as much code as they’re used to. Instead focus on getting to know the people and the business as well as you can. Your job now is not to be the producer of the value, your job is to be the force multiplier that helps everyone around you deliver better, more sustainable, products. And it is not a job you can measure in points or sprints. It is a job with quarters and even years of ROI.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>I was offered the opportunity to move into engineering management around the time when I reached Senior Engineer. You hear a lot of stories where women are told to go into management because they have social skills. I was super opposed to making the switch, and I’m grateful I wasn’t pushed into it. I also think at the time I would have been a terrible micromanager. I was hyper aware of what damage I could do to other people’s careers if I made that move without being fully ready to take its emotional toll.</p>
<p>Granted, now in my current role I do a ton of manager things, but it’s a completely different mindset than operating as a people manager.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p>Definitely Camille Fournier’s book, <a href="https://www.amazon.com/dp/B06XP3GJ7F/">The Manager’s Path</a>. Shortly after I read her book, I also read Dr. Nicole Forsgren’s <a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/">Accelerate</a>, which I like because it connects what we do in software with business impact. I still nerd out on the <a href="https://cloud.google.com/devops">DORA report</a> every year.</p>
<p>Most of the books out there are about how to write code as a senior engineer and don’t reflect the kind of work I do. For these roles that are about doing more than turning out code, the details for doing that role still don’t exist. I keep saying that I wish there was a counterpart to <em>The Manager’s Path</em> for engineers in roles like mine.</p>
<p><strong><em>How did you build out your network of other Principals? Was it something that happened organically or was it more deliberate?</em></strong></p>
<p>My network of Principals really all started with that one blog post, <a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer</a>. After I wrote that, I got invited to all these private Slacks and got to meet a bunch of people. Part of that was timing, as it was around the time that everyone was out there creating a hundred new Slacks for everything. I don’t travel very much, so this was really what worked for me.</p>]]></description><link>https://staffeng.com/stories/silvia-botros</link><guid isPermaLink="false">https://staffeng.com/stories/silvia-botros</guid><pubDate>Thu, 23 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;https://blog.dbsmasher.com/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/dbsmasher&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/silviabotros/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I work at Twilio and my title is Senior Principal Engineer. I’m part of the Architecture Team, one of the architects reporting to the Chief Architect. We’re also not the only architects at Twilio, typically every Business Unit is led by a General Manager and GMs have architects who report to them and are focused on their particular product.&lt;/p&gt;
&lt;p&gt;I joined Twilio through the acquisition of SendGrid, and Twilio’s Chief Architect came forward from SendGrid as well, and formed this architecture team after the acquisition. Since our team is new we don’t have our goals or KPIs super formalized yet, some of our work is very hard to measure, but this is an area we’re thinking about, along with our longer-term vision.&lt;/p&gt;
&lt;p&gt;Personally, I am focused on databases at large, and tend to jump around to help out with projects that touch our databases. My coworkers are in similar roles in different areas. Steve Kinney is the architect for frontend. Josh Barratt focuses on our platform, looking for commonalities across products that could be centralized in a useful way. We are what we call ‘horizontal’ architects, working along the specific product architects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What do typical Staff-plus engineers do at Twilio?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Twilio doesn’t actually have a Staff Engineer title, for us it goes from Senior Engineer to Principal Engineer. “What do Principal Engineers do?” is a fascinating question. Before the acquisition there was a big effort to align titles between SendGrid and Twilio, and while we did do that, some of the underlying parts still haven’t coalesced entirely, and maybe they’ll never totally align depending on the Business Unit and product.&lt;/p&gt;
&lt;p&gt;There’s always going to be details of the role that vary wildly depending on what you’re specifically doing. For example, Twilio has already bifurcated the role, where you can either be a Principal who spends most of your time writing software or an Architect who focuses more on strategy and less on coding.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;More from and about Silvia&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html&quot;&gt;On Being A Principal Engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.arresteddevops.com/principal-engineer/&quot;&gt;Principal Engineering with Silvia Botros on Arrested DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.learningfromincidents.io/blog/teaching-the-smell&quot;&gt;Teaching &quot;the smell&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.dbsmasher.com/2020/04/08/high-performance-mysql.html&quot;&gt;High Performance MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For me specifically, it&apos;s a lot of being on Slack and email to answer questions, along with tons and tons of Google documents. The documents I collaborate on will vary from strategy plans to blueprints. I also spend a lot of time reading other people’s documents. If someone is testing a new tool and writes up their findings, I’ll review that. If someone is writing a proposal that changes how we deliver software or how to tackle a new and emerging business need, I will review that and provide feedback.&lt;/p&gt;
&lt;p&gt;I don’t do coding for the business anymore. I think the last time I had to pull up my terminal it was to refactor my dot files. This is an intentional decision by my boss, the Chief Architect. He’ll check in with us every quarter to make sure we didn’t contribute any code that goes into production. Part of that is his vision for the architect role, and another part of that is purely related to classifying our work for the Finance organization.&lt;/p&gt;
&lt;p&gt;Our philosophy is that our job isn’t to do the code, but to help others do it with growth and the long-term in mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;One of the challenges I&apos;ve seen as people stop writing software is they lose empathy for how things actually work on the ground. How do you maintain that awareness if you aren&apos;t frequently writing software?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spend a lot of time maintaining empathy. If I have an empty slot between meetings I’ll look through the rooms in Slack to see what issues are cropping up. I’ll also reach out to folks and have one-on-ones to understand their pain points. It’s a challenge and I’m not entirely sure how I’ll be able to keep up with it long-term.&lt;/p&gt;
&lt;p&gt;We did an engineering survey before the acquisition and also recently the Platform Group did one for a team offsite. We got feedback on how to provision infrastructure, deploying changes to production, CI/CD, and so on. The thing that always surprises me is that we’ll often have an existing solution but a lot of people within engineering won’t know it exists. This means the baseline isn’t always getting feedback to improve the tool, but instead it’s getting folks to know it exists at all.&lt;/p&gt;
&lt;p&gt;Similarly, I also find that I need to spend time explaining the glue work required to integrate vendors and tools effectively into our infrastructure. Sometimes it can seem like you just install a new enterprise tool and it all works, and folks will propose dropping in a new tool because an existing one has some issues, but there’s a lot of hidden work to do that. The current tool might not be great, but it’s probably one of the better ones and we’ve probably already spent a lot of time making it work as well as it does.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Often the most impactful things I do is convince someone not to write a new thing. I often find myself asking people, “Why are you doing that?”, genuinely asking to understand how they got here and try to steer them towards an existing solution.&lt;/p&gt;
&lt;p&gt;I joined SendGrid back when it was roughly thirty engineers, maybe sixty in the whole company. We grew to about five hundred before we got acquired by Twilio, and I’ve watched over that period how the overhead of communication costs have increased, and noticed that they’re often underinvested in relative to our technical systems. Some of my most impactful work is noticing similar approaches across groups and facilitating communication so they don’t find themselves running almost identical systems in a year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was less noticeable when I reached Principal Engineer, but it’s definitely the case as a Senior Principal Engineer. We consider Senior Principals to be at the Director level, and that’s not just a verbal acknowledgement but also getting included in certain private email groups, being invited to performance calibration meetings, and so on. Calibration meetings are particularly important, because you can bring feedback that might not otherwise surface in a room of managers.&lt;/p&gt;
&lt;p&gt;My opinion is more respected with the title. I don’t subscribe to the idea that titles don’t matter. I think only a certain demographic gets to say that, and that’s not my demographic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spend a lot of my time advocating for technology and architecture decisions. If it were up to me, yeah, I’d love to specify the one or two patterns for all applications to access the database, but it doesn’t really work out that way. There is always a team that has a business case that doesn’t work with what you thought was a reasonable solution for everyone. There will always be a prioritization conversation where you make imperfect tradeoffs.&lt;/p&gt;
&lt;p&gt;Once you reach the Principal and Senior Principal level, you start getting into the room for the prioritization and dependency meetings, and you see the long list of other projects on the roadmap for the teams you’re asking to make changes. The obvious decisions aren’t so obvious after that.&lt;/p&gt;
&lt;p&gt;There’s a misconception that as an architect you’re a manager without reports and can simply tell people what to do, but no, it means that you’re exposed to the full details of the sausage making and that makes things much more complex. In some ways, I’ve had it relatively easy because I’ve had a specific focus on databases most of my entire time at SendGrid and now at Twilio. Compared to databases, the business side’s complexity is much larger, and their decisions carry more complex consequences.&lt;/p&gt;
&lt;p&gt;Early on, I also had the unfair advantage of being the only full-time employee working on databases, because the only other people working on databases for a long time at SendGrid were contractors. This made it easy for me to make a bunch of decisions around database architecture. Now my challenge is having influence at a much larger and more complex org with a lot more stakeholders and no direct impact on the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t think that sponsoring others is specifically called out in my role because I don’t have direct reports, but I do some strategic sponsorship work. For example, I pushed to expand our database team and pushed to make sure we hired a diverse team.&lt;/p&gt;
&lt;p&gt;Since then, my contributions have been things like bringing my voice to calibration meetings, particularly around raising visibility around how bias can impact underrepresented people. This is the sort of work you can’t do until you’re in the room, which is why becoming Principal has been important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title Principal Engineer at Sendgrid. What was the process of getting promoted to Principal?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I got the Principal title at SendGrid and then 18 months later I got the Senior Principal title. The move to Senior Principal technically happened after the Twilio acquisition, but the performance cycle was still using the SendGrid system since we hadn’t fully integrated HR processes yet at that point. So take this as a disclaimer that i did not get through a promotion process at Twilio :)&lt;/p&gt;
&lt;p&gt;For the first promotion, I had to get heavily involved, document all my work, and then show how it matched with the career development framework we had. Although, really my work started even earlier! Early on at SendGrid we didn’t even have a career ladder defined, and I grabbed Camille Fournier’s career ladder for &lt;a href=&quot;https://dresscode.renttherunway.com/blog/ladder&quot;&gt;Rent the Runway&lt;/a&gt;, and used that to get the Senior Engineer title.&lt;/p&gt;
&lt;p&gt;Going back to the Principal Engineer promotion, I put the materials together myself and gave that to my manager. I was expecting to do the same thing for the Senior Principal promotion, but actually I didn’t do anything that time. I had a new manager and he surprised me: he’d already been talking with the Chief Architect about the promotion because I would report to the Chief Architect if the promotion went through, and it all happened without me preparing anything.&lt;/p&gt;
&lt;p&gt;What I learned from that is that it’s really a function of who the people are and the circumstances they’re in. My manager when I went from Senior to Principal was incredibly oversubscribed. He had something like twenty direct reports and he was doing all these projects in addition to managing the team.&lt;/p&gt;
&lt;p&gt;But later, having a manager who was invested in my progress, advocated for me and worked with the right people to make the case for promoting me to Senior Principal meant all the difference in how and when it happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Writing and speaking externally helped, as did joining early so I know where all the bodies are in the infrastructure and the code. I wrote my first blog post more than five years ago, not with a clear goal but more because we were doing all this cool stuff and I thought people would find it interesting. It definitely wasn’t to get a promotion, but it snowballed from there.&lt;/p&gt;
&lt;p&gt;My first blog post got noticed by Baron Schwartz, who’s pretty well known in the database community, and he reached out for me to create a case study with his new company. Then I became more involved in the emerging database community, and from that I got to do a couple of conference speaking slots. All of this built into more visibility for me and my work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you feel that it’s important to continue speaking and writing in public? Or have you already established your credibility and don’t feel the need to do more?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t think of it this way, it’s more that if I’m passionate about something then I really enjoy speaking and writing about it. I’ve spoken at about three conferences and stepped back a bit since it’s logistically difficult with younger children. I might get back into speaking more in a few years.&lt;/p&gt;
&lt;p&gt;I have found that I prefer blog posts more than speaking. I’ve done some writing on company blogs, but most of my writing has been on my personal blog. Often I’ll have a strong opinion and it might be one that the company doesn’t share, so I’ve found that’s easier.&lt;/p&gt;
&lt;p&gt;My blog post that’s gotten the most traction was &lt;a href=&quot;https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html&quot;&gt;On Being A Principal Engineer&lt;/a&gt;, which I’m still having people reach out about frequently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&apos;t know if other engineers who are trying to get to Principal have had explicit “Staff Projects” where they had to complete this specific project to get promoted, but I did not have one. Most of my promotions have come from work that I’ve been doing for many months and we can see the results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most valuable advice I got is that it’s not always about being right. If you roll back five or six years ago, I was bad at this. I would dig in when I felt I was right. It didn’t matter to me if there was a business deliverable or something was burning, I would still try to stop someone from taking approaches I disagreed with. I wouldn’t take the time to understand the alternatives or the product priorities that were creating tension with doing the right thing.&lt;/p&gt;
&lt;p&gt;Eventually our former VP of Engineering gave me feedback on this. He was kind of Yoda-like, a man of few words, but when he said something you would listen. When he started at SendGrid, I was incredibly burned out and jaded, getting increasingly frustrated as the product grew. I was five years into the job and felt like people kept throwing problems over the wall for me to deal with.&lt;/p&gt;
&lt;p&gt;He helped me turn that around, helped me understand what the product teams were having to deal with, why their concerns mattered, and how to use my knowledge to help them get to the right tradeoff instead of being antagonistic.  He was incredibly helpful, and this advice changed my career.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who is trying to reach Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The advice I’d give is so different for every company, it would even vary a lot between SendGrid and Twilio. You have to understand “what does Staff mean?” for your company, and to realize that you might not like it when you find it. That doesn’t necessarily mean you have to change your company, like when I had to bring in Rent the Runway’s career ladder to establish the idea of having a career ladder.&lt;/p&gt;
&lt;p&gt;It took the company a while to make that change, but ultimately leadership also saw why the change was necessary and it happened. But you’ve got to go into it with eyes wide open, it can be a long haul if your view of the job is not aligned with the company. Be aware it may never align and moving on might become the only path.&lt;/p&gt;
&lt;p&gt;On the other hand, if I was giving advice to someone who had just started as a Staff Engineer, I’d tell them to not to focus so much on the code and to be prepared not to write nearly as much code as they’re used to. Instead focus on getting to know the people and the business as well as you can. Your job now is not to be the producer of the value, your job is to be the force multiplier that helps everyone around you deliver better, more sustainable, products. And it is not a job you can measure in points or sprints. It is a job with quarters and even years of ROI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was offered the opportunity to move into engineering management around the time when I reached Senior Engineer. You hear a lot of stories where women are told to go into management because they have social skills. I was super opposed to making the switch, and I’m grateful I wasn’t pushed into it. I also think at the time I would have been a terrible micromanager. I was hyper aware of what damage I could do to other people’s careers if I made that move without being fully ready to take its emotional toll.&lt;/p&gt;
&lt;p&gt;Granted, now in my current role I do a ton of manager things, but it’s a completely different mindset than operating as a people manager.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Definitely Camille Fournier’s book, &lt;a href=&quot;https://www.amazon.com/dp/B06XP3GJ7F/&quot;&gt;The Manager’s Path&lt;/a&gt;. Shortly after I read her book, I also read Dr. Nicole Forsgren’s &lt;a href=&quot;https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/&quot;&gt;Accelerate&lt;/a&gt;, which I like because it connects what we do in software with business impact. I still nerd out on the &lt;a href=&quot;https://cloud.google.com/devops&quot;&gt;DORA report&lt;/a&gt; every year.&lt;/p&gt;
&lt;p&gt;Most of the books out there are about how to write code as a senior engineer and don’t reflect the kind of work I do. For these roles that are about doing more than turning out code, the details for doing that role still don’t exist. I keep saying that I wish there was a counterpart to &lt;em&gt;The Manager’s Path&lt;/em&gt; for engineers in roles like mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How did you build out your network of other Principals? Was it something that happened organically or was it more deliberate?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My network of Principals really all started with that one blog post, &lt;a href=&quot;https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html&quot;&gt;On Being A Principal Engineer&lt;/a&gt;. After I wrote that, I got invited to all these private Slacks and got to meet a bunch of people. Part of that was timing, as it was around the time that everyone was out there creating a hundred new Slacks for everything. I don’t travel very much, so this was really what worked for me.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Michelle Bu - Payments Products Tech Lead at Stripe]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="http://blog.michellebu.com/">blog</a>,
<a href="https://twitter.com/hazelcough">twitter</a>,
<a href="https://www.linkedin.com/in/michellebu/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role at Stripe: what’s your title and generally the sort of work do you and your team do?</em></strong></p>
<p>I’m the Payments Products Tech Lead at Stripe, working directly with our Chief Product Officer. I support critical initiatives and work on mitigating urgent problems across the organization. I typically spend 80% of my time on one or two large cross-organizational design projects. I spend the remaining 20% reviewing and supporting technical and product design (in particular, API design) across the organization.</p>
<p><em>Sample of a “top 3” document I keep evergreen:</em></p>
<p><img src="/static/michelle-bu/Michelle-Bu0.png" alt="alt_text" title="image_tooltip"></p>
<p>I manage two engineers who embed into high priority areas. This both helps me scale my impact and also gives these engineers the chance to dip into many areas of Stripe. Right now, one is working on the core payments APIs and the other is focused on improving integration experience. I’m still evaluated on the IC ladder—the plan is to never have more than a few reports at a time.</p>
<div class="pull">
<p><strong>Michelle's podcast appearances</strong></p>
<ul>
<li><a href="http://businesslogic.fm/e6-michelle-bu-of-stripe-on-rapidly-scaling-yourself">Business Logic: Michelle Bu of Stripe on rapidly scaling yourself</a></li>
<li><a href="http://www.fullstackradio.com/60">Full Stack Radio: Michelle Bu - Engineering Payments at Stripe</a></li>
</ul>
</div>
<p><strong><em>What does a “normal” Staff-plus Engineer do at your company? Does your role look that way or does it differ?</em></strong></p>
<p>Most engineers in Staff-plus roles at Stripe work on specific teams. There are some Staff-plus Engineers who also have a Tech Lead title, and take on broader projects across a particular product area or technical domain.</p>
<p>There are two kinds of Staff-plus Engineers at Stripe: those whose scope is deep and those whose scope is broad.</p>
<p>Broad-scoped engineers create impact by working on vague, cross-organizational projects. They tend to accumulate a lot of context across many different domains and play a support role in many projects across the org. This shape of Staff-plus Engineer is most common on our product engineering teams.</p>
<p>Deep-scoped engineers tend to be subject-matter experts in a specific domain. They lead ambitious multi-year projects. This shape of Staff-plus Engineer can generally be found on our product infrastructure and systems teams.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer?</em></strong></p>
<p>This has changed over time for me as I’ve moved into my current Payment Products Tech Lead role. (For some context, Payments Products is made up of over 20 teams. We’re responsible for most of our user-facing APIs and UI libraries.)</p>
<p>I’ve taken to using the word “energized” over “impactful.” “Impactful” feels company-centric, and while that’s important, “energized” is more inwards-looking. Finding <em>energizing</em> work is what has kept me at Stripe for so long, pursuing impactful work.</p>
<p>When I worked directly on a team, I felt most energized when I was able to directly interact with users, whether it was helping users on the #stripe IRC channel or designing and shipping an API that users can integrate seamlessly.</p>
<p>In my current role, I feel energized when someone I’ve sponsored sends an announcement that they’ve shipped their work, or when I see that I’ve helped shape or shift an engineering team’s model of an important topic. It’s these teams, not me, who are doing the hard work day-to-day of building and supporting their technology. I measure my impact based on their progress and more importantly, the directionality of that progress and the alignment of their work to the company’s goals.</p>
<p>One concrete example from recent memory is when another staff-plus engineer and I categorized the shapes of APIs we commonly see: labeling some as flows, some as engines, some as configs, etc. The intent of this work was to build up a shared mental model and vocabulary for categorizing existing APIs and for discussing and designing new ones. Folks started to organically use these categories after seeing them once! It’s in these moments that I feel like I’m creating leverage and scaling my own impact by disseminating useful mental models and ideas.</p>
<p>I spend time on several of our review forums like API Review, but often these sorts of forums work more like code review. They happen so late in the design process that they tend to do a better job of preventing bad outcomes than of partnering with teams to steer great outcomes. I feel more impactful when I’m able to give engineers on product teams the tools to design great APIs.</p>
<p><strong><em>Can you think of anything you’ve done as a Staff-plus Engineer that you weren’t able to do or wouldn’t have done before reaching that title?</em></strong></p>
<p>I’ve been at Stripe for a long time (since 2013!). While I’ve always had some amount of clout because of my tenure, my role of Payment Products Tech Lead (and the fact that I report directly to the CPO) has definitely changed how people interact with me. I’m definitely feeling lonelier at work now (and am actively working on adapting to this new normal).</p>
<p>One thing that’s taken some getting used to is that now folks expect me to have an opinion about whatever we’re discussing! That didn’t happen as often when I was a staff-level engineer working directly on a team. I remember being in a meeting shortly after my role change where I was a bit quieter than usual because I was a little tired. I later heard that the presenters were worried that I hadn’t liked their proposal because I didn’t say anything. This was the first time that I realized people <em>looked to me</em> to have an opinion and to support their ideas! I’ve been careful since then to always stay engaged during meetings and to give feedback, even if it is just to explicitly say that I haven’t fully formed any opinions yet.</p>
<p>It’s a bit disorienting that some folks take my opinions more seriously and are nicer to me than when I wasn’t in such a visible role. Previously, there were cases where people weren’t collaborative or would dismiss my opinions. I think it was a good thing to have experienced that. I was confident enough (and trusted enough by the organization) to give them strong feedback on their collaboration so that I could ensure things like this weren’t happening to others like me. I now worry that I’m losing visibility into where these interactions are happening.</p>
<p><strong><em>How do you maintain empathy for other engineers’ development experiences as you spend less time programming?</em></strong></p>
<p>I’ve only had one year in my new role, so I don’t feel too disconnected yet. Maybe this is something that will change over time. I was previously tech lead for a smaller area. In that role, I wrote a small amount of software and contributed to some of my teams’ “run rotations,” where we triaged incoming requests and fixed urgent bugs.</p>
<p>To maintain context in my new role, I spend a good amount of time in one-on-ones with engineers and PMs working directly on execution. This week alone, I had 12 30-minute 1-1s. I also follow every incident that’s reported at Stripe. (We have a Slack group you can join to be automatically invited to Slack rooms for each incident!) The hum of incidents is particularly useful to tune into. By reading through the details of each incident, I’m able to estimate the distance between the reality of our systems and the idealized architecture / product that I spend my days thinking about. I want to know the shapes of issues that engineers are running into, the pits of failure they’re falling into, and how the developer environment was or wasn’t supporting them in getting out of those pits. I see myself as an advocate of engineers to leadership, so it’s important for me to deeply understand our present reality.</p>
<p><strong><em>Do you spend time advocating for technology, process or architectural change?</em></strong></p>
<p>At this point I spend less time advocating for <em>specific</em> technologies or programs and more time empowering others to advocate for the technologies and programs that they think are important. I also try to be a source of knowledge and support that people can reach out to for feedback, especially on cross-cutting product decisions and on presentation of ideas to the rest of the organization.</p>
<p>I do work on projects where I’m explicitly thinking about idealized architecture and interfaces. However, at the end of the day, migration to any idealized state is going to be done by individual teams, so they <em>need</em> to feel a sense of ownership and empowerment. I spend a lot of time having direct conversations with the engineers and PMs who are actually making day-to-day decisions. The ideal outcome is that we’re able to get directionally aligned, and they’re then able to advocate for our north star within their teams and make good local decisions.</p>
<p>It’s a lot harder to do this for the project I’m working on right now because it involves defining the idealized architecture and interfaces for many, many teams—essentially every team working in payments! I haven’t yet figured out a scalable way to bring everyone along. Even writing documents (the most scalable way of distributing information!) is hard because different teams are (by definition) coming at the interface from a different angle and so very different framings of the problem and solution will resonate with each team. Our current approach is treating reviews of our documents like user testing: watching as individuals on teams read the documents, seeing where their cursor goes, what they’re reacting to, etc. That’s worked pretty well so far!</p>
<p>Designing the <a href="https://stripe.com/docs/payments/payment-intents">Payment Intents API</a>, a rethinking of our beloved Charges API for the changing payments space, was a similarly cross-cutting project that I worked on previously. It took two years for the vision to fully land with everyone in the company. Even with that organizational buy-in, we still haven’t realized the full potential of its original idealized design. This is not a bug, though! We focused on delivering incremental value to users while proving out the design. I expect any sufficiently-ambitious design project to continue even when I am no longer on the team. An important part of making this work was writing <em>everything</em> down.</p>
<p>We created a canonical document that defines our idealized abstractions. Even today, folks working on that team use these abstractions as a north star:</p>
<p><img src="/static/michelle-bu/Michelle-Bu3.png" alt="alt_text" title="image_tooltip"></p>
<p>If two people asked the same question, we immediately added it to a FAQ that we kept. We took everyone’s feedback and questions very seriously and put the burden of proof on ourselves. Finally, we worked to be fully transparent in our work, even creating a decision log that anyone at the company could use to follow our progress. Each entry in the decision log concisely describes a product or technical decision, documents who was involved in the decision, and links to detailed supporting technical design documents that generally contain the full problem statement and evaluation of alternatives.</p>
<p><img src="/static/michelle-bu/Michelle-Bu4.png" alt="alt_text" title="image_tooltip"></p>
<p>In general, I’ve found that for ambitious design projects, being extremely transparent but also explicit about whether or not you’re ready for feedback has landed well with folks who care about the topic. Here’s some wording you can find at the top of the (public) notes docs for some projects I’ve led:</p>
<p><img src="/static/michelle-bu/Michelle-Bu5.png" alt="alt_text" title="image_tooltip"></p>
<p><img src="/static/michelle-bu/Michelle-Bu6.png" alt="alt_text" title="image_tooltip"></p>
<p><strong><em>Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>Yes, and it’s one of my favorite parts of the role! I care a lot about the people I work with—they’re the main reason I feel energized to go to work.</p>
<p>A big part of sponsorship for me is creating the space for ICs to do the impactful work that they care about. I’m lucky that in my current role I don’t have to spend time actively proving that I’m competent, so I can spend a good chunk of time in support roles for projects and elevating others. I rarely feel like I have to “claim credit” for work or have my name explicitly mentioned on a byline for a project I helped with (though it’s always a nice feeling when it happens 😊). For more open-ended projects, it’s sometimes useful for me to lend my name to the project. For example, I recently kicked off a product quality mentorship program where I play more of a facilitator role, selecting mentees, pairing them with mentors, and occasionally reviewing their work. I’m not doing <em>nearly</em> as much as the mentors in the program are, but we were able to get this org-wide program off the ground because I sponsored it.</p>
<p>Day to day, I find that I can be helpful as a “rubber duck” for folks who want advice on how to navigate a complex project or resolve a technical disagreement. I find this work—helping others make progress without getting directly involved—particularly rewarding.</p>
<p>Finally, I always keep in mind a list of folks who are amazing at what they do and advocate for them as <em>visible</em> opportunities that align with their interests become available. There’s a balance here, though. I’ve learned that it’s sometimes difficult for folks to say no to me. Recently, I asked an engineer on a team I work with to send an email about some good work she had done. She told me after she sent the email that she originally didn't want to do it, but she also didn't want to say no to me. She then showed me the relevant entry in her <a href="https://twitter.com/amyngyn/status/1224160724072558594">“no log”:</a></p>
<p><img src="/static/michelle-bu/Michelle-Bu7.png" alt="alt_text" title="image_tooltip"></p>
<p><strong><em>Stripe is the first company you’ve worked full time at, and you’re still at Stripe. What was your path to the Staff level?</em></strong></p>
<p>I joined Stripe right out of college. I actually had a slower growth curve when I joined than the other engineers in my cohort. My trajectory over my first four years was slow compared to other ambitious new college graduates. I think this was partially because I hadn’t been coding for that long (I took my first programming class in 2011 and joined Stripe in 2013), and partially because my first large project at Stripe was a 1.5-year rewrite project that was ultimately canceled.</p>
<p>When Stripe first introduced levels, I had been at the company for two and a half years and was leveled as an L2, a level that we expect a recent college graduate to reach in 6-18 months. I was honestly pretty disappointed, since my peers were already reaching “senior engineer” levels. At that point I’d already done a lot of impactful work, spun up most of the new product engineers who joined, and consistently jumped in to help during incidents. I worked so hard and on so many impactful things, even outside of my main projects! What else would they want me to do? Should I <em>not</em> help others out?</p>
<p>In retrospect, L2 was 100% fair based on the ladder. I worked hard and stayed late because I was naturally a bit slower than others in writing good code due to my lack of experience. I didn’t yet have a good foundation for software development, mostly because I just didn’t have enough practice yet! The impactful work I did was valuable, but also not something that I uniquely could have done. I was, at the time, solidly a high-performing L2.</p>
<p>In those early days, I spent a lot more time learning about the product and about the payments domain than I did writing code. I spent a lot of time helping our users (developers) with their integrations on IRC. I did smaller tasks (bug fixes, small features, bandages to paper cuts) that weren’t technically challenging but were important to those users. This sort of work doesn’t always map to growing as an engineer (though I did fine-tune my debugging skills—I’m a pretty great debugger now 🙃). I also built up relationships with other teams and other engineers by being overly helpful on Slack and on tickets and by helping teams navigate to the best solutions for our users. I helped spin up most of the new product engineers that joined in my first two years. Over time, I started having a reputation for caring deeply about our users and for being a fountain of knowledge about the product. (“Users first” is still my favorite Stripe operating principle.)</p>
<p>Later on I realized that during that time, while I wasn’t efficiently mapping towards growing on the technical side of being a software engineer, I was actually learning critical skills that allowed me to move very quickly from senior to Staff, and from Staff to my current role (together, this only took 3 years!). In fact, I'm pretty sure it's the relationships I built during those first few years that made a canceled 1.5-year technical project not feel like too much of a setback to my career.</p>
<p>I slowly and deliberately built out my technical foundation when I worked on the first versions of <a href="https://stripe.com/radar">Stripe Radar</a> and <a href="https://stripe.com/payments/elements">Stripe Elements</a>. I strongly believe that long as I'm being thoughtful about my technical gaps, about filling in those gaps for the projects I'm working on, and about challenging myself with projects that take me outside of my technical comfort zone, I can build up and practice my technical skills organically. The softer skills, the connections across the company, the user focus, understanding the product deeply—these are the skills that took much longer to learn and ultimately helped me accelerate my path to Staff after I built my technical foundation.</p>
<p><strong><em>Did you have a Staff Project?</em></strong></p>
<p>I’ve worked very broadly on just about every component of Stripe’s product. Over time, the projects that I’ve worked on have generally spun off into their own dedicated teams, and two in particular that I worked on while I was a senior engineer might qualify as Staff projects: <a href="https://stripe.com/radar">Stripe Radar</a> and <a href="https://stripe.com/payments/elements">Stripe Elements</a>.</p>
<p>With Radar, we built a brand new product from scratch, making thoughtful tradeoffs about what to build and what we could safely descope in order to get something out to users as soon as possible. When we launched in October 2016, it was one of the smoothest product launches we’d ever had. It’s since become a very successful product.</p>
<p>With Stripe Elements, I built out the infrastructure, designed the initial Card Elements API from scratch, and shipped to production in under 3 months. This was only possible because we did extensive dogfooding. While building Elements, I created three tiny e-commerce stores with different design frameworks and designs (of varying quality) to test the limits of its customization APIs. Since then, dozens of engineers have successfully developed in the codebase, it’s the home of the new Stripe Checkout, and most importantly, we’ve had very few regrets about its original API design. Breaking API changes are always to be expected as an API product expands and we learn more about how developers use them in practice. We did a good job validating our initial API design to avoid these breaking changes while still shipping rapidly.</p>
<p>In making sure new engineers could onboard onto a pretty complex product that involved a ton of IFRAME-shenanigans, I wrote a lot of documentation. I found that telling a story worked well for teaching folks why things needed to be the way they were:</p>
<p><img src="/static/michelle-bu/Michelle-Bu8.png" alt="alt_text" title="image_tooltip"></p>
<p><img src="/static/michelle-bu/Michelle-Bu9.png" alt="alt_text" title="image_tooltip"></p>
<p>Looking back now, the product architecture has generally held up since launch for both projects. At the time, in addition to implementing these products, I had to wait for a while after they launched for the product choices to prove themselves out with our users and for the technical choices to prove themselves out with engineers internally as they ramped up.</p>
<p>I think that’s an important criteria for Staff-plus Engineers in product: not to just build something that ships, but for it to roll out smoothly and continue to succeed and grow over time with as few regrettable choices as possible. There will always be corners cut and features descoped during product development, especially for new products. A Staff product engineer makes those product and technical choices deliberately, taking on various different user personas to make the best choice possible and documenting rough edges thoroughly for future engineers.</p>
<p> ** <em>Did you have to put together a promotion packet?</em>**</p>
<p>When I was promoted to Staff, I was fortunate to have a manager who was extremely engaged in supporting my promotion. To be honest, at the time I didn’t really understand how to write my self-reviews the right way. I wrote self-reflective development plans for what I wanted to learn over the next year instead of documenting the impact and scope of my work. My manager actually did most of the work by writing out my impact in his review.</p>
<p>There were a couple of other things that helped me. First, I worked with the same manager for much of that time. If you change managers then your manager loses context and that pushes the work of creating continuity onto you. Second, my manager was managing a relatively small team and was able to spend a lot of time keeping track of and understanding the details of what I was working on. If I’d been reporting to a manager supporting say, 10+ engineers, I likely would have had to put a lot more work into my own promotion packet.</p>
<p><strong><em>What two or three factors were most important for you to reach the Staff level?</em></strong></p>
<p>Thinking back, a potentially-surprising important factor for me was (and is) my imposter syndrome. It made me extraordinarily open to feedback; to learning and growing and to taking responsibility for anything remotely related to my work. It made me proactively seek out feedback on everything from the validity of my comments on PRs to how I ran a particular meeting. If something was broken (whether it was technical or organizational), I felt unsettled and was deeply, intrinsically motivated to go learn about it and to fix it. No part of Stripe's product was "not my problem." This developed into two superpowers that are perhaps even more important to have as a Staff-plus Engineer than technical superpowers are:</p>
<ol>
<li>Truly listening to and empathizing with others.</li>
<li>A deep care for solving all types of problems.</li>
</ol>
<p>Of course, imposter syndrome is a double-edged sword. It often makes me scared and self-conscious—early on I constantly felt like I would get fired for not being fast or effective enough. I grew more secure about my own strengths over time, but to be frank, this took a <em>lot</em> of time and positive reinforcement from my managers and from leaders at the company.</p>
<p><strong><em>Is it harder to reach Staff-plus roles when working in product engineering rather than in infrastructure engineering?</em></strong></p>
<p>I do think that is the case. I also think it’s a bit easier at Stripe, where the core product is infrastructure. This means there are many opportunities within product engineering to work on projects that need to consider scale, robustness, migration path, and well-designed interfaces.</p>
<p>It can definitely be tricky to reach Staff if you’re on a team that mostly builds UI, because UI products are by nature more temporary and allow for more iteration and experimentation. To reach the Staff level of impact as an engineer on a UI team, you need to be able to create leverage. You could do this by building well-designed component libraries, experimentation frameworks, etc.</p>
<p>Another aspect of building leverage as a product engineer is creating processes and systems to manage “product debt.” Folks often talk about “technical debt,” but equally important is the “product debt” caused by supporting old versions of your product, and much of the difficulty of product engineering at scale is related to managing product debt and product drift (that is, products that need to interoperate with each other moving in different directions) over time. I believe that a company’s accumulation of product debt does create Staff-complexity roles within product engineering at a certain scale.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p>I haven’t gotten much <em>generically</em> useful advice. There was good situation-specific advice that I got along the way, but those pieces of advice are always tied to the situations at hand.</p>
<p>The most useful general learning for me was becoming comfortable with uncertainty. Sustained success in senior roles depends on your ability to adapt and grow as the needs of the organization change.</p>
<p><strong><em>Advice for someone who wants to become a Staff-plus Engineer?</em></strong></p>
<p>Some caveats:</p>
<ul>
<li>I think I’ve been particularly lucky with the managers I’ve had.</li>
<li>My interests have always been aligned with what was most important for the company. (At this point it's a bit unclear to me if my personal interests (i.e., developer products, mentorship) were aligned, or if over time I'd aligned myself to what was important for the company. I <em>feel</em> like it's the former, but in either case, I feel like I've always been really interested in my work.)</li>
</ul>
<p>I’m probably one of the most visible product engineers at the company, so engineers will sometimes see what I’m doing and try to pattern match on that to become a Staff-plus Engineer. That feels great, and I'm lucky to be able to be a role model for others like me.</p>
<p>That said, my first piece of advice to engineers is that they should avoid pattern matching in ways that lead them towards work they don’t enjoy. I’m deeply energized by the work I do, partnering with teams to solve abstract modeling and design problems. It takes a certain amount of fortitude to try again and again after many rounds of feedback, and to be honest, it’s not for everyone. If you’re more focused on hitting Staff than on setting yourself up to do work that energizes you, it’s easy to end up stuck in a role you don’t want. Being a Staff-plus Engineer, especially a broad-scoped Staff-plus Engineer, is a very different job than being a Senior Engineer.</p>
<p>Instead, pursue work that you find energizing, even if on paper it doesn't seem like it'd get you to a Staff-plus. A big component of being successful as a Staff-plus Engineer is being able to identify and scope net-new impactful work and to convince others of its value and impact. If the work you're doing energizes you, it's actually much easier to achieve this because you'll enjoy thinking deeply about your work a lot more!</p>
<p><strong><em>What about advice for someone who has just started as a Staff-plus Engineer?</em></strong></p>
<p>Your job as a Staff-plus Engineer is specific to your team and organization, and it’s important to avoid taking advice that doesn’t apply to your situation. For example, when I moved into my current role, many of the other Staff-plus Engineers were focused on writing personal charters describing what they want to accomplish over the next 1-2 years. That approach likely works well for deep-scoped engineers, but it hasn’t been as helpful for me as a broad-scoped engineer who needs to respond quickly to organizational changes and shifts to product strategy.</p>
<p><strong><em>Did you ever consider engineering management?</em></strong></p>
<p>I do manage two engineers right now. That said, I don’t do a lot of the things that a traditional manager would do. I’m not involved in recruiting like a hiring manager would be, and I don’t experience the same sort of performance management situations that other managers would because the engineers who are selected for my team are already high performers.</p>
<p>I care a LOT about Stripe: when I see something out of place I feel antsy and want to fix it. In some organizations I think that could have led me towards engineering management rather than my current role, and I'm grateful that management wasn't the only path that was available to me. My strengths and interests lie in product engineering and API design and execution, and I'm able to use these strengths every day in my role.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from?</em></strong></p>
<p>I love reading fiction and I learn a lot about the world from great literature. I don’t like reading non-fiction business or technical books nearly as much. When it comes to learning about topics more directly relevant to my job, I treasure my peer relationships. My peers give me valuable in-the-moment feedback and help me tease out the answers that were in my head all along.</p>
<p>Stripe also has a program called “Leadership In Practice” which is taken by all managers and some senior engineers. That program included a class on <a href="https://www.amazon.com/dp/B004OC071W/">adaptive leadership</a> which was particularly helpful. I’ve since applied the frameworks I learned to many situations.</p>
<p>I’ve never been a person who looks to a single mentor for advice. Instead, I follow what I used to call a “Frankenstein,” build-your-own-mentor approach, similar to what Lara Hogan wrote about in her post on <a href="https://larahogan.me/blog/manager-voltron/">building a manager voltron</a>. Programs that match me up with a single mentor have never quite felt natural to me. I tend to be intentional about the particular topic or area I want to grow in, and will gravitate towards individuals who excel in that area, even if they’re not my “official” mentor.</p>
<p>I spend most of my time on hard, specific questions that don’t have an easy, generic answer. Figuring out the right approach requires a lot of situational context that someone outside the situation won’t have much insight into.</p>
<p>Some non-fiction that I’ve read recently and enjoyed:</p>
<ul>
<li><a href="https://www.amazon.com/dp/B06X18NHC1/">Draft No. 4, John McPhee</a>: I spend most of my time writing at work, and experience writer’s block quite a bit. But it’s super important to power through that, because a good piece of written communication is the most effective means of broadcasting ideas and scaling yourself.</li>
<li><a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration-ebook/dp/B00FUZQYBO/">Creativity Inc., Ed Catmull</a>: The tone of this book definitely made me raise my eyebrows, but there’s a LOT to learn here about how to foster a creative working environment at scale. This is something I think about a lot as we grow our product organization and our product engineering function.</li>
<li><a href="https://www.amazon.com/Impro-Improvisation-Theatre-Keith-Johnstone/dp/0878301178">Impro, Keith Johnstone</a>: I see my superpower (especially as the company grows) as being able to learn and adapt quickly, so I love reading books about different forms of learning and teaching. This book is about learning how to act / improvise, and pushes on conventional metaphors and narratives about education.</li>
</ul>]]></description><link>https://staffeng.com/stories/michelle-bu</link><guid isPermaLink="false">https://staffeng.com/stories/michelle-bu</guid><pubDate>Tue, 21 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;http://blog.michellebu.com/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/hazelcough&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/michellebu/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role at Stripe: what’s your title and generally the sort of work do you and your team do?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m the Payments Products Tech Lead at Stripe, working directly with our Chief Product Officer. I support critical initiatives and work on mitigating urgent problems across the organization. I typically spend 80% of my time on one or two large cross-organizational design projects. I spend the remaining 20% reviewing and supporting technical and product design (in particular, API design) across the organization.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sample of a “top 3” document I keep evergreen:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu0.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;I manage two engineers who embed into high priority areas. This both helps me scale my impact and also gives these engineers the chance to dip into many areas of Stripe. Right now, one is working on the core payments APIs and the other is focused on improving integration experience. I’m still evaluated on the IC ladder—the plan is to never have more than a few reports at a time.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Michelle&apos;s podcast appearances&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://businesslogic.fm/e6-michelle-bu-of-stripe-on-rapidly-scaling-yourself&quot;&gt;Business Logic: Michelle Bu of Stripe on rapidly scaling yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fullstackradio.com/60&quot;&gt;Full Stack Radio: Michelle Bu - Engineering Payments at Stripe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a “normal” Staff-plus Engineer do at your company? Does your role look that way or does it differ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most engineers in Staff-plus roles at Stripe work on specific teams. There are some Staff-plus Engineers who also have a Tech Lead title, and take on broader projects across a particular product area or technical domain.&lt;/p&gt;
&lt;p&gt;There are two kinds of Staff-plus Engineers at Stripe: those whose scope is deep and those whose scope is broad.&lt;/p&gt;
&lt;p&gt;Broad-scoped engineers create impact by working on vague, cross-organizational projects. They tend to accumulate a lot of context across many different domains and play a support role in many projects across the org. This shape of Staff-plus Engineer is most common on our product engineering teams.&lt;/p&gt;
&lt;p&gt;Deep-scoped engineers tend to be subject-matter experts in a specific domain. They lead ambitious multi-year projects. This shape of Staff-plus Engineer can generally be found on our product infrastructure and systems teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This has changed over time for me as I’ve moved into my current Payment Products Tech Lead role. (For some context, Payments Products is made up of over 20 teams. We’re responsible for most of our user-facing APIs and UI libraries.)&lt;/p&gt;
&lt;p&gt;I’ve taken to using the word “energized” over “impactful.” “Impactful” feels company-centric, and while that’s important, “energized” is more inwards-looking. Finding &lt;em&gt;energizing&lt;/em&gt; work is what has kept me at Stripe for so long, pursuing impactful work.&lt;/p&gt;
&lt;p&gt;When I worked directly on a team, I felt most energized when I was able to directly interact with users, whether it was helping users on the #stripe IRC channel or designing and shipping an API that users can integrate seamlessly.&lt;/p&gt;
&lt;p&gt;In my current role, I feel energized when someone I’ve sponsored sends an announcement that they’ve shipped their work, or when I see that I’ve helped shape or shift an engineering team’s model of an important topic. It’s these teams, not me, who are doing the hard work day-to-day of building and supporting their technology. I measure my impact based on their progress and more importantly, the directionality of that progress and the alignment of their work to the company’s goals.&lt;/p&gt;
&lt;p&gt;One concrete example from recent memory is when another staff-plus engineer and I categorized the shapes of APIs we commonly see: labeling some as flows, some as engines, some as configs, etc. The intent of this work was to build up a shared mental model and vocabulary for categorizing existing APIs and for discussing and designing new ones. Folks started to organically use these categories after seeing them once! It’s in these moments that I feel like I’m creating leverage and scaling my own impact by disseminating useful mental models and ideas.&lt;/p&gt;
&lt;p&gt;I spend time on several of our review forums like API Review, but often these sorts of forums work more like code review. They happen so late in the design process that they tend to do a better job of preventing bad outcomes than of partnering with teams to steer great outcomes. I feel more impactful when I’m able to give engineers on product teams the tools to design great APIs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you think of anything you’ve done as a Staff-plus Engineer that you weren’t able to do or wouldn’t have done before reaching that title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve been at Stripe for a long time (since 2013!). While I’ve always had some amount of clout because of my tenure, my role of Payment Products Tech Lead (and the fact that I report directly to the CPO) has definitely changed how people interact with me. I’m definitely feeling lonelier at work now (and am actively working on adapting to this new normal).&lt;/p&gt;
&lt;p&gt;One thing that’s taken some getting used to is that now folks expect me to have an opinion about whatever we’re discussing! That didn’t happen as often when I was a staff-level engineer working directly on a team. I remember being in a meeting shortly after my role change where I was a bit quieter than usual because I was a little tired. I later heard that the presenters were worried that I hadn’t liked their proposal because I didn’t say anything. This was the first time that I realized people &lt;em&gt;looked to me&lt;/em&gt; to have an opinion and to support their ideas! I’ve been careful since then to always stay engaged during meetings and to give feedback, even if it is just to explicitly say that I haven’t fully formed any opinions yet.&lt;/p&gt;
&lt;p&gt;It’s a bit disorienting that some folks take my opinions more seriously and are nicer to me than when I wasn’t in such a visible role. Previously, there were cases where people weren’t collaborative or would dismiss my opinions. I think it was a good thing to have experienced that. I was confident enough (and trusted enough by the organization) to give them strong feedback on their collaboration so that I could ensure things like this weren’t happening to others like me. I now worry that I’m losing visibility into where these interactions are happening.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you maintain empathy for other engineers’ development experiences as you spend less time programming?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve only had one year in my new role, so I don’t feel too disconnected yet. Maybe this is something that will change over time. I was previously tech lead for a smaller area. In that role, I wrote a small amount of software and contributed to some of my teams’ “run rotations,” where we triaged incoming requests and fixed urgent bugs.&lt;/p&gt;
&lt;p&gt;To maintain context in my new role, I spend a good amount of time in one-on-ones with engineers and PMs working directly on execution. This week alone, I had 12 30-minute 1-1s. I also follow every incident that’s reported at Stripe. (We have a Slack group you can join to be automatically invited to Slack rooms for each incident!) The hum of incidents is particularly useful to tune into. By reading through the details of each incident, I’m able to estimate the distance between the reality of our systems and the idealized architecture / product that I spend my days thinking about. I want to know the shapes of issues that engineers are running into, the pits of failure they’re falling into, and how the developer environment was or wasn’t supporting them in getting out of those pits. I see myself as an advocate of engineers to leadership, so it’s important for me to deeply understand our present reality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, process or architectural change?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At this point I spend less time advocating for &lt;em&gt;specific&lt;/em&gt; technologies or programs and more time empowering others to advocate for the technologies and programs that they think are important. I also try to be a source of knowledge and support that people can reach out to for feedback, especially on cross-cutting product decisions and on presentation of ideas to the rest of the organization.&lt;/p&gt;
&lt;p&gt;I do work on projects where I’m explicitly thinking about idealized architecture and interfaces. However, at the end of the day, migration to any idealized state is going to be done by individual teams, so they &lt;em&gt;need&lt;/em&gt; to feel a sense of ownership and empowerment. I spend a lot of time having direct conversations with the engineers and PMs who are actually making day-to-day decisions. The ideal outcome is that we’re able to get directionally aligned, and they’re then able to advocate for our north star within their teams and make good local decisions.&lt;/p&gt;
&lt;p&gt;It’s a lot harder to do this for the project I’m working on right now because it involves defining the idealized architecture and interfaces for many, many teams—essentially every team working in payments! I haven’t yet figured out a scalable way to bring everyone along. Even writing documents (the most scalable way of distributing information!) is hard because different teams are (by definition) coming at the interface from a different angle and so very different framings of the problem and solution will resonate with each team. Our current approach is treating reviews of our documents like user testing: watching as individuals on teams read the documents, seeing where their cursor goes, what they’re reacting to, etc. That’s worked pretty well so far!&lt;/p&gt;
&lt;p&gt;Designing the &lt;a href=&quot;https://stripe.com/docs/payments/payment-intents&quot;&gt;Payment Intents API&lt;/a&gt;, a rethinking of our beloved Charges API for the changing payments space, was a similarly cross-cutting project that I worked on previously. It took two years for the vision to fully land with everyone in the company. Even with that organizational buy-in, we still haven’t realized the full potential of its original idealized design. This is not a bug, though! We focused on delivering incremental value to users while proving out the design. I expect any sufficiently-ambitious design project to continue even when I am no longer on the team. An important part of making this work was writing &lt;em&gt;everything&lt;/em&gt; down.&lt;/p&gt;
&lt;p&gt;We created a canonical document that defines our idealized abstractions. Even today, folks working on that team use these abstractions as a north star:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu3.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;If two people asked the same question, we immediately added it to a FAQ that we kept. We took everyone’s feedback and questions very seriously and put the burden of proof on ourselves. Finally, we worked to be fully transparent in our work, even creating a decision log that anyone at the company could use to follow our progress. Each entry in the decision log concisely describes a product or technical decision, documents who was involved in the decision, and links to detailed supporting technical design documents that generally contain the full problem statement and evaluation of alternatives.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu4.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;In general, I’ve found that for ambitious design projects, being extremely transparent but also explicit about whether or not you’re ready for feedback has landed well with folks who care about the topic. Here’s some wording you can find at the top of the (public) notes docs for some projects I’ve led:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu5.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu6.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes, and it’s one of my favorite parts of the role! I care a lot about the people I work with—they’re the main reason I feel energized to go to work.&lt;/p&gt;
&lt;p&gt;A big part of sponsorship for me is creating the space for ICs to do the impactful work that they care about. I’m lucky that in my current role I don’t have to spend time actively proving that I’m competent, so I can spend a good chunk of time in support roles for projects and elevating others. I rarely feel like I have to “claim credit” for work or have my name explicitly mentioned on a byline for a project I helped with (though it’s always a nice feeling when it happens 😊). For more open-ended projects, it’s sometimes useful for me to lend my name to the project. For example, I recently kicked off a product quality mentorship program where I play more of a facilitator role, selecting mentees, pairing them with mentors, and occasionally reviewing their work. I’m not doing &lt;em&gt;nearly&lt;/em&gt; as much as the mentors in the program are, but we were able to get this org-wide program off the ground because I sponsored it.&lt;/p&gt;
&lt;p&gt;Day to day, I find that I can be helpful as a “rubber duck” for folks who want advice on how to navigate a complex project or resolve a technical disagreement. I find this work—helping others make progress without getting directly involved—particularly rewarding.&lt;/p&gt;
&lt;p&gt;Finally, I always keep in mind a list of folks who are amazing at what they do and advocate for them as &lt;em&gt;visible&lt;/em&gt; opportunities that align with their interests become available. There’s a balance here, though. I’ve learned that it’s sometimes difficult for folks to say no to me. Recently, I asked an engineer on a team I work with to send an email about some good work she had done. She told me after she sent the email that she originally didn&apos;t want to do it, but she also didn&apos;t want to say no to me. She then showed me the relevant entry in her &lt;a href=&quot;https://twitter.com/amyngyn/status/1224160724072558594&quot;&gt;“no log”:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu7.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Stripe is the first company you’ve worked full time at, and you’re still at Stripe. What was your path to the Staff level?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I joined Stripe right out of college. I actually had a slower growth curve when I joined than the other engineers in my cohort. My trajectory over my first four years was slow compared to other ambitious new college graduates. I think this was partially because I hadn’t been coding for that long (I took my first programming class in 2011 and joined Stripe in 2013), and partially because my first large project at Stripe was a 1.5-year rewrite project that was ultimately canceled.&lt;/p&gt;
&lt;p&gt;When Stripe first introduced levels, I had been at the company for two and a half years and was leveled as an L2, a level that we expect a recent college graduate to reach in 6-18 months. I was honestly pretty disappointed, since my peers were already reaching “senior engineer” levels. At that point I’d already done a lot of impactful work, spun up most of the new product engineers who joined, and consistently jumped in to help during incidents. I worked so hard and on so many impactful things, even outside of my main projects! What else would they want me to do? Should I &lt;em&gt;not&lt;/em&gt; help others out?&lt;/p&gt;
&lt;p&gt;In retrospect, L2 was 100% fair based on the ladder. I worked hard and stayed late because I was naturally a bit slower than others in writing good code due to my lack of experience. I didn’t yet have a good foundation for software development, mostly because I just didn’t have enough practice yet! The impactful work I did was valuable, but also not something that I uniquely could have done. I was, at the time, solidly a high-performing L2.&lt;/p&gt;
&lt;p&gt;In those early days, I spent a lot more time learning about the product and about the payments domain than I did writing code. I spent a lot of time helping our users (developers) with their integrations on IRC. I did smaller tasks (bug fixes, small features, bandages to paper cuts) that weren’t technically challenging but were important to those users. This sort of work doesn’t always map to growing as an engineer (though I did fine-tune my debugging skills—I’m a pretty great debugger now 🙃). I also built up relationships with other teams and other engineers by being overly helpful on Slack and on tickets and by helping teams navigate to the best solutions for our users. I helped spin up most of the new product engineers that joined in my first two years. Over time, I started having a reputation for caring deeply about our users and for being a fountain of knowledge about the product. (“Users first” is still my favorite Stripe operating principle.)&lt;/p&gt;
&lt;p&gt;Later on I realized that during that time, while I wasn’t efficiently mapping towards growing on the technical side of being a software engineer, I was actually learning critical skills that allowed me to move very quickly from senior to Staff, and from Staff to my current role (together, this only took 3 years!). In fact, I&apos;m pretty sure it&apos;s the relationships I built during those first few years that made a canceled 1.5-year technical project not feel like too much of a setback to my career.&lt;/p&gt;
&lt;p&gt;I slowly and deliberately built out my technical foundation when I worked on the first versions of &lt;a href=&quot;https://stripe.com/radar&quot;&gt;Stripe Radar&lt;/a&gt; and &lt;a href=&quot;https://stripe.com/payments/elements&quot;&gt;Stripe Elements&lt;/a&gt;. I strongly believe that long as I&apos;m being thoughtful about my technical gaps, about filling in those gaps for the projects I&apos;m working on, and about challenging myself with projects that take me outside of my technical comfort zone, I can build up and practice my technical skills organically. The softer skills, the connections across the company, the user focus, understanding the product deeply—these are the skills that took much longer to learn and ultimately helped me accelerate my path to Staff after I built my technical foundation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you have a Staff Project?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve worked very broadly on just about every component of Stripe’s product. Over time, the projects that I’ve worked on have generally spun off into their own dedicated teams, and two in particular that I worked on while I was a senior engineer might qualify as Staff projects: &lt;a href=&quot;https://stripe.com/radar&quot;&gt;Stripe Radar&lt;/a&gt; and &lt;a href=&quot;https://stripe.com/payments/elements&quot;&gt;Stripe Elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Radar, we built a brand new product from scratch, making thoughtful tradeoffs about what to build and what we could safely descope in order to get something out to users as soon as possible. When we launched in October 2016, it was one of the smoothest product launches we’d ever had. It’s since become a very successful product.&lt;/p&gt;
&lt;p&gt;With Stripe Elements, I built out the infrastructure, designed the initial Card Elements API from scratch, and shipped to production in under 3 months. This was only possible because we did extensive dogfooding. While building Elements, I created three tiny e-commerce stores with different design frameworks and designs (of varying quality) to test the limits of its customization APIs. Since then, dozens of engineers have successfully developed in the codebase, it’s the home of the new Stripe Checkout, and most importantly, we’ve had very few regrets about its original API design. Breaking API changes are always to be expected as an API product expands and we learn more about how developers use them in practice. We did a good job validating our initial API design to avoid these breaking changes while still shipping rapidly.&lt;/p&gt;
&lt;p&gt;In making sure new engineers could onboard onto a pretty complex product that involved a ton of IFRAME-shenanigans, I wrote a lot of documentation. I found that telling a story worked well for teaching folks why things needed to be the way they were:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu8.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/michelle-bu/Michelle-Bu9.png&quot; alt=&quot;alt_text&quot; title=&quot;image_tooltip&quot;&gt;&lt;/p&gt;
&lt;p&gt;Looking back now, the product architecture has generally held up since launch for both projects. At the time, in addition to implementing these products, I had to wait for a while after they launched for the product choices to prove themselves out with our users and for the technical choices to prove themselves out with engineers internally as they ramped up.&lt;/p&gt;
&lt;p&gt;I think that’s an important criteria for Staff-plus Engineers in product: not to just build something that ships, but for it to roll out smoothly and continue to succeed and grow over time with as few regrettable choices as possible. There will always be corners cut and features descoped during product development, especially for new products. A Staff product engineer makes those product and technical choices deliberately, taking on various different user personas to make the best choice possible and documenting rough edges thoroughly for future engineers.&lt;/p&gt;
&lt;p&gt; ** &lt;em&gt;Did you have to put together a promotion packet?&lt;/em&gt;**&lt;/p&gt;
&lt;p&gt;When I was promoted to Staff, I was fortunate to have a manager who was extremely engaged in supporting my promotion. To be honest, at the time I didn’t really understand how to write my self-reviews the right way. I wrote self-reflective development plans for what I wanted to learn over the next year instead of documenting the impact and scope of my work. My manager actually did most of the work by writing out my impact in his review.&lt;/p&gt;
&lt;p&gt;There were a couple of other things that helped me. First, I worked with the same manager for much of that time. If you change managers then your manager loses context and that pushes the work of creating continuity onto you. Second, my manager was managing a relatively small team and was able to spend a lot of time keeping track of and understanding the details of what I was working on. If I’d been reporting to a manager supporting say, 10+ engineers, I likely would have had to put a lot more work into my own promotion packet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important for you to reach the Staff level?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thinking back, a potentially-surprising important factor for me was (and is) my imposter syndrome. It made me extraordinarily open to feedback; to learning and growing and to taking responsibility for anything remotely related to my work. It made me proactively seek out feedback on everything from the validity of my comments on PRs to how I ran a particular meeting. If something was broken (whether it was technical or organizational), I felt unsettled and was deeply, intrinsically motivated to go learn about it and to fix it. No part of Stripe&apos;s product was &quot;not my problem.&quot; This developed into two superpowers that are perhaps even more important to have as a Staff-plus Engineer than technical superpowers are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Truly listening to and empathizing with others.&lt;/li&gt;
&lt;li&gt;A deep care for solving all types of problems.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, imposter syndrome is a double-edged sword. It often makes me scared and self-conscious—early on I constantly felt like I would get fired for not being fast or effective enough. I grew more secure about my own strengths over time, but to be frank, this took a &lt;em&gt;lot&lt;/em&gt; of time and positive reinforcement from my managers and from leaders at the company.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is it harder to reach Staff-plus roles when working in product engineering rather than in infrastructure engineering?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I do think that is the case. I also think it’s a bit easier at Stripe, where the core product is infrastructure. This means there are many opportunities within product engineering to work on projects that need to consider scale, robustness, migration path, and well-designed interfaces.&lt;/p&gt;
&lt;p&gt;It can definitely be tricky to reach Staff if you’re on a team that mostly builds UI, because UI products are by nature more temporary and allow for more iteration and experimentation. To reach the Staff level of impact as an engineer on a UI team, you need to be able to create leverage. You could do this by building well-designed component libraries, experimentation frameworks, etc.&lt;/p&gt;
&lt;p&gt;Another aspect of building leverage as a product engineer is creating processes and systems to manage “product debt.” Folks often talk about “technical debt,” but equally important is the “product debt” caused by supporting old versions of your product, and much of the difficulty of product engineering at scale is related to managing product debt and product drift (that is, products that need to interoperate with each other moving in different directions) over time. I believe that a company’s accumulation of product debt does create Staff-complexity roles within product engineering at a certain scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I haven’t gotten much &lt;em&gt;generically&lt;/em&gt; useful advice. There was good situation-specific advice that I got along the way, but those pieces of advice are always tied to the situations at hand.&lt;/p&gt;
&lt;p&gt;The most useful general learning for me was becoming comfortable with uncertainty. Sustained success in senior roles depends on your ability to adapt and grow as the needs of the organization change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Advice for someone who wants to become a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think I’ve been particularly lucky with the managers I’ve had.&lt;/li&gt;
&lt;li&gt;My interests have always been aligned with what was most important for the company. (At this point it&apos;s a bit unclear to me if my personal interests (i.e., developer products, mentorship) were aligned, or if over time I&apos;d aligned myself to what was important for the company. I &lt;em&gt;feel&lt;/em&gt; like it&apos;s the former, but in either case, I feel like I&apos;ve always been really interested in my work.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m probably one of the most visible product engineers at the company, so engineers will sometimes see what I’m doing and try to pattern match on that to become a Staff-plus Engineer. That feels great, and I&apos;m lucky to be able to be a role model for others like me.&lt;/p&gt;
&lt;p&gt;That said, my first piece of advice to engineers is that they should avoid pattern matching in ways that lead them towards work they don’t enjoy. I’m deeply energized by the work I do, partnering with teams to solve abstract modeling and design problems. It takes a certain amount of fortitude to try again and again after many rounds of feedback, and to be honest, it’s not for everyone. If you’re more focused on hitting Staff than on setting yourself up to do work that energizes you, it’s easy to end up stuck in a role you don’t want. Being a Staff-plus Engineer, especially a broad-scoped Staff-plus Engineer, is a very different job than being a Senior Engineer.&lt;/p&gt;
&lt;p&gt;Instead, pursue work that you find energizing, even if on paper it doesn&apos;t seem like it&apos;d get you to a Staff-plus. A big component of being successful as a Staff-plus Engineer is being able to identify and scope net-new impactful work and to convince others of its value and impact. If the work you&apos;re doing energizes you, it&apos;s actually much easier to achieve this because you&apos;ll enjoy thinking deeply about your work a lot more!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about advice for someone who has just started as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your job as a Staff-plus Engineer is specific to your team and organization, and it’s important to avoid taking advice that doesn’t apply to your situation. For example, when I moved into my current role, many of the other Staff-plus Engineers were focused on writing personal charters describing what they want to accomplish over the next 1-2 years. That approach likely works well for deep-scoped engineers, but it hasn’t been as helpful for me as a broad-scoped engineer who needs to respond quickly to organizational changes and shifts to product strategy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I do manage two engineers right now. That said, I don’t do a lot of the things that a traditional manager would do. I’m not involved in recruiting like a hiring manager would be, and I don’t experience the same sort of performance management situations that other managers would because the engineers who are selected for my team are already high performers.&lt;/p&gt;
&lt;p&gt;I care a LOT about Stripe: when I see something out of place I feel antsy and want to fix it. In some organizations I think that could have led me towards engineering management rather than my current role, and I&apos;m grateful that management wasn&apos;t the only path that was available to me. My strengths and interests lie in product engineering and API design and execution, and I&apos;m able to use these strengths every day in my role.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I love reading fiction and I learn a lot about the world from great literature. I don’t like reading non-fiction business or technical books nearly as much. When it comes to learning about topics more directly relevant to my job, I treasure my peer relationships. My peers give me valuable in-the-moment feedback and help me tease out the answers that were in my head all along.&lt;/p&gt;
&lt;p&gt;Stripe also has a program called “Leadership In Practice” which is taken by all managers and some senior engineers. That program included a class on &lt;a href=&quot;https://www.amazon.com/dp/B004OC071W/&quot;&gt;adaptive leadership&lt;/a&gt; which was particularly helpful. I’ve since applied the frameworks I learned to many situations.&lt;/p&gt;
&lt;p&gt;I’ve never been a person who looks to a single mentor for advice. Instead, I follow what I used to call a “Frankenstein,” build-your-own-mentor approach, similar to what Lara Hogan wrote about in her post on &lt;a href=&quot;https://larahogan.me/blog/manager-voltron/&quot;&gt;building a manager voltron&lt;/a&gt;. Programs that match me up with a single mentor have never quite felt natural to me. I tend to be intentional about the particular topic or area I want to grow in, and will gravitate towards individuals who excel in that area, even if they’re not my “official” mentor.&lt;/p&gt;
&lt;p&gt;I spend most of my time on hard, specific questions that don’t have an easy, generic answer. Figuring out the right approach requires a lot of situational context that someone outside the situation won’t have much insight into.&lt;/p&gt;
&lt;p&gt;Some non-fiction that I’ve read recently and enjoyed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/B06X18NHC1/&quot;&gt;Draft No. 4, John McPhee&lt;/a&gt;: I spend most of my time writing at work, and experience writer’s block quite a bit. But it’s super important to power through that, because a good piece of written communication is the most effective means of broadcasting ideas and scaling yourself.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration-ebook/dp/B00FUZQYBO/&quot;&gt;Creativity Inc., Ed Catmull&lt;/a&gt;: The tone of this book definitely made me raise my eyebrows, but there’s a LOT to learn here about how to foster a creative working environment at scale. This is something I think about a lot as we grow our product organization and our product engineering function.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Impro-Improvisation-Theatre-Keith-Johnstone/dp/0878301178&quot;&gt;Impro, Keith Johnstone&lt;/a&gt;: I see my superpower (especially as the company grows) as being able to learn and adapt quickly, so I love reading books about different forms of learning and teaching. This book is about learning how to act / improvise, and pushes on conventional metaphors and narratives about education.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Rick Boone - Strategic Advisor to Uber's Vice President of Infrastructure]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="https://www.linkedin.com/in/kineticrick/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.</em></strong></p>
<p>I’m the Strategic Advisor to Uber’s Vice President of Infrastructure, which means I’m part of the Infrastructure leadership team along with the engineering directors and org-wideProgram Managers. Infrastructure Engineering at Uber is about 700 people across six sub-organizations like Metal which handles our data centers and servers, Storage, Developer Platform and so on. I work with the VP on things like technical strategy, cultural strategy and special projects.</p>
<p>Strategic Advisor is a wide ranging role, for example I might work on:</p>
<ul>
<li>assessing our technology needs over the next two years</li>
<li>helping prioritize innovation in the roadmap for the next six months</li>
<li>digging into important areas without a clear owner and helping streamline the ongoing related projects</li>
<li>learning how the engineers are feeling before or after a big organizational change</li>
<li>talking to two teams who need to agree on something but are very far apart and seem like they’re having communication issues, figuring out how to help them find an effective path forward</li>
</ul>
<p>It’s just a really, really broad role that’s a mix of engineering, culture, psychology, organizational design and strategy. There are two ways that I describe it, both from pop culture. The first is like being the <a href="https://awoiaf.westeros.org/index.php/Hand_of_the_King">Hand of the King</a> in <em>Game of Thrones</em>, and that’s the best analogue I have for it. The second is <a href="https://westwing.fandom.com/wiki/Leo_McGarry">Leo McGarry</a> from <em>The West Wing</em>, who always said, “I serve at the pleasure of the President.” In my role, I say that I serve at the pleasure of the Vice President of Infrastructure.</p>
<p>Although right now it’s just me, previously there were two of us in the Strategic Advisor to VP Infrastructure role, and we would split the work based on our natural affinity to the projects. She often focused more on projects related to managers and leadership while I focused more on IC’s and engineering projects - though we still managed to do things in both areas</p>
<p>The Strategic Advisor role is a bit unorthodox; it was created by <a href="https://eng.uber.com/core-infra-2018/">Matthew Mengerink</a> a little while after he started in the VP of Infrastructure role.  To my knowledge, our org, and the office of our CTO, are the only orgs which have a role of this type. Matthew created the role because of the value of having full context from within the engineering teams themselves , and he wanted to create that feedback loop to inform his decision making.</p>
<p>It’s a particularly valuable role in Uber’s Infrastructure organization because it’s a really, really broad organization, and I help serve as a synthesized view across all of it.</p>
<div class="pull">
<p><strong>More from and about Rick</strong></p>
<ul>
<li><a href="https://www.youtube.com/watch?v=9ool1BQybaE">"Capacity Prediction" instead of "Capacity Planning"</a></li>
<li><a href="https://www.usenix.org/publications/login/fall2018/boone">Capacity Engineering: An Interview with Rick Boone</a></li>
<li><a href="https://www.youtube.com/watch?v=qJnS-EfIIIE">A History Of SRE at Uber</a></li>
<li><a href="https://eng.uber.com/rick-boone-infrastructure-profile/">Profiles in Coding: Rick Boone</a></li>
</ul>
</div>
<p><strong><em>How does this role compare to a TPM role?</em></strong></p>
<p>This is an interesting question, because I was just thinking about the distinction between Chief of Staff and my own role the other day. Within the Infrastructure Leadership Team, we have the strategic advisor and program managers, and in the past, we’ve also had someone who filled a Chief-of-Staff role.</p>
<p>The way I see it, the program managers are an organization-scoped operational role. They're working at a high-level, ensuring that the major programs and areas within Infra are progressing along and evaluated at a regular cadence, operationalizing efforts + initiatives, etc. The Chief of Staff role was one which ensured that the entire leadership machine was working well together - that all the people, groups, messaging, etc, involved in running and leading Infra were operating effectively.</p>
<p>My strategic advisor role is more about taking broad domain knowledge, both technical and cultural, getting into the details of the problems on a personal and organizational level, and then mixing in engineering acumen. From that I’ll synthesize a set of recommendations or insight which I deliver to either the organizational leader or the entire leadership team. Day-to-day, the vast majority of my work is done directly with the org director and with the PM's - delivering recommendations to the director of the org, and then, with his input and approval, working with the PM's to turn them into a reality.</p>
<p><strong><em>How do you think about the importance of remaining aligned with your sponsor?</em></strong></p>
<p>It’s funny, because that alignment is key - almost a necessity - for the role. Matthew and I are very aligned on our principles, values, world views, emphasis on emotional intelligence, approach to execution, and philosophies. On so many things we’re lined up, such that it’s almost a symbiotic relationship.</p>
<p>Alignment with the sponsor is really critical to be effective, but it’s more than just the dispassionate connection between Strategic Advisor and Vice President. It’s also about the connection between Rick and Matthew as people, and making sure that’s a good fit.</p>
<p>In my role we’ll often go weeks without being in the same room together, but I still have to operate as if I’m his direct proxy. So I go into a room and think, “What would Matthew do here? What is the question he would want to ask? What guidance has he given on this problem?” Because I can’t always run back to him for clarification, it’s essential to develop and maintain a deep understanding of his world view. That’s essential for me to retain the very deep trust required to be his representative and effectively carry out his strategy and vision. People need to be confident that I’ll always give the same answer that Matthew would give if he were there.</p>
<p>It also means that I have to truly understand his goals, intent, values and principles, to make sure that I’m ready to stake my reputation and credibility on pushing them forward. Often, part of my role involves advocating for or translating his vision and/or implementation to engineers, sometimes when supplemental context isn’t always known. When I do this, I have to make sure that I not only understand the logic and value of what he’s doing, but that I also believe in it myself - otherwise, advocacy becomes hard, not to mention disingenuous.</p>
<p>This is something I really struggled with a lot when I started in the role. Matthew would constantly tell me, “You’re my representative; you should feel free to push on and perform things using my name and role .” That was difficult for me because I’ve never been in a role like that before. Previously I’ve always operated using my own name and reputation, and now I was to operating  under the aegis of the Vice President and everything which that carried . Over time I’ve learned how to be deliberate with using that hammer, since you don’t want to overuse it.</p>
<p>I’ve also learned that I have to let folks know which hat I’m wearing sometimes. I love to mentor people, but sometimes folks aren’t sure if they’re getting the strategic advisor working for the benefit of the organization and companyor the mentor, working for the benefit of that person and their career; I try to let them know which role I’m currently in within a particular conversation. If I meet with someone I’m mentoring, they might want to get advice about changing teams, or even leaving the organization or the company, and they want to know which perspective I’m giving advice from.</p>
<p><strong><em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?</em></strong></p>
<p>I think the biggest difference is that other senior-plus engineers work primarily on technical work. They are leaders, so they do get into the realm of emotional intelligence, communication, collaboration, conflict resolution, evangelism and so on, but still 80% of their daily efforts are driven by technical concerns.</p>
<p>Whereas with me, there might be weeks where I’m focused on a project around group psychology or organizational design. Technical concerns are not always the pure focus that drive my day to day - though they are always there, if even just in the background.</p>
<p><strong><em>How do you stay aware of reality on the ground now that you’re developing less?</em></strong></p>
<p>When I was an engineer I could do this passively, because you’re in the code, trying to push commits, dealing with the friction of provisioning and operating services, etc. That approach doesn’t work anymore, since I’m not touching code very much;  so now, gaining that data and awareness  requires an active process.</p>
<p>One thing I’ve done is continue to sit next to my old team so I can hear them work. Maybe they’ll complain about a service’s stability, or a gap in our tooling, and it’s helpful to keep hearing that.</p>
<p>I also constantly ask folks questions about their developer experience. I keep a list of people in my head of folks who are good at surfacing problems and giving feedback on approaches, and I reach out to them frequently. Sometimes these reach outs are more structured, literally a survey for input, and other times it’ll just be a quick message checking in.</p>
<p>I also tell folks to send me non-critical path work that doesn’t have a strict timeline, and I try to use that as an opportunity to stay fresh in writing actual code. I have to be careful not to get in the critical path of our actual product though, because I know I won’t have much bandwidth to maintain the code going forward.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>One of the things that’s special about this specific role is that it’s essentially a built-in mentorship with the Vice President. When I got started, he asked me, “What do you want to do in five years? What are you aiming for?” At the time, I really didn’t have clear answers to those questions. For a long time my perspective has been that being able to write code, in our current time, puts you in one of the best positions in the history of humanity, in terms of job security and trajectory, and that seemed like enough for me.</p>
<p>As I spent time thinking about my goals, what I really came away with was that I love being a visible reference for other engineers, especially other minority engineers, and helping people here at Uber or earlier in their career. I especially enjoy helping people who are just getting into the industry, and might still be a little intimidated by it. That’s a huge part of what drives me, and this role has helped me realize and admit that to myself. Before I didn’t accept that as a valid purpose, but I realized that if it’s what you love, if it’s what you’re passionate about, then you have to go for it.</p>
<p>Another reason mentorship is important to me because throughout my life and career, I’ve had six people that I consider key mentors. Each of them, at various times, have provided massive impact and influence upon my life - I would not be anything close to who I am without their past and continued guidance. And I’m both extremely grateful for them and also constantly aware of how much they’ve guided me. So, I always recognize the power of a mentor and want to make sure I can provide that for others. And sometimes, mentors don’t even know how their words or actions change you, the ripple effect they can have, even years later. So, I always try to make myself available for others as a mentor, because you never know when you can have that type of life-changing impact on someone, or how. It might just be the right word, the right perspective, the right push from you, at just the right time for them.</p>
<p>I’ll always tell people, “Seriously, if you need me, just come ask for help.” This is one of the most exciting parts of what I do, and there are a few different ways I try to make myself available.</p>
<p>One is that I give an Engucation (what happens when you blend engineering and education into a single word) class every month to most new hires in engineering. That class is called “Lessons + Questions” and it’s literally just a place where they can ask me anything they want about Uber - technical, cultural, whatever - and I’m as candid as possible.  At the end of that, I let people know my email and that they’re welcome to reach out. A good number reach out to me after that and I give them advice on their careers, working at Uber, or whatever. Other times I’ll have people who just run into me while I’m around the office and ask for advice.</p>
<p>I want to be visible as a Black engineer, showing others that we <em>are</em> here and this <em>is</em> doable. Once I realized this was an important motivation for me, I knew that I had to get better at public speaking, because that’s such an important way to scale myself as a role model. Public speaking used to terrify me. I used to <em>hate</em> public speaking. But because it’s such a key way to reach large numbers of people, I told myself I had to learn to like it, and since then I’ve learned to be an effective public speaker and have actually fallen in love with it. It’s now one of the most exciting things I do - it’s like a roller coaster; everytime I do it, I get nervous, but it’s a thrilling, fun type of nervousness and I get a huge rush while I’m doing it.</p>
<p><strong><em>Do you think about building your external brand?</em></strong></p>
<p>I have a couple of friends that spend time building their external brand, one of whom is getting back into it right now. He realized that his work at Uber was so intensive that he’d pushed external work to the wayside.</p>
<p>I’m a bit more passive about it. When I’m involved with something that gets written up publicly or I give a public talk, then I’ll post a link on LinkedIn, but I don’t write my own content at all. I think about doing it, and I’m interested in doing it, but I don’t. I tend to think through speaking, so writing this way requires a lot of preparation to organize my thoughts, and I’ve not spent much time doing it externally so far.</p>
<p><strong><em>You first got the title strategic advisor at your current company. Were you hired as a strategic advisor? If not, what was the process of getting promoted to that role?</em></strong></p>
<p>My path was completely unorthodox. It wasn’t planned, and there really isn’t a reproducible pathway to it, more of a fortunate series of events. Previously <a href="https://www.linkedin.com/in/rob-punkunus-3791273/">Rob Punkunus</a> was in the same role, and when he decided to leave he was asked by Matthew to suggest potential successors. He suggested me and Kate, and both of us ended up serving in the Strategic Advisor role.</p>
<p>Matthew and I had already had several positive interactions before that, where we’d started to identify that we had similar views and values. For example, at one point we had a rash of nasty comments submitted anonymously to our Questions &#x26; Answers meeting, and it really bothered me to see our culture heading that direction. I stood up and spoke at one of the Q&#x26;As asking folks to find a more constructive way to surface their concerns, and I think that resonated with Matthew.</p>
<p>When he first suggested that I take the role, I had a ton of imposter syndrome about it. I tried to get him to rescind the offer, thinking it wouldn’t be a good fit, but ultimately I did accept and have been in the role since.</p>
<p><strong><em>What two or three factors were most important in you becoming an strategic advisor? How have the companies you joined, your location, or your education impacted your path?</em></strong></p>
<p>In addition to Rob’s recommendation, the most important factor was doing visible work that aligned with Matthew’s values. One project I worked on was joining the working group to  understand and improve SRE’s culture back in 2017. The working group was already planned before <a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber">Susan Fowler’s blog post</a> went out, and our first meeting was coincidentally three days after she posted it. I really think the culture working group did some great work, work which myself and the other group members are extremely proud of and over eighteen months we really moved the culture of a hundred person organization in a meaningful way.</p>
<p>Additionally, I’ve always just been personally fascinated with things in the realm of both culture and human psychology + behavior. In my career, at the companies I’ve worked at, culture + group psychology has often been the hidden x-factor that turns organizations from good to great. I’d already been satisfying my own personal curiosity in the area with books and papers on things like behavioral economics, behavioral science, etc, so that natural interest has helped nudge me towards where I’m at now.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p>Throughout my career people have always told me that I’m much more impactful and have more potential than I realized. I never listened to that, and for me, as well as many other engineers, especially engineers that are minorities, we spend a lot of time doubting ourselves. It’s so easy to only see the bad parts. We might not recognize when we’re in a meeting and speak passionately about something, and that people are really listening to us. It really helped to have people keep telling me that I didn’t realize the impact I was having, that my viewpoints were not only valid, but actually influential in the organization.</p>
<p>Another thing that’s helped is having mentors. Specifically I like mentors who are constructively antagonistic. What I mean by that is that they throw me into things that utterly terrify me but they’re certain I’m ready for. They’ve helped push me way beyond what I thought was possible for me. These have generally been managers who I’ve worked with, but where we’ve been able to mutually learn from each other.</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p>This goes back to how I got where I am based on having a broad set of interests in organizational psychology, culture, mentorship and so on, in addition to the technology. I’ve never been a pure engineer that’s just deep in the code 24/7. I’ve never been that person, and I had to make my peace with that.</p>
<p>For me it’s been important to follow my passions. Recently that’s been around mentorship, but it’s also been around other things like machine learning, which has always been a hobby of mine. I love how machines can generate insights that mimichow people think - it’s the perfect marriage of my interests in technology + psychology.</p>
<p>So I have these passions that I stoke, and then when opportunities to align those passions with something the company needs arise, I take them. For example, my previous team at Uber was generating insights into fleet utilization for capacity planning purposes, and that a great chance to <a href="https://www.youtube.com/watch?v=9ool1BQybaE">pull together my interest in machine learning and site reliability</a>.</p>
<p>Small companies give you the chance to do many different things, but at a certain size companies also give you the unique opportunity to specialize in your passions, and that for me has allowed me to maintain both impact and passion despite never being the person to sit beyond the keyboard and knock out code all day.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>It’s something that I think about sometimes, even now it’s something I’m thinking about. It’s on my list of possibilities, and throughout my career folks have asked, “Have you considered moving into management?”</p>
<p>What I want to focus on right now is becoming effective as a high-level, big-picture leader. Eventually I’d like to develop the people management skillset too, maybe somewhere in the medium future. The thing that appeals to me is that human behavior excites me to no end, and people management is a great opportunity to spend time on that.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p>You know, for the first two-thirds of my career I used to love reading as much technical content as I could. I would be on YCombinator or my RSS feed all day reading about distributed systems, reliability, etc. These days I’m much more into reading about behavioral economics, behavioral science, human psychology, organizational strategy and so on. Some people I really enjoy in those realms are <a href="https://en.wikipedia.org/wiki/Daniel_Kahneman">Daniel Kahneman</a>, <a href="https://en.wikipedia.org/wiki/Tim_Harford">Tim Harford</a>, <a href="https://en.wikipedia.org/wiki/Dan_Ariely">Dan Ariely.</a>  There are also some amazing podcasts out there - <a href="https://freakonomics.com/archive/">Freakonomics</a>, <a href="https://www.schwab.com/resource-center/insights/podcast">Choice-ology</a>, <a href="https://www.npr.org/podcasts/510308/hidden-brain">Hidden Brain</a>.</p>
<p>Also, last year I started compiling a <a href="https://docs.google.com/document/d/1WIqIYuSGfyoU_ZO-xZMDXfaaUmnG2tmnkHiGZQ7pvqg/edit?usp=sharing">reading list of books about the human brain and behavior</a> which I share with anyone who’s also interested in the topic(s).</p>
<p>I do still keep up with <a href="https://www.reddit.com/r/linux/">r/linux</a> and <a href="https://www.reddit.com/r/programming/">r/programing</a> on Reddit, which have replaced RSS feeds for me in discovering new things to read.</p>]]></description><link>https://staffeng.com/stories/rick-boone</link><guid isPermaLink="false">https://staffeng.com/stories/rick-boone</guid><pubDate>Thu, 16 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;https://www.linkedin.com/in/kineticrick/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m the Strategic Advisor to Uber’s Vice President of Infrastructure, which means I’m part of the Infrastructure leadership team along with the engineering directors and org-wideProgram Managers. Infrastructure Engineering at Uber is about 700 people across six sub-organizations like Metal which handles our data centers and servers, Storage, Developer Platform and so on. I work with the VP on things like technical strategy, cultural strategy and special projects.&lt;/p&gt;
&lt;p&gt;Strategic Advisor is a wide ranging role, for example I might work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assessing our technology needs over the next two years&lt;/li&gt;
&lt;li&gt;helping prioritize innovation in the roadmap for the next six months&lt;/li&gt;
&lt;li&gt;digging into important areas without a clear owner and helping streamline the ongoing related projects&lt;/li&gt;
&lt;li&gt;learning how the engineers are feeling before or after a big organizational change&lt;/li&gt;
&lt;li&gt;talking to two teams who need to agree on something but are very far apart and seem like they’re having communication issues, figuring out how to help them find an effective path forward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s just a really, really broad role that’s a mix of engineering, culture, psychology, organizational design and strategy. There are two ways that I describe it, both from pop culture. The first is like being the &lt;a href=&quot;https://awoiaf.westeros.org/index.php/Hand_of_the_King&quot;&gt;Hand of the King&lt;/a&gt; in &lt;em&gt;Game of Thrones&lt;/em&gt;, and that’s the best analogue I have for it. The second is &lt;a href=&quot;https://westwing.fandom.com/wiki/Leo_McGarry&quot;&gt;Leo McGarry&lt;/a&gt; from &lt;em&gt;The West Wing&lt;/em&gt;, who always said, “I serve at the pleasure of the President.” In my role, I say that I serve at the pleasure of the Vice President of Infrastructure.&lt;/p&gt;
&lt;p&gt;Although right now it’s just me, previously there were two of us in the Strategic Advisor to VP Infrastructure role, and we would split the work based on our natural affinity to the projects. She often focused more on projects related to managers and leadership while I focused more on IC’s and engineering projects - though we still managed to do things in both areas&lt;/p&gt;
&lt;p&gt;The Strategic Advisor role is a bit unorthodox; it was created by &lt;a href=&quot;https://eng.uber.com/core-infra-2018/&quot;&gt;Matthew Mengerink&lt;/a&gt; a little while after he started in the VP of Infrastructure role.  To my knowledge, our org, and the office of our CTO, are the only orgs which have a role of this type. Matthew created the role because of the value of having full context from within the engineering teams themselves , and he wanted to create that feedback loop to inform his decision making.&lt;/p&gt;
&lt;p&gt;It’s a particularly valuable role in Uber’s Infrastructure organization because it’s a really, really broad organization, and I help serve as a synthesized view across all of it.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;More from and about Rick&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9ool1BQybaE&quot;&gt;&quot;Capacity Prediction&quot; instead of &quot;Capacity Planning&quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.usenix.org/publications/login/fall2018/boone&quot;&gt;Capacity Engineering: An Interview with Rick Boone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qJnS-EfIIIE&quot;&gt;A History Of SRE at Uber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eng.uber.com/rick-boone-infrastructure-profile/&quot;&gt;Profiles in Coding: Rick Boone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How does this role compare to a TPM role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an interesting question, because I was just thinking about the distinction between Chief of Staff and my own role the other day. Within the Infrastructure Leadership Team, we have the strategic advisor and program managers, and in the past, we’ve also had someone who filled a Chief-of-Staff role.&lt;/p&gt;
&lt;p&gt;The way I see it, the program managers are an organization-scoped operational role. They&apos;re working at a high-level, ensuring that the major programs and areas within Infra are progressing along and evaluated at a regular cadence, operationalizing efforts + initiatives, etc. The Chief of Staff role was one which ensured that the entire leadership machine was working well together - that all the people, groups, messaging, etc, involved in running and leading Infra were operating effectively.&lt;/p&gt;
&lt;p&gt;My strategic advisor role is more about taking broad domain knowledge, both technical and cultural, getting into the details of the problems on a personal and organizational level, and then mixing in engineering acumen. From that I’ll synthesize a set of recommendations or insight which I deliver to either the organizational leader or the entire leadership team. Day-to-day, the vast majority of my work is done directly with the org director and with the PM&apos;s - delivering recommendations to the director of the org, and then, with his input and approval, working with the PM&apos;s to turn them into a reality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you think about the importance of remaining aligned with your sponsor?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s funny, because that alignment is key - almost a necessity - for the role. Matthew and I are very aligned on our principles, values, world views, emphasis on emotional intelligence, approach to execution, and philosophies. On so many things we’re lined up, such that it’s almost a symbiotic relationship.&lt;/p&gt;
&lt;p&gt;Alignment with the sponsor is really critical to be effective, but it’s more than just the dispassionate connection between Strategic Advisor and Vice President. It’s also about the connection between Rick and Matthew as people, and making sure that’s a good fit.&lt;/p&gt;
&lt;p&gt;In my role we’ll often go weeks without being in the same room together, but I still have to operate as if I’m his direct proxy. So I go into a room and think, “What would Matthew do here? What is the question he would want to ask? What guidance has he given on this problem?” Because I can’t always run back to him for clarification, it’s essential to develop and maintain a deep understanding of his world view. That’s essential for me to retain the very deep trust required to be his representative and effectively carry out his strategy and vision. People need to be confident that I’ll always give the same answer that Matthew would give if he were there.&lt;/p&gt;
&lt;p&gt;It also means that I have to truly understand his goals, intent, values and principles, to make sure that I’m ready to stake my reputation and credibility on pushing them forward. Often, part of my role involves advocating for or translating his vision and/or implementation to engineers, sometimes when supplemental context isn’t always known. When I do this, I have to make sure that I not only understand the logic and value of what he’s doing, but that I also believe in it myself - otherwise, advocacy becomes hard, not to mention disingenuous.&lt;/p&gt;
&lt;p&gt;This is something I really struggled with a lot when I started in the role. Matthew would constantly tell me, “You’re my representative; you should feel free to push on and perform things using my name and role .” That was difficult for me because I’ve never been in a role like that before. Previously I’ve always operated using my own name and reputation, and now I was to operating  under the aegis of the Vice President and everything which that carried . Over time I’ve learned how to be deliberate with using that hammer, since you don’t want to overuse it.&lt;/p&gt;
&lt;p&gt;I’ve also learned that I have to let folks know which hat I’m wearing sometimes. I love to mentor people, but sometimes folks aren’t sure if they’re getting the strategic advisor working for the benefit of the organization and companyor the mentor, working for the benefit of that person and their career; I try to let them know which role I’m currently in within a particular conversation. If I meet with someone I’m mentoring, they might want to get advice about changing teams, or even leaving the organization or the company, and they want to know which perspective I’m giving advice from.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think the biggest difference is that other senior-plus engineers work primarily on technical work. They are leaders, so they do get into the realm of emotional intelligence, communication, collaboration, conflict resolution, evangelism and so on, but still 80% of their daily efforts are driven by technical concerns.&lt;/p&gt;
&lt;p&gt;Whereas with me, there might be weeks where I’m focused on a project around group psychology or organizational design. Technical concerns are not always the pure focus that drive my day to day - though they are always there, if even just in the background.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you stay aware of reality on the ground now that you’re developing less?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I was an engineer I could do this passively, because you’re in the code, trying to push commits, dealing with the friction of provisioning and operating services, etc. That approach doesn’t work anymore, since I’m not touching code very much;  so now, gaining that data and awareness  requires an active process.&lt;/p&gt;
&lt;p&gt;One thing I’ve done is continue to sit next to my old team so I can hear them work. Maybe they’ll complain about a service’s stability, or a gap in our tooling, and it’s helpful to keep hearing that.&lt;/p&gt;
&lt;p&gt;I also constantly ask folks questions about their developer experience. I keep a list of people in my head of folks who are good at surfacing problems and giving feedback on approaches, and I reach out to them frequently. Sometimes these reach outs are more structured, literally a survey for input, and other times it’ll just be a quick message checking in.&lt;/p&gt;
&lt;p&gt;I also tell folks to send me non-critical path work that doesn’t have a strict timeline, and I try to use that as an opportunity to stay fresh in writing actual code. I have to be careful not to get in the critical path of our actual product though, because I know I won’t have much bandwidth to maintain the code going forward.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the things that’s special about this specific role is that it’s essentially a built-in mentorship with the Vice President. When I got started, he asked me, “What do you want to do in five years? What are you aiming for?” At the time, I really didn’t have clear answers to those questions. For a long time my perspective has been that being able to write code, in our current time, puts you in one of the best positions in the history of humanity, in terms of job security and trajectory, and that seemed like enough for me.&lt;/p&gt;
&lt;p&gt;As I spent time thinking about my goals, what I really came away with was that I love being a visible reference for other engineers, especially other minority engineers, and helping people here at Uber or earlier in their career. I especially enjoy helping people who are just getting into the industry, and might still be a little intimidated by it. That’s a huge part of what drives me, and this role has helped me realize and admit that to myself. Before I didn’t accept that as a valid purpose, but I realized that if it’s what you love, if it’s what you’re passionate about, then you have to go for it.&lt;/p&gt;
&lt;p&gt;Another reason mentorship is important to me because throughout my life and career, I’ve had six people that I consider key mentors. Each of them, at various times, have provided massive impact and influence upon my life - I would not be anything close to who I am without their past and continued guidance. And I’m both extremely grateful for them and also constantly aware of how much they’ve guided me. So, I always recognize the power of a mentor and want to make sure I can provide that for others. And sometimes, mentors don’t even know how their words or actions change you, the ripple effect they can have, even years later. So, I always try to make myself available for others as a mentor, because you never know when you can have that type of life-changing impact on someone, or how. It might just be the right word, the right perspective, the right push from you, at just the right time for them.&lt;/p&gt;
&lt;p&gt;I’ll always tell people, “Seriously, if you need me, just come ask for help.” This is one of the most exciting parts of what I do, and there are a few different ways I try to make myself available.&lt;/p&gt;
&lt;p&gt;One is that I give an Engucation (what happens when you blend engineering and education into a single word) class every month to most new hires in engineering. That class is called “Lessons + Questions” and it’s literally just a place where they can ask me anything they want about Uber - technical, cultural, whatever - and I’m as candid as possible.  At the end of that, I let people know my email and that they’re welcome to reach out. A good number reach out to me after that and I give them advice on their careers, working at Uber, or whatever. Other times I’ll have people who just run into me while I’m around the office and ask for advice.&lt;/p&gt;
&lt;p&gt;I want to be visible as a Black engineer, showing others that we &lt;em&gt;are&lt;/em&gt; here and this &lt;em&gt;is&lt;/em&gt; doable. Once I realized this was an important motivation for me, I knew that I had to get better at public speaking, because that’s such an important way to scale myself as a role model. Public speaking used to terrify me. I used to &lt;em&gt;hate&lt;/em&gt; public speaking. But because it’s such a key way to reach large numbers of people, I told myself I had to learn to like it, and since then I’ve learned to be an effective public speaker and have actually fallen in love with it. It’s now one of the most exciting things I do - it’s like a roller coaster; everytime I do it, I get nervous, but it’s a thrilling, fun type of nervousness and I get a huge rush while I’m doing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you think about building your external brand?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have a couple of friends that spend time building their external brand, one of whom is getting back into it right now. He realized that his work at Uber was so intensive that he’d pushed external work to the wayside.&lt;/p&gt;
&lt;p&gt;I’m a bit more passive about it. When I’m involved with something that gets written up publicly or I give a public talk, then I’ll post a link on LinkedIn, but I don’t write my own content at all. I think about doing it, and I’m interested in doing it, but I don’t. I tend to think through speaking, so writing this way requires a lot of preparation to organize my thoughts, and I’ve not spent much time doing it externally so far.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title strategic advisor at your current company. Were you hired as a strategic advisor? If not, what was the process of getting promoted to that role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My path was completely unorthodox. It wasn’t planned, and there really isn’t a reproducible pathway to it, more of a fortunate series of events. Previously &lt;a href=&quot;https://www.linkedin.com/in/rob-punkunus-3791273/&quot;&gt;Rob Punkunus&lt;/a&gt; was in the same role, and when he decided to leave he was asked by Matthew to suggest potential successors. He suggested me and Kate, and both of us ended up serving in the Strategic Advisor role.&lt;/p&gt;
&lt;p&gt;Matthew and I had already had several positive interactions before that, where we’d started to identify that we had similar views and values. For example, at one point we had a rash of nasty comments submitted anonymously to our Questions &amp;#x26; Answers meeting, and it really bothered me to see our culture heading that direction. I stood up and spoke at one of the Q&amp;#x26;As asking folks to find a more constructive way to surface their concerns, and I think that resonated with Matthew.&lt;/p&gt;
&lt;p&gt;When he first suggested that I take the role, I had a ton of imposter syndrome about it. I tried to get him to rescind the offer, thinking it wouldn’t be a good fit, but ultimately I did accept and have been in the role since.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you becoming an strategic advisor? How have the companies you joined, your location, or your education impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to Rob’s recommendation, the most important factor was doing visible work that aligned with Matthew’s values. One project I worked on was joining the working group to  understand and improve SRE’s culture back in 2017. The working group was already planned before &lt;a href=&quot;https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber&quot;&gt;Susan Fowler’s blog post&lt;/a&gt; went out, and our first meeting was coincidentally three days after she posted it. I really think the culture working group did some great work, work which myself and the other group members are extremely proud of and over eighteen months we really moved the culture of a hundred person organization in a meaningful way.&lt;/p&gt;
&lt;p&gt;Additionally, I’ve always just been personally fascinated with things in the realm of both culture and human psychology + behavior. In my career, at the companies I’ve worked at, culture + group psychology has often been the hidden x-factor that turns organizations from good to great. I’d already been satisfying my own personal curiosity in the area with books and papers on things like behavioral economics, behavioral science, etc, so that natural interest has helped nudge me towards where I’m at now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Throughout my career people have always told me that I’m much more impactful and have more potential than I realized. I never listened to that, and for me, as well as many other engineers, especially engineers that are minorities, we spend a lot of time doubting ourselves. It’s so easy to only see the bad parts. We might not recognize when we’re in a meeting and speak passionately about something, and that people are really listening to us. It really helped to have people keep telling me that I didn’t realize the impact I was having, that my viewpoints were not only valid, but actually influential in the organization.&lt;/p&gt;
&lt;p&gt;Another thing that’s helped is having mentors. Specifically I like mentors who are constructively antagonistic. What I mean by that is that they throw me into things that utterly terrify me but they’re certain I’m ready for. They’ve helped push me way beyond what I thought was possible for me. These have generally been managers who I’ve worked with, but where we’ve been able to mutually learn from each other.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This goes back to how I got where I am based on having a broad set of interests in organizational psychology, culture, mentorship and so on, in addition to the technology. I’ve never been a pure engineer that’s just deep in the code 24/7. I’ve never been that person, and I had to make my peace with that.&lt;/p&gt;
&lt;p&gt;For me it’s been important to follow my passions. Recently that’s been around mentorship, but it’s also been around other things like machine learning, which has always been a hobby of mine. I love how machines can generate insights that mimichow people think - it’s the perfect marriage of my interests in technology + psychology.&lt;/p&gt;
&lt;p&gt;So I have these passions that I stoke, and then when opportunities to align those passions with something the company needs arise, I take them. For example, my previous team at Uber was generating insights into fleet utilization for capacity planning purposes, and that a great chance to &lt;a href=&quot;https://www.youtube.com/watch?v=9ool1BQybaE&quot;&gt;pull together my interest in machine learning and site reliability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Small companies give you the chance to do many different things, but at a certain size companies also give you the unique opportunity to specialize in your passions, and that for me has allowed me to maintain both impact and passion despite never being the person to sit beyond the keyboard and knock out code all day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s something that I think about sometimes, even now it’s something I’m thinking about. It’s on my list of possibilities, and throughout my career folks have asked, “Have you considered moving into management?”&lt;/p&gt;
&lt;p&gt;What I want to focus on right now is becoming effective as a high-level, big-picture leader. Eventually I’d like to develop the people management skillset too, maybe somewhere in the medium future. The thing that appeals to me is that human behavior excites me to no end, and people management is a great opportunity to spend time on that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You know, for the first two-thirds of my career I used to love reading as much technical content as I could. I would be on YCombinator or my RSS feed all day reading about distributed systems, reliability, etc. These days I’m much more into reading about behavioral economics, behavioral science, human psychology, organizational strategy and so on. Some people I really enjoy in those realms are &lt;a href=&quot;https://en.wikipedia.org/wiki/Daniel_Kahneman&quot;&gt;Daniel Kahneman&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tim_Harford&quot;&gt;Tim Harford&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Dan_Ariely&quot;&gt;Dan Ariely.&lt;/a&gt;  There are also some amazing podcasts out there - &lt;a href=&quot;https://freakonomics.com/archive/&quot;&gt;Freakonomics&lt;/a&gt;, &lt;a href=&quot;https://www.schwab.com/resource-center/insights/podcast&quot;&gt;Choice-ology&lt;/a&gt;, &lt;a href=&quot;https://www.npr.org/podcasts/510308/hidden-brain&quot;&gt;Hidden Brain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, last year I started compiling a &lt;a href=&quot;https://docs.google.com/document/d/1WIqIYuSGfyoU_ZO-xZMDXfaaUmnG2tmnkHiGZQ7pvqg/edit?usp=sharing&quot;&gt;reading list of books about the human brain and behavior&lt;/a&gt; which I share with anyone who’s also interested in the topic(s).&lt;/p&gt;
&lt;p&gt;I do still keep up with &lt;a href=&quot;https://www.reddit.com/r/linux/&quot;&gt;r/linux&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/&quot;&gt;r/programing&lt;/a&gt; on Reddit, which have replaced RSS feeds for me in discovering new things to read.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Diana Pojar - Staff Data Engineer at Slack]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="https://diana.dev/">blog</a>,
<a href="https://twitter.com/podiana">twitter</a>,
<a href="https://www.linkedin.com/in/dianapojar/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p> I’m a Staff Data Engineer and the Technical Lead for the Data Platform team at Slack. I joined Slack in February 2016 and I was one of the first engineers in the Data Engineering team. I was heavily involved in building many of the tools and infrastructure to make data available for long-term analytics. When I joined, the team had just made the decision to use Thrift as the logging format. If anyone wanted to get insights, they had to schedule cronjobs on top of the read replicas of the production MySQL database.</p>
<p> The purpose of the Data Engineering team at Slack is to enable anyone in the company (data science, engineers, product managers, etc) to access data, so they can compute insights, drive business decisions or build new features. The Data Platform team focuses on building services and frameworks that work at scale to empower everyone that needs to process or use data in the Data Warehouse. Some things that our teams own are: the Data Discovery service that exposes task, table, column lineage and general metadata, the event logging structure and the pipeline that consumes the events and exposes them in raw tables in the Data Warehouse.</p>
<div class="pull">
<p><strong>More from Diana</strong></p>
<ul>
<li><a href="https://slack.engineering/data-wrangling-at-slack-f2e0ff633b69#.w4kzhdpx8">Data Wrangling at Slack</a></li>
<li><a href="https://speakerdeck.com/ronnieftw/scaling-data-at-slack-a-series-of-unfortunate-events">Scaling Data at Slack: A Series of Unfortunate Events</a></li>
</ul>
</div>
<p><strong><em>What does a Staff-plus engineer do at Slack? How do you spend your time day-to-day?</em></strong></p>
<p> The role of a Staff-plus engineer depends a lot on what the team needs and also what the particular engineer strengths are. From my experience the responsibilities of a Staff-plus engineer can change over time, but usually their main focus is working on projects/efforts that have strategic value for the company, while driving technical design and up-leveling their team.</p>
<p> There are two big categories that I’ve seen Staff-plus engineers fall into: focus more on depth (specialist) or focus more on breadth (generalist).</p>
<p> For the first category, folks that focus more on depth are usually experts in a particular domain and most of their time is spent on writing code or working on technical design documents to find solutions in their area of expertise. Companies deal with unique challenges and subject matter experts are needed to drive technical solutions for these extremely hard problems. For example, at Slack, as the company grew and our system needed to scale and perform, there is a principal engineer that his main focus and passion is to detect and fix performance problems.</p>
<p> Folks that focus on breadth usually work more closely with the leadership team, influencing the org or company wide technical vision, improving processes and culture. Due to their breadth, they are more flexible and can work on different areas of the engineering organization based on the company priorities and needs.</p>
<p> Personally, for now, I enjoy and focus more on breadth and how I spend my time depends a lot on what my team and organization needs. I would say that so far this year, about 50% of my time is spent on <a href="https://slack.engineering/technical-leadership-getting-started-e5161b1bf85c">technical leadership</a> and talking with people about larger technical investments that we should focus on, and 50% of my time is focused on mentoring, reviewing code, writing code, jumping on incidents and fixing critical issues, etc. The ratio does change quarter by quarter.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in earlier roles?</em></strong></p>
<p> Personally, I feel that it’s quite noticeable the increase in trust and respect from people that did not work with me before my promotion / title change. Having the title strongly correlates with one's ability to influence the organization/company roadmap and priorities - basically you get to be in the “room where it happens”.</p>
<p> I get to be part of building things that have impact for the direct success of the company. Advocating for such projects and being part of them was not something that would’ve been achievable in earlier roles.</p>
<p> I’m also able to uplevel others that are more junior and make their voices heard. Having a Staff+ title brings some privilege that others don’t have and I try to leverage that to help uplevel my team / peers.</p>
<p><strong>_Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? _</strong></p>
<p> A significant amount of my time is actually spent on advocating for technical solutions, processes, architectural or cultural changes - it’s not only all about writing code. I'm constantly involved in the technical design review process for many of the teams that need to build systems that rely on the Data Engineering tools and services. Besides being involved in advocating for technical projects, an area of my focus is to improve culture or process changes.</p>
<p> One area that is dear to my heart and that I believe I had a significant role in my organization is around Incident Management and Analysis. I’ve been involved with the company’s resilience team to improve our Incident Analysis processes, but for my Data Engineering organization I was very involved in driving our general oncall expectations and structure, while also adopting the company’s Incident Response Structure.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p> Sponsoring is actually an important area for me, as I focus on building amazing relationships with many people that I work with and I strongly believe that we need to lift each other up. Through my journey to get to Staff Engineer and fighting with my own impostrome syndrome, I had the opportunity to work with amazing people that sponsored me and had a huge impact on my growth. A couple of people that I worked with and have been my mentors and role models over time are <a href="https://www.linkedin.com/in/josh-wills-13882b/">Josh Wills</a>, <a href="https://www.linkedin.com/in/stanb/">Stan Babourine</a>, <a href="https://www.linkedin.com/in/bogdangaza/">Bogdan Gaza</a> and <a href="https://www.linkedin.com/in/traviscrawford/">Travis Crawford</a>.</p>
<p> Mentoring and growing people around me has always been important to me and being in a Staff+ role, you have a type of privilege and power that others don’t have and I try my best to use this to help and uplevel people around me.</p>
<p><strong><em>You first got the title Staff Engineer at Slack. Were you hired as a Staff Engineer? If not, what was the process of getting promoted to Staff?</em></strong></p>
<p> I joined Slack as a mid level engineer and after one year I got my Senior promotion. As a Senior Engineer I had the opportunity to work on multiple projects with org/company wide impact, many of them that were directly tied into how our company business metrics are being computed, which were critical for getting the company ready to go public.</p>
<p> After being 2 years in the Senior role, my manager told me that I am operating at the next level and that he believed there was a strong case to make and he planned to put me up for promotion. At Slack, the Staff+ Engineering promotions need to have a promo package put together that illustrates with clear details and measurable information that a person operates at a certain level. The main areas of focus are: Technical Quality, Impact, Collaboration and Execution. We worked together to write and fill in all the necessary details for the promotion package. As an IC, I highly recommend, if it’s possible, to work with your manager and write this document together: it should be a team effort. After the packet is ready, the promotion package is evaluated by a special promo committee where some leadership and staff+ engineers from the whole company are present.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?</em></strong></p>
<p> As I look back and contemplate on how I felt and thought about this when I was a junior engineer, the main factor to get to Staff Engineer is to actually believe that <strong>YOU CAN DO IT</strong> and don’t let the impostrome syndrome win.</p>
<p> In general, I’ve always tried to be very intentional with my career choices and usually I spend some time every year to think about what I’m doing and the areas of growth that I want to focus on. I’ve found this extremely valuable, because it makes me take a step back and assess what I am currently doing, to ask if I’m still growing in my current environment and think about new opportunities.</p>
<p> So at the end of 2015, when I decided I wanted to leave Twitter, I found out that Slack was starting to build their Data Engineering team. Being able to build and design from scratch the systems, services and frameworks was extremely exciting for me. Joining a newly-formed team at Slack was a unique opportunity that definitely contributed to reaching Staff Engineer. It gave me the opportunity to work on projects that had org or company wide impact. For example, the first big project I worked on moved about 25% of the load on the production MySQL database off to the Data Warehouse, saving the company millions of dollars.</p>
<p> Another critical factor that influenced my path to become a Staff Engineer were the people around me, as I was lucky to have amazing role models and mentors in my team. When I joined Slack, I was the 4th person in a very senior team (everyone else was Senior Staff), which contributed to my desire to prove myself and show that I belong. Building a track record of mentoring, visibility and technical quality in every project also contributed to my path towards Staff, I did not see my job as just a job, but I’ve put a lot of passion into every project or problem we tried to solve.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p> No, I did not have an assigned “Staff Project” and that is not something that it’s part of the promotion process at Slack. There is a career ladder that describes the general expectations and scope of impact for every level and with Staff+ levels this level of scope starts to expand from org wide impact towards company wide impact.</p>
<p> I usually always try to challenge myself and I was always looking to drive change and impact in my organization. I think the most impactful project that I worked on and contributed to my path towards Staff Engineer was being involved in thinking through and implementing the technical design on how our company business metrics (ex: ARR) are computed to make sure the process is reliable, scalable and most importantly, reproductible. This was a critical initiative as Slack was completing a public company readiness process.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Looking back, is there an easier path to Staff that you could have taken?</em></strong></p>
<p> Something that I felt was extremely helpful was to understand that a Staff+ Engineer’s work and responsibility is more than writing code. Basically what got you to senior level will not get you to Staff+. It’s important to understand the expectations of this role in your company, but also in the industry as a whole, as there are some differences between companies.</p>
<p> Work with your manager or more senior peers to find projects that will challenge you and increase the scope of your work. Something that was extremely helpful to me is that I started investing in developing my leadership and communication skills more. I also started framing and thinking about certain things in a different way, when I was starting feeling stressed or unsure of my own abilities, that’s often a sign that I’m growing and stumbled into an area that offers a lot of growth opportunities.</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p> Reaching Staff Engineer brings a lot of responsibility and you should always be a strong advocate for your peers. As an IC, I think execution and being hands on are always the “easy” thing to do and the hard things are actually driving change and impact in your organization.</p>
<p> I think that in different moments of your tenure as a Staff engineer, you might see yourself focusing on different things and that is ok and expected. There’s not a single clean cut definition of what a Staff Engineer should do.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p> This is actually a question that I ask myself every couple of years. Every time that I self-reflect and think about the answer to this question, the answer, for now, is no - I don’t want to be a manager. I love coding too much and I strongly believe that to be a successful manager you should not write code, and should instead be fully focused on growing your team. I like being involved in technical decisions and thinking about technical solutions way too much to give up this hands-on experience, even though as you get in more senior roles, the time you spend coding will decrease.</p>
<p> Not being an Engineering Manager doesn’t mean that you cannot influence and help people grow. As a Staff+ engineer you do need many of the core management skills, even though you are not a manager and I have found reading management books extremely helpful. I actually think that these two roles, even though they are on separate, parallel tracks, they are closer to each other than people think.</p>
<p> It’s possible that at some point in time, the answer to this question might change and that is ok.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p> I use Twitter extensively, but I’m mostly a consumer and follow many people in tech. I usually follow people that I saw talking at conferences or I worked with and I find their content relevant to me. Here’s a couple, in no specific order: <a href="https://twitter.com/skamille">Camille Fournier</a>,<a href="https://twitter.com/lara_hogan"> Lara Hogan</a>, <a href="https://twitter.com/josh_wills">Josh Wills</a>, <a href="https://twitter.com/vboykis">Vicki Boykis</a>, <a href="https://twitter.com/gasca">David Gasca</a>, <a href="https://twitter.com/jewelia">Julia Grace</a>, <a href="https://twitter.com/holdenkarau">Holden Karau</a>, <a href="https://twitter.com/allspaw">John Allspaw</a>, <a href="https://twitter.com/mipsytipsy">Charity Majors</a>, <a href="https://twitter.com/postwait">Theo Schlossnagle</a>, <a href="https://twitter.com/jessitron">Jessica Joy Kerr</a>, <a href="https://twitter.com/sarahcat21">Sarah Catanzaro</a>, <a href="https://twitter.com/orangebook_">Orange Book</a></p>
<p> I also enjoy reading (I read about 50 books each year) and since last year, I always try to leave a mini review on <a href="https://www.goodreads.com/user/show/11950463-diana-pojar">my Goodreads account</a> for every book I read, but here are a couple of books that I found useful:</p>
<ul>
<li><a href="https://www.goodreads.com/book/show/20487821-thanks-for-the-feedback">Thanks for the Feedback</a></li>
<li><a href="https://www.goodreads.com/book/show/32809138-radical-candor">Radical Candor</a></li>
<li><a href="https://www.goodreads.com/book/show/34616805-the-manager-s-path">The Manager's Path: A Guide for Tech Leaders Navigating Growth and Change</a></li>
<li><a href="https://www.goodreads.com/book/show/18966789-leadership-and-self-deception">Leadership and Self-Deception: Getting Out of the Box</a></li>
<li><a href="https://www.goodreads.com/book/show/29342515-the-coaching-habit">The Coaching Habit: Say Less, Ask More &#x26; Change the Way You Lead Forever</a></li>
<li><a href="https://www.goodreads.com/book/show/30109687-first-break-all-the-rules">First, Break All the Rules: What the World's Greatest Managers Do Differently</a></li>
<li><a href="https://www.goodreads.com/book/show/36752952-the-courage-to-be-disliked">The Courage To Be Disliked: How to free yourself, change your life and achieve real happiness</a></li>
<li><a href="https://www.goodreads.com/book/show/16158498-give-and-take">Give and Take: A Revolutionary Approach to Success</a></li>
<li><a href="https://www.goodreads.com/book/show/9530608-mistakes-were-made-but-not-by-me">Mistakes Were Made (But Not by Me): Why We Justify Foolish Beliefs, Bad Decisions, and Hurtful Acts</a></li>
</ul>
<p>That's not an exhaustive list!</p>]]></description><link>https://staffeng.com/stories/diana-pojar</link><guid isPermaLink="false">https://staffeng.com/stories/diana-pojar</guid><pubDate>Tue, 14 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;https://diana.dev/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/podiana&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/dianapojar/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I’m a Staff Data Engineer and the Technical Lead for the Data Platform team at Slack. I joined Slack in February 2016 and I was one of the first engineers in the Data Engineering team. I was heavily involved in building many of the tools and infrastructure to make data available for long-term analytics. When I joined, the team had just made the decision to use Thrift as the logging format. If anyone wanted to get insights, they had to schedule cronjobs on top of the read replicas of the production MySQL database.&lt;/p&gt;
&lt;p&gt; The purpose of the Data Engineering team at Slack is to enable anyone in the company (data science, engineers, product managers, etc) to access data, so they can compute insights, drive business decisions or build new features. The Data Platform team focuses on building services and frameworks that work at scale to empower everyone that needs to process or use data in the Data Warehouse. Some things that our teams own are: the Data Discovery service that exposes task, table, column lineage and general metadata, the event logging structure and the pipeline that consumes the events and exposes them in raw tables in the Data Warehouse.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;More from Diana&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://slack.engineering/data-wrangling-at-slack-f2e0ff633b69#.w4kzhdpx8&quot;&gt;Data Wrangling at Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/ronnieftw/scaling-data-at-slack-a-series-of-unfortunate-events&quot;&gt;Scaling Data at Slack: A Series of Unfortunate Events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at Slack? How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; The role of a Staff-plus engineer depends a lot on what the team needs and also what the particular engineer strengths are. From my experience the responsibilities of a Staff-plus engineer can change over time, but usually their main focus is working on projects/efforts that have strategic value for the company, while driving technical design and up-leveling their team.&lt;/p&gt;
&lt;p&gt; There are two big categories that I’ve seen Staff-plus engineers fall into: focus more on depth (specialist) or focus more on breadth (generalist).&lt;/p&gt;
&lt;p&gt; For the first category, folks that focus more on depth are usually experts in a particular domain and most of their time is spent on writing code or working on technical design documents to find solutions in their area of expertise. Companies deal with unique challenges and subject matter experts are needed to drive technical solutions for these extremely hard problems. For example, at Slack, as the company grew and our system needed to scale and perform, there is a principal engineer that his main focus and passion is to detect and fix performance problems.&lt;/p&gt;
&lt;p&gt; Folks that focus on breadth usually work more closely with the leadership team, influencing the org or company wide technical vision, improving processes and culture. Due to their breadth, they are more flexible and can work on different areas of the engineering organization based on the company priorities and needs.&lt;/p&gt;
&lt;p&gt; Personally, for now, I enjoy and focus more on breadth and how I spend my time depends a lot on what my team and organization needs. I would say that so far this year, about 50% of my time is spent on &lt;a href=&quot;https://slack.engineering/technical-leadership-getting-started-e5161b1bf85c&quot;&gt;technical leadership&lt;/a&gt; and talking with people about larger technical investments that we should focus on, and 50% of my time is focused on mentoring, reviewing code, writing code, jumping on incidents and fixing critical issues, etc. The ratio does change quarter by quarter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in earlier roles?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Personally, I feel that it’s quite noticeable the increase in trust and respect from people that did not work with me before my promotion / title change. Having the title strongly correlates with one&apos;s ability to influence the organization/company roadmap and priorities - basically you get to be in the “room where it happens”.&lt;/p&gt;
&lt;p&gt; I get to be part of building things that have impact for the direct success of the company. Advocating for such projects and being part of them was not something that would’ve been achievable in earlier roles.&lt;/p&gt;
&lt;p&gt; I’m also able to uplevel others that are more junior and make their voices heard. Having a Staff+ title brings some privilege that others don’t have and I try to leverage that to help uplevel my team / peers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? _&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; A significant amount of my time is actually spent on advocating for technical solutions, processes, architectural or cultural changes - it’s not only all about writing code. I&apos;m constantly involved in the technical design review process for many of the teams that need to build systems that rely on the Data Engineering tools and services. Besides being involved in advocating for technical projects, an area of my focus is to improve culture or process changes.&lt;/p&gt;
&lt;p&gt; One area that is dear to my heart and that I believe I had a significant role in my organization is around Incident Management and Analysis. I’ve been involved with the company’s resilience team to improve our Incident Analysis processes, but for my Data Engineering organization I was very involved in driving our general oncall expectations and structure, while also adopting the company’s Incident Response Structure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Sponsoring is actually an important area for me, as I focus on building amazing relationships with many people that I work with and I strongly believe that we need to lift each other up. Through my journey to get to Staff Engineer and fighting with my own impostrome syndrome, I had the opportunity to work with amazing people that sponsored me and had a huge impact on my growth. A couple of people that I worked with and have been my mentors and role models over time are &lt;a href=&quot;https://www.linkedin.com/in/josh-wills-13882b/&quot;&gt;Josh Wills&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/stanb/&quot;&gt;Stan Babourine&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/bogdangaza/&quot;&gt;Bogdan Gaza&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/traviscrawford/&quot;&gt;Travis Crawford&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; Mentoring and growing people around me has always been important to me and being in a Staff+ role, you have a type of privilege and power that others don’t have and I try my best to use this to help and uplevel people around me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title Staff Engineer at Slack. Were you hired as a Staff Engineer? If not, what was the process of getting promoted to Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I joined Slack as a mid level engineer and after one year I got my Senior promotion. As a Senior Engineer I had the opportunity to work on multiple projects with org/company wide impact, many of them that were directly tied into how our company business metrics are being computed, which were critical for getting the company ready to go public.&lt;/p&gt;
&lt;p&gt; After being 2 years in the Senior role, my manager told me that I am operating at the next level and that he believed there was a strong case to make and he planned to put me up for promotion. At Slack, the Staff+ Engineering promotions need to have a promo package put together that illustrates with clear details and measurable information that a person operates at a certain level. The main areas of focus are: Technical Quality, Impact, Collaboration and Execution. We worked together to write and fill in all the necessary details for the promotion package. As an IC, I highly recommend, if it’s possible, to work with your manager and write this document together: it should be a team effort. After the packet is ready, the promotion package is evaluated by a special promo committee where some leadership and staff+ engineers from the whole company are present.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; As I look back and contemplate on how I felt and thought about this when I was a junior engineer, the main factor to get to Staff Engineer is to actually believe that &lt;strong&gt;YOU CAN DO IT&lt;/strong&gt; and don’t let the impostrome syndrome win.&lt;/p&gt;
&lt;p&gt; In general, I’ve always tried to be very intentional with my career choices and usually I spend some time every year to think about what I’m doing and the areas of growth that I want to focus on. I’ve found this extremely valuable, because it makes me take a step back and assess what I am currently doing, to ask if I’m still growing in my current environment and think about new opportunities.&lt;/p&gt;
&lt;p&gt; So at the end of 2015, when I decided I wanted to leave Twitter, I found out that Slack was starting to build their Data Engineering team. Being able to build and design from scratch the systems, services and frameworks was extremely exciting for me. Joining a newly-formed team at Slack was a unique opportunity that definitely contributed to reaching Staff Engineer. It gave me the opportunity to work on projects that had org or company wide impact. For example, the first big project I worked on moved about 25% of the load on the production MySQL database off to the Data Warehouse, saving the company millions of dollars.&lt;/p&gt;
&lt;p&gt; Another critical factor that influenced my path to become a Staff Engineer were the people around me, as I was lucky to have amazing role models and mentors in my team. When I joined Slack, I was the 4th person in a very senior team (everyone else was Senior Staff), which contributed to my desire to prove myself and show that I belong. Building a track record of mentoring, visibility and technical quality in every project also contributed to my path towards Staff, I did not see my job as just a job, but I’ve put a lot of passion into every project or problem we tried to solve.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; No, I did not have an assigned “Staff Project” and that is not something that it’s part of the promotion process at Slack. There is a career ladder that describes the general expectations and scope of impact for every level and with Staff+ levels this level of scope starts to expand from org wide impact towards company wide impact.&lt;/p&gt;
&lt;p&gt; I usually always try to challenge myself and I was always looking to drive change and impact in my organization. I think the most impactful project that I worked on and contributed to my path towards Staff Engineer was being involved in thinking through and implementing the technical design on how our company business metrics (ex: ARR) are computed to make sure the process is reliable, scalable and most importantly, reproductible. This was a critical initiative as Slack was completing a public company readiness process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Looking back, is there an easier path to Staff that you could have taken?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Something that I felt was extremely helpful was to understand that a Staff+ Engineer’s work and responsibility is more than writing code. Basically what got you to senior level will not get you to Staff+. It’s important to understand the expectations of this role in your company, but also in the industry as a whole, as there are some differences between companies.&lt;/p&gt;
&lt;p&gt; Work with your manager or more senior peers to find projects that will challenge you and increase the scope of your work. Something that was extremely helpful to me is that I started investing in developing my leadership and communication skills more. I also started framing and thinking about certain things in a different way, when I was starting feeling stressed or unsure of my own abilities, that’s often a sign that I’m growing and stumbled into an area that offers a lot of growth opportunities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Reaching Staff Engineer brings a lot of responsibility and you should always be a strong advocate for your peers. As an IC, I think execution and being hands on are always the “easy” thing to do and the hard things are actually driving change and impact in your organization.&lt;/p&gt;
&lt;p&gt; I think that in different moments of your tenure as a Staff engineer, you might see yourself focusing on different things and that is ok and expected. There’s not a single clean cut definition of what a Staff Engineer should do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; This is actually a question that I ask myself every couple of years. Every time that I self-reflect and think about the answer to this question, the answer, for now, is no - I don’t want to be a manager. I love coding too much and I strongly believe that to be a successful manager you should not write code, and should instead be fully focused on growing your team. I like being involved in technical decisions and thinking about technical solutions way too much to give up this hands-on experience, even though as you get in more senior roles, the time you spend coding will decrease.&lt;/p&gt;
&lt;p&gt; Not being an Engineering Manager doesn’t mean that you cannot influence and help people grow. As a Staff+ engineer you do need many of the core management skills, even though you are not a manager and I have found reading management books extremely helpful. I actually think that these two roles, even though they are on separate, parallel tracks, they are closer to each other than people think.&lt;/p&gt;
&lt;p&gt; It’s possible that at some point in time, the answer to this question might change and that is ok.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I use Twitter extensively, but I’m mostly a consumer and follow many people in tech. I usually follow people that I saw talking at conferences or I worked with and I find their content relevant to me. Here’s a couple, in no specific order: &lt;a href=&quot;https://twitter.com/skamille&quot;&gt;Camille Fournier&lt;/a&gt;,&lt;a href=&quot;https://twitter.com/lara_hogan&quot;&gt; Lara Hogan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/josh_wills&quot;&gt;Josh Wills&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/vboykis&quot;&gt;Vicki Boykis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/gasca&quot;&gt;David Gasca&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jewelia&quot;&gt;Julia Grace&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/holdenkarau&quot;&gt;Holden Karau&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/allspaw&quot;&gt;John Allspaw&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mipsytipsy&quot;&gt;Charity Majors&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/postwait&quot;&gt;Theo Schlossnagle&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jessitron&quot;&gt;Jessica Joy Kerr&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sarahcat21&quot;&gt;Sarah Catanzaro&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/orangebook_&quot;&gt;Orange Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; I also enjoy reading (I read about 50 books each year) and since last year, I always try to leave a mini review on &lt;a href=&quot;https://www.goodreads.com/user/show/11950463-diana-pojar&quot;&gt;my Goodreads account&lt;/a&gt; for every book I read, but here are a couple of books that I found useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/20487821-thanks-for-the-feedback&quot;&gt;Thanks for the Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/32809138-radical-candor&quot;&gt;Radical Candor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/34616805-the-manager-s-path&quot;&gt;The Manager&apos;s Path: A Guide for Tech Leaders Navigating Growth and Change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/18966789-leadership-and-self-deception&quot;&gt;Leadership and Self-Deception: Getting Out of the Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/29342515-the-coaching-habit&quot;&gt;The Coaching Habit: Say Less, Ask More &amp;#x26; Change the Way You Lead Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/30109687-first-break-all-the-rules&quot;&gt;First, Break All the Rules: What the World&apos;s Greatest Managers Do Differently&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/36752952-the-courage-to-be-disliked&quot;&gt;The Courage To Be Disliked: How to free yourself, change your life and achieve real happiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/16158498-give-and-take&quot;&gt;Give and Take: A Revolutionary Approach to Success&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/9530608-mistakes-were-made-but-not-by-me&quot;&gt;Mistakes Were Made (But Not by Me): Why We Justify Foolish Beliefs, Bad Decisions, and Hurtful Acts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&apos;s not an exhaustive list!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Duretti Hirpa - Formerly Staff Engineer at Mailchimp]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="https://www.durettihirpa.com/">blog</a>,
<a href="https://twitter.com/duretti">twitter</a>,
<a href="https://www.linkedin.com/in/duretti/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p>I’ve recently departed Mailchimp, where I was a Staff Engineer and tech lead for Mailchimp’s transactional email product. I left to start and found my own company. Working for yourself is really quite distinct from being a staff engineer at a company, and is relatively well discussed. So, I’ll talk about what it was like to be a staff engineer at Mailchimp.</p>
<p>I was working on a team that had a strong mandate to stabilize and extend an underloved product. When I joined Mailchimp the team was more infrastructure focused, and later a product team was formed, and I was chosen to lead that. Since it was a new team, I did a lot of table-setting (roadmapping, setting up channels, team norm discussions, and collaborating on a tech spec template). It is one of my stronger beliefs that a good leader is a kin to a good host: it’s about making room for others, making them feel welcome. If we want to grow as leaders, we need to learn to get out of the way of the people we lead, and give them a chance to participate.</p>
<p><strong><em>What does a Staff-plus engineer do at your company? How do you spend your time day-to-day?</em></strong></p>
<p>The days vary -- it depends on what my team needs. It’s a lot of communication, and clearing the brush. It might be talking to an adjacent team, it might be chasing down requirements, I’ve even written product briefs. Whatever my team needs? That’s usually my first priority. I’ll often pair with an engineer on my team, talk through possible solutions. I’ll also work on cross-org initiatives. It’s a lot of relationship building, lots of getting to know people, and being known - so that when the time comes, conflict is easier. I also like to inject a little levity, so there’s a lot of jokes and meme creation, not going to lie. Work is also a community, if you let it be one.</p>
<div class="pull">
<p><strong>Some of Duretti&#39;s talks</strong></p>
<ul>
<li><a href="https://www.youtube.com/watch?v=a9H7SGuRrC8">How to affect change without losing your job</a></li>
<li><a href="https://www.youtube.com/watch?v=sjsy_e1glKo">How do you get an engineering team to eat their vegetables</a></li>
<li><a href="https://www.youtube.com/watch?v=XyXxXuYdx0U">Good APIs make for Good UIs</a></li>
</ul>
</div>
<p><strong><em>What’s something that’s changed for you since becoming a Staff-plus engineer?</em></strong></p>
<p>Honestly? Being listened to and being treated like I have expertise. The title carries weight, and I’m taken more seriously from the jump.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?</em></strong></p>
<p>I’m a big fan of anticipating needs; it tends to be practice and process based. Those are the squeaky wheels of engineering organizations, and tend to be things that people complain about but don’t fix. After I had been assigned a product team, I started looking for technical specs and examples of product briefs. It turned out that Mailchimp didn’t have a unified technical spec template. I gathered 5 other staff-plus engineers, and we did a spike. We created a template, refined it, asked for feedback, and rolled it out. I personally am pretty impatient, so I didn’t want it to be a working group. Working groups have a time and a place, but without a strong directive can drag out for many months or even years. Since we had an explicit deliverable (a tech spec template), we had 3 meetings, and worked asynchronously (Mailchimp is distributed across North America), and rolled it out. I count that a win.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>Sponsorship is the name of the game. I believe that it’s the job of senior engineers to make <em>more</em> senior engineers. Otherwise, we’re just gatekeeping.</p>
<p>More transparently, I’m a Black woman in technology, and I finally got a seat at a table. I made it, and I’m actually senior, and it’s not a success to me unless that room looks more like me. Otherwise, I’m just evidence of structural exclusion - the exception that proves the rule.</p>
<p><strong><em>How did you first get your Staff Engineer title?</em></strong></p>
<p>I first got the Staff Engineer position at Mailchimp, and I was hired in.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education dramatically impacted your path?</em></strong></p>
<p>I’ll be honest, reaching staff was the combination of my reputation, sponsorship, location, and working at a popular, successful company. I was an early-ish hire at Slack, and while there, I was encouraged to give conference talks. Giving talks raised my profile, as did some spicy tweeting on Beyoncé’s internet, about the other half of the work we do as software engineers. So, I have some public profile, and when I was job searching last year, I reached out to Marc Hedlund about joining Mailchimp. He framed my interview internally at Mailchimp as a Staff Engineer interview, and I aced it. Without that intervention? I would still be underestimated. Tiny interventions can have big ripples.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p>I was hired in at Staff, so no.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? What about a piece of advice for someone who has just started as a Staff Engineer? Looking back, is there an easier path to Staff that you could have taken?</em></strong></p>
<p>How do I say this delicately? The easier path would have been if I wasn’t me. I definitely think a combination of my personality and identity made it such that it took longer for me to get here. According to the Harvard Business Review’s report on women in tech, <a href="https://store.hbr.org/product/the-athena-factor-reversing-the-brain-drain-in-science-engineering-and-technology/10094">The Athena Factor,</a> 41% of women leave the technology sector after 10 years of professional experience, and I really understand that statistic. This statistic haunts me. I feel that statistic in my bones. I’d be lying if I said my fantasies of leaving technology weren’t slowly approaching a plan.</p>
<p>But, I stayed, and I got the staff title in my 11th year of professional experience.</p>
<p>In terms of advice, it’s this: Staff engineering is a <strong>completely</strong> different job. It’s no longer about your technical expertise. The job isn’t computer anymore, as I’m fond of saying. You’re now an agent of the organization, and you have to take a longer view. Sure, technical chops are important, but realistically you’re not going to be spending that much time coding, if you’re doing it right. You’re basically a manager sans reports, and your directive is to lead without formal authority. It works because as an engineer, you inherently have more time than managers do, and you can fix things that managers can’t.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>I did consider engineering management: I’m an extroverted, charismatic, people person. I’d be a damn fine engineering manager. However, I didn’t want to be a first-time engineering manager and experiment on someone else’s career. Time is a non-renewable resource, and we act like it isn’t. I couldn’t stomach taking a year to get good at a job and possibly rob someone of career progression. I couldn’t pretend it wasn’t a theft, and I wasn’t willing to do that to someone. Additionally, I know that it’s a completely different job, and it’s one that would require sponsorship and mentorship -- something that’s already difficult to get as an individual contributor, let alone a manager.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p>For mouthy folks who want to be change agents, I can’t recommend the book <em><a href="https://www.amazon.com/dp/B00P9WL3WS/">Rebels at Work</a></em> by Carmen Medina and Lois Kelly enough. For people struggling to understand office politics, and how you can learn &#x26; exploit human biases, I highly recommend Jeffrey Pfeiffer book, <em><a href="https://www.amazon.com/Power-Some-People-Have-Others-ebook/dp/B003V1WSZK/">Power: Why Some People Have It And Others Don’t</a>.</em></p>
<p>I’m still hoping to find a role model that looks like me, but the odds aren’t likely, so I’m trying to “be who I needed when I was younger.” That being said, every person of color, woman, and gender minority I’ve gotten to know in this sector has taught me something essential about heart, spite, showing up, and joyfully being yourself in a world and profession that isn’t carved for you - and that’s what keeps me going. </p>]]></description><link>https://staffeng.com/stories/duretti-hirpa</link><guid isPermaLink="false">https://staffeng.com/stories/duretti-hirpa</guid><pubDate>Thu, 09 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;https://www.durettihirpa.com/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/duretti&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/duretti/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve recently departed Mailchimp, where I was a Staff Engineer and tech lead for Mailchimp’s transactional email product. I left to start and found my own company. Working for yourself is really quite distinct from being a staff engineer at a company, and is relatively well discussed. So, I’ll talk about what it was like to be a staff engineer at Mailchimp.&lt;/p&gt;
&lt;p&gt;I was working on a team that had a strong mandate to stabilize and extend an underloved product. When I joined Mailchimp the team was more infrastructure focused, and later a product team was formed, and I was chosen to lead that. Since it was a new team, I did a lot of table-setting (roadmapping, setting up channels, team norm discussions, and collaborating on a tech spec template). It is one of my stronger beliefs that a good leader is a kin to a good host: it’s about making room for others, making them feel welcome. If we want to grow as leaders, we need to learn to get out of the way of the people we lead, and give them a chance to participate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at your company? How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The days vary -- it depends on what my team needs. It’s a lot of communication, and clearing the brush. It might be talking to an adjacent team, it might be chasing down requirements, I’ve even written product briefs. Whatever my team needs? That’s usually my first priority. I’ll often pair with an engineer on my team, talk through possible solutions. I’ll also work on cross-org initiatives. It’s a lot of relationship building, lots of getting to know people, and being known - so that when the time comes, conflict is easier. I also like to inject a little levity, so there’s a lot of jokes and meme creation, not going to lie. Work is also a community, if you let it be one.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Some of Duretti&amp;#39;s talks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=a9H7SGuRrC8&quot;&gt;How to affect change without losing your job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sjsy_e1glKo&quot;&gt;How do you get an engineering team to eat their vegetables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XyXxXuYdx0U&quot;&gt;Good APIs make for Good UIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What’s something that’s changed for you since becoming a Staff-plus engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Honestly? Being listened to and being treated like I have expertise. The title carries weight, and I’m taken more seriously from the jump.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m a big fan of anticipating needs; it tends to be practice and process based. Those are the squeaky wheels of engineering organizations, and tend to be things that people complain about but don’t fix. After I had been assigned a product team, I started looking for technical specs and examples of product briefs. It turned out that Mailchimp didn’t have a unified technical spec template. I gathered 5 other staff-plus engineers, and we did a spike. We created a template, refined it, asked for feedback, and rolled it out. I personally am pretty impatient, so I didn’t want it to be a working group. Working groups have a time and a place, but without a strong directive can drag out for many months or even years. Since we had an explicit deliverable (a tech spec template), we had 3 meetings, and worked asynchronously (Mailchimp is distributed across North America), and rolled it out. I count that a win.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sponsorship is the name of the game. I believe that it’s the job of senior engineers to make &lt;em&gt;more&lt;/em&gt; senior engineers. Otherwise, we’re just gatekeeping.&lt;/p&gt;
&lt;p&gt;More transparently, I’m a Black woman in technology, and I finally got a seat at a table. I made it, and I’m actually senior, and it’s not a success to me unless that room looks more like me. Otherwise, I’m just evidence of structural exclusion - the exception that proves the rule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How did you first get your Staff Engineer title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I first got the Staff Engineer position at Mailchimp, and I was hired in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education dramatically impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ll be honest, reaching staff was the combination of my reputation, sponsorship, location, and working at a popular, successful company. I was an early-ish hire at Slack, and while there, I was encouraged to give conference talks. Giving talks raised my profile, as did some spicy tweeting on Beyoncé’s internet, about the other half of the work we do as software engineers. So, I have some public profile, and when I was job searching last year, I reached out to Marc Hedlund about joining Mailchimp. He framed my interview internally at Mailchimp as a Staff Engineer interview, and I aced it. Without that intervention? I would still be underestimated. Tiny interventions can have big ripples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was hired in at Staff, so no.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you? What about a piece of advice for someone who has just started as a Staff Engineer? Looking back, is there an easier path to Staff that you could have taken?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How do I say this delicately? The easier path would have been if I wasn’t me. I definitely think a combination of my personality and identity made it such that it took longer for me to get here. According to the Harvard Business Review’s report on women in tech, &lt;a href=&quot;https://store.hbr.org/product/the-athena-factor-reversing-the-brain-drain-in-science-engineering-and-technology/10094&quot;&gt;The Athena Factor,&lt;/a&gt; 41% of women leave the technology sector after 10 years of professional experience, and I really understand that statistic. This statistic haunts me. I feel that statistic in my bones. I’d be lying if I said my fantasies of leaving technology weren’t slowly approaching a plan.&lt;/p&gt;
&lt;p&gt;But, I stayed, and I got the staff title in my 11th year of professional experience.&lt;/p&gt;
&lt;p&gt;In terms of advice, it’s this: Staff engineering is a &lt;strong&gt;completely&lt;/strong&gt; different job. It’s no longer about your technical expertise. The job isn’t computer anymore, as I’m fond of saying. You’re now an agent of the organization, and you have to take a longer view. Sure, technical chops are important, but realistically you’re not going to be spending that much time coding, if you’re doing it right. You’re basically a manager sans reports, and your directive is to lead without formal authority. It works because as an engineer, you inherently have more time than managers do, and you can fix things that managers can’t.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I did consider engineering management: I’m an extroverted, charismatic, people person. I’d be a damn fine engineering manager. However, I didn’t want to be a first-time engineering manager and experiment on someone else’s career. Time is a non-renewable resource, and we act like it isn’t. I couldn’t stomach taking a year to get good at a job and possibly rob someone of career progression. I couldn’t pretend it wasn’t a theft, and I wasn’t willing to do that to someone. Additionally, I know that it’s a completely different job, and it’s one that would require sponsorship and mentorship -- something that’s already difficult to get as an individual contributor, let alone a manager.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For mouthy folks who want to be change agents, I can’t recommend the book &lt;em&gt;&lt;a href=&quot;https://www.amazon.com/dp/B00P9WL3WS/&quot;&gt;Rebels at Work&lt;/a&gt;&lt;/em&gt; by Carmen Medina and Lois Kelly enough. For people struggling to understand office politics, and how you can learn &amp;#x26; exploit human biases, I highly recommend Jeffrey Pfeiffer book, &lt;em&gt;&lt;a href=&quot;https://www.amazon.com/Power-Some-People-Have-Others-ebook/dp/B003V1WSZK/&quot;&gt;Power: Why Some People Have It And Others Don’t&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’m still hoping to find a role model that looks like me, but the odds aren’t likely, so I’m trying to “be who I needed when I was younger.” That being said, every person of color, woman, and gender minority I’ve gotten to know in this sector has taught me something essential about heart, spite, showing up, and joyfully being yourself in a world and profession that isn’t carved for you - and that’s what keeps me going. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Nelson Elhage - Formerly Staff Engineer at Stripe]]></title><description><![CDATA[<p><span class="date">April, 2020</span>
<a href="https://twitter.com/nelhage">twitter</a>,
<a href="https://blog.nelhage.com/">blog</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p> I was most recently at Stripe. They do online payment processing, and it’s a pretty fast growing startup of about two thousand people. Engineering was around six hundred. When I left, I technically didn't have a title. If I had stayed another two months, I would have been a Staff Engineer, because they finally rolled out titles after some years of internal debate.</p>
<p> The team I worked on most recently was called Payment Architecture, which was a team of three or four fairly senior engineers. Payments are the core of Stripe’s product, and we looked after the payments codebase. We were particularly focused on the financial infrastructure layers of the codebase, and building the data model and abstractions we needed to support all of Stripe’s current and aspirational product lines.</p>
<p> We looked at how code structure fits into organizational structure, including how to structure code within a rapidly growing organization that was adding teams, products, countries, and payments methods. It was particularly important that our architecture support spreading ownership across a number of offices and timezones.</p>
<p> We drove a lot of initiatives around code quality and code architecture, and did some implementation and rewrite projects. For each of those initiatives, we developed metrics and goals, got teams to take on those goals, and then gave teams tools to help them migrate to the new standards.</p>
<div class="pull">
<p><strong>Some of Nelson's writing</strong></p>
<ul>
<li><a href="https://increment.com/testing/testing-as-communication/">Testing as communication</a></li>
<li><a href="https://blog.nelhage.com/post/systems-that-defy-understanding/">Systems that defy detailed understanding</a></li>
<li><a href="https://blog.nelhage.com/post/computers-can-be-understood/">Computers can be understood</a></li>
<li><a href="https://blog.nelhage.com/post/why-sorbet-is-fast/">Why the Sorbet typechecker is fast</a></li>
</ul>
</div>
<p><strong><em>Was the “Payments Architecture” team a permanent team or more of a project team?</em></strong></p>
<p> A little bit of both. It wasn’t a super tactical team with a narrow project or scope to its mandate. But it was also unlikely to last forever as a team. We were taking an experimental approach to evolving our architecture, with the goal of revising and updating our approach as we went. We hoped that the team would eventually work itself out of its job.</p>
<p><strong><em>What does a Staff-plus engineer do at your company?</em></strong></p>
<p> It’s hard to say with too much confidence because Stripe was only just introducing titles. It wasn't public who was a Staff Engineer, but you did have a sense of who the senior engineers were based on the people working on the most significant, impactful things.</p>
<p> There are some clear Staff Engineer archetypes. One is working on deep technical projects, maybe scoping out or building new pieces of infrastructure. Before the Payment Architecture team, I worked on building <a href="https://sorbet.org/">Sorbet</a>, which is our static Ruby type checker. I spent about a year with two other senior engineers building that from scratch, which was a good example of the deep, highly leveraged technical work archetype.</p>
<p> There were also Staff Engineers who spent time wrangling cross-cutting projects, serving as a combination of architect and project manager to pull together different parts of the organization to work on a large problem. Typically these problems weren’t well-aligned with our current architecture or organization such that they required collaboration across many different teams.</p>
<p> There were also Staff Engineers who worked with one team, or a small group of teams, and they served as the keepers of the team vision. They’d identify what the team was building towards, and where they wanted to be in one to five years. They’d work across the organization to build and share that vision, then work to implement it.</p>
<p><strong><em>How do you spend your time day-to-day?</em></strong></p>
<p> This looked very different between the Payment Architecture role and the Sorbet role. Sorbet was more of a “heads down and code” project. On Payments Architecture, there was still some amount of coding because we had a specific approach that we wanted to both try out and to demo the ideas that we were pushing for.</p>
<p> I did a decent amount of project management as well. Things like tending to the task tracker, running the daily stand up, figuring out who needed help or who was blocked. I also spent time being communication glue across the company and engineering organization, especially talking to teams that were interested in the tools and patterns we were building and advising them.</p>
<p> In that effort, I spent time in various meetings figuring out the technical strategy, and also a fair amount of my week writing design documents on the problems we saw along with promoting the shape of architecture that we thought would solve them. Finally, I worked to explain and sell those ideas to leadership and other teams, as a way of setting the agenda and advocating for their investment and prioritization.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer?</em></strong></p>
<p> Certainly the one that's easiest to trace the impact of was <a href="https://sorbet.org/">Sorbet</a>, where in two years a three person team took Stripe from a dynamically typed code base to a substantially statically typed code base. That impacted all of the company’s six hundred engineers’ daily experience in their editors and development environment.</p>
<p> That said, it's hard to know whether that was truly the most impactful project. There's a more nebulous argument that the architecture strategy work will be more impactful in the long run.</p>
<p><strong><em>What’s something you’ve done as a Staff-plus engineer that you weren’t able or allowed to do in earlier roles?</em></strong></p>
<p> The question of “allowed” is interesting, and might not be quite the right question because there were very few official policies on who got what kind of role. Most things relied on more informal gauges of seniority.</p>
<p> But that said, both Sorbet and the Payments Architecture team were relatively ambitious projects. Sorbet for example required pulling three senior engineers off of more concrete projects. Starting them required high levels of organizational respect and trust to get permission and support to pull the team off their existing work and having them instead work on these projects for a year.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change?</em></strong></p>
<p> This is somewhat seasonal around the planning process. Prioritization ultimately means staffing, and staffing decisions happen during planning.</p>
<p> The planning season was a particularly acute period, but I was more or less continually thinking about prioritization at the engineering-wide level. It might be noticing a problem that a lot of engineers were encountering, or seeing something that was slowing teams down. It was a constant, recurring thread that I thought about and it would periodically become an acute priority where I’d spend time advocating for a team to be created or to work on a problem.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p> That wasn’t an angle that I spent a lot of time thinking explicitly about in those terms, and I can't think of clear examples where I would describe that as what I was doing. An adjacent thing that I did a couple of times was helping to bootstrap teams that I wasn't part of. For example, some team would spin up to take over a system that used to be part my capacity, and I would work with them in a close advisory role to give them context and advice.</p>
<p><strong><em>You first got the Architect title at Oracle after the Ksplice acquisition. What was your process for getting both the Architect title?</em></strong></p>
<p> I don't remember if <a href="https://en.wikipedia.org/wiki/Ksplice">Ksplice</a> had titles in place pre-acquisition. After the acquisition I spent one year at Oracle and had the title Architect, which I think at the time was their highest individual contributor level. There was definitely some acquisition title inflation going on there. I don't know if I would have reached that title if I had not come in via acquisition.</p>
<p><strong><em>After Ksplice was acquired by Oracle and you became an Architect, did the work you were doing on a day-to-day basis change from before the acquisition?</em></strong></p>
<p> I was broadly doing the same style of work. The thing that changed was that I spent a lot more time interfacing with the Oracle Linux organization within Oracle. I was focused on figuring out how our product would integrate with theirs, and also bringing them up to speed on our technology so that they were able to use it. I had previously spent time training new hires, but that was a much slower rate than what happened at Oracle which was, “We're dropping you into this 400-person org, and now training them is a big part of your job.”</p>
<p><strong><em>What two or three factors were most important in you reaching Staff?</em></strong></p>
<p> The specific path I took was very dependent on coming in quite early at Stripe. I was roughly employee #30. The thing that I did with that though, which I think is not identical to what everyone else did, is I tried to build very broad context and awareness across Stripe. That was comparatively easy to do, when there were 15 engineers; there weren't that many things then.</p>
<p> But I spent a lot of effort as the company grew trying to stay aware of <em>everything</em> that was going on in engineering: the interactions between teams, the scaling pain points. I tried to have an unusually global perspective. That helped me know which problems were important to work on and especially what the one level removed important problems were. If I knew the organization had a goal of launching a specific product, I would have the perspective to see the reason why it would be hard is because of these previous architectural decisions, or that this downstream system wasn’t currently up to the task.</p>
<p> As the organization got really big, seeing those one level removed dependencies got increasingly hard, and trying to keep a broad view and systems level view helped with that. It also helped me connect teams together, making me a router of information and ideas, as well as an originator of proposals.</p>
<p> Many teams get stuck looking at their section of the world, and have a less developed conception of how their internal customers are integrating with them. This happens because they've never worked on the internal customer teams they support. I helped bring teams the context of how other teams truly used their systems, and connected them to other people across the organization whose perspectives they should gather,</p>
<p> It’s hard to keep all this context as the organization grows, but it’s even harder for someone who didn't start building that global context when the company was smaller. By starting early, you have a huge competitive advantage relative to someone starting later who tries to reverse engineer the architecture and organizational dependencies.</p>
<p><strong><em>When I spoke with <a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn</a>, one interesting point she made was that sometimes it’s helpful to be able to see things without the full historical context. Did you ever find that your context made it harder to move forward?</em></strong></p>
<p> Absolutely. I would notice myself coming into conversations with a team and I was prepared to give them a seven year history of every time someone had attempted the thing that they're doing and why it didn't work. It would take deliberate effort to review that history and ask myself, “Why is this information helpful or relevant to them?”</p>
<p> Sometimes the information isn’t useful. On the other hand, if someone tried to do this thing and died on the rocks, there may be some really hard technical problem that's still around. There might be some value in pointing out the rocks, but also there's a lot of value in having the audacity to try again because it’s years later and we've become a different organization.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p> I'm instinctively a little bit wary of this sort of idea of a staff project, in part because one of the archetypes of Staff Engineers that I've seen are people who don't necessarily run grand projects themselves or do big things. But just are sort of incredibly effective gurus and routers who make the whole engineering organization run better.</p>
<p> Maybe my closest thing to a Staff Project is that I got my final promotion for work on something called the “Data Model Stripe Release Plan.” I led this six month long plan to get a bunch of teams to coordinate on a handful of projects addressing the weaknesses in our data models, and advancing the data model in ways that would, aspirationally, be transformative.</p>
<p> I don't think it's a great instance of a Staff Project in some ways. For one, we did good work, but it was much less transformative than anyone hoped due to a combination of reasons. Some of which were in my control and some of which were that the problems were just too hard and the organization didn't have the resources to actually fix them in six months.</p>
<p> While that project wasn’t necessarily better work than I did in other halves, it was a very visible, high profile role. It created visibility and increased my standing in the company in important ways.</p>
<p><strong><em>Can you share a piece of advice on being a Staff Engineer that was helpful for you?</em></strong></p>
<p> One lesson that I learned was the importance of focus and prioritization. That’s especially true when you have the broad organizational context that I talked about earlier. It's very easy at any moment to identify thirty different things that you would like to be working on.</p>
<p> Occasionally you can push each of those thirty things forward a little bit. And that's productive for a while, but you need to be careful. If these are things that <em>aren't</em> getting worked on and that you think <em>should</em> get worked on, you're going to have much better luck picking one of them at a time and really focusing your effort rather than pushing a little across many different projects at once.</p>
<p> One big distinction is whether there are already teams working on those thirty things. If there are already teams working on them, but not in the direction that you think is effective, you can get a lot of leverage out of going to those thirty teams and helping unblock them.</p>
<p> In the end you have to say, “There are all of these things that I wish I could work on, and I'm not going to do all of them. This year I’ll pick one or two to work on, and I'm going to deliberately ignore the other for a while, even though I think they’re major problems.”</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p> One thing is that I'm a huge believer in the primacy of Conway's Law to guide organizations’ technical architecture.</p>
<p> Another is to build and invest in your relationships with engineering leadership: the managers, the directors, and the vice-presidents. I think some of this might be specific to organizational structure, but certainly at Stripe those people often had a lot of implicit power because they were the obvious people to go to with questions. They also have a lot of influence over staffing and prioritization.</p>
<p> It’s important to have good relationships with them both so that you can influence them with your ideas, but also so that you can understand what problems they're seeing. You need to know what their incentives are, and what problems they perceive that you don't perceive. Having better alignment with leadership makes a lot of things much easier.</p>
<p> Something else that has been quite valuable for me is estimation. I find it really valuable to be able to look at a system and have the habit of estimating how many gigabytes-per-second is this thing, or how much storage would this data take? You don’t have to get it perfect, getting the nearest power of ten is usually enough to be useful.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p> I considered it but not very seriously. I have a pretty good understanding of myself that, at least for now, I wouldn't really enjoy that work. I think I’d find all the interactions not a sustainable way to spend my time. I occasionally wish I was more interested in it, because I do perceive it as a way to get a lot of power, but I fortunately have enough self awareness to believe, I think correctly, that I wouldn't enjoy it and therefore wouldn't be good at it.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from?</em></strong></p>
<p> I get that question decently often because I have an unusually broad breadth of general knowledge, and I don't have a good answer for where it came from. I'm pretty voraciously curious about computing, software and architecture. I read lots of different things, and I spend more time reading links on software engineering Twitter than perhaps is healthy.</p>
<p> It’s also been really valuable for me to cultivate a good personal network of other senior engineers. I chat with them informally about whatever it is that we're working on and thinking about. When you have personal connections, you can get very unvarnished views of the problems people are seeing and the solutions they're considering.</p>
<p> I’ve mostly bootstrapped this through the friends-of-friends networks of people I've known professionally or going all the way back to when I was in school. It's not something I sought out post facto.</p>
<p> I read the occasional technical paper, but it's not something I do actively. It’s mostly when it's referenced by someone or comes up in some other context. It's definitely not something I make any effort to keep track of systematically or to review the recent publications. I do think that having a decent handle on the quote unquote foundational literature is really handy. </p>]]></description><link>https://staffeng.com/stories/nelson-elhage</link><guid isPermaLink="false">https://staffeng.com/stories/nelson-elhage</guid><pubDate>Tue, 07 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;April, 2020&lt;/span&gt;
&lt;a href=&quot;https://twitter.com/nelhage&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://blog.nelhage.com/&quot;&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I was most recently at Stripe. They do online payment processing, and it’s a pretty fast growing startup of about two thousand people. Engineering was around six hundred. When I left, I technically didn&apos;t have a title. If I had stayed another two months, I would have been a Staff Engineer, because they finally rolled out titles after some years of internal debate.&lt;/p&gt;
&lt;p&gt; The team I worked on most recently was called Payment Architecture, which was a team of three or four fairly senior engineers. Payments are the core of Stripe’s product, and we looked after the payments codebase. We were particularly focused on the financial infrastructure layers of the codebase, and building the data model and abstractions we needed to support all of Stripe’s current and aspirational product lines.&lt;/p&gt;
&lt;p&gt; We looked at how code structure fits into organizational structure, including how to structure code within a rapidly growing organization that was adding teams, products, countries, and payments methods. It was particularly important that our architecture support spreading ownership across a number of offices and timezones.&lt;/p&gt;
&lt;p&gt; We drove a lot of initiatives around code quality and code architecture, and did some implementation and rewrite projects. For each of those initiatives, we developed metrics and goals, got teams to take on those goals, and then gave teams tools to help them migrate to the new standards.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Some of Nelson&apos;s writing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://increment.com/testing/testing-as-communication/&quot;&gt;Testing as communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.nelhage.com/post/systems-that-defy-understanding/&quot;&gt;Systems that defy detailed understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.nelhage.com/post/computers-can-be-understood/&quot;&gt;Computers can be understood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.nelhage.com/post/why-sorbet-is-fast/&quot;&gt;Why the Sorbet typechecker is fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Was the “Payments Architecture” team a permanent team or more of a project team?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; A little bit of both. It wasn’t a super tactical team with a narrow project or scope to its mandate. But it was also unlikely to last forever as a team. We were taking an experimental approach to evolving our architecture, with the goal of revising and updating our approach as we went. We hoped that the team would eventually work itself out of its job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at your company?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; It’s hard to say with too much confidence because Stripe was only just introducing titles. It wasn&apos;t public who was a Staff Engineer, but you did have a sense of who the senior engineers were based on the people working on the most significant, impactful things.&lt;/p&gt;
&lt;p&gt; There are some clear Staff Engineer archetypes. One is working on deep technical projects, maybe scoping out or building new pieces of infrastructure. Before the Payment Architecture team, I worked on building &lt;a href=&quot;https://sorbet.org/&quot;&gt;Sorbet&lt;/a&gt;, which is our static Ruby type checker. I spent about a year with two other senior engineers building that from scratch, which was a good example of the deep, highly leveraged technical work archetype.&lt;/p&gt;
&lt;p&gt; There were also Staff Engineers who spent time wrangling cross-cutting projects, serving as a combination of architect and project manager to pull together different parts of the organization to work on a large problem. Typically these problems weren’t well-aligned with our current architecture or organization such that they required collaboration across many different teams.&lt;/p&gt;
&lt;p&gt; There were also Staff Engineers who worked with one team, or a small group of teams, and they served as the keepers of the team vision. They’d identify what the team was building towards, and where they wanted to be in one to five years. They’d work across the organization to build and share that vision, then work to implement it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; This looked very different between the Payment Architecture role and the Sorbet role. Sorbet was more of a “heads down and code” project. On Payments Architecture, there was still some amount of coding because we had a specific approach that we wanted to both try out and to demo the ideas that we were pushing for.&lt;/p&gt;
&lt;p&gt; I did a decent amount of project management as well. Things like tending to the task tracker, running the daily stand up, figuring out who needed help or who was blocked. I also spent time being communication glue across the company and engineering organization, especially talking to teams that were interested in the tools and patterns we were building and advising them.&lt;/p&gt;
&lt;p&gt; In that effort, I spent time in various meetings figuring out the technical strategy, and also a fair amount of my week writing design documents on the problems we saw along with promoting the shape of architecture that we thought would solve them. Finally, I worked to explain and sell those ideas to leadership and other teams, as a way of setting the agenda and advocating for their investment and prioritization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Certainly the one that&apos;s easiest to trace the impact of was &lt;a href=&quot;https://sorbet.org/&quot;&gt;Sorbet&lt;/a&gt;, where in two years a three person team took Stripe from a dynamically typed code base to a substantially statically typed code base. That impacted all of the company’s six hundred engineers’ daily experience in their editors and development environment.&lt;/p&gt;
&lt;p&gt; That said, it&apos;s hard to know whether that was truly the most impactful project. There&apos;s a more nebulous argument that the architecture strategy work will be more impactful in the long run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What’s something you’ve done as a Staff-plus engineer that you weren’t able or allowed to do in earlier roles?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; The question of “allowed” is interesting, and might not be quite the right question because there were very few official policies on who got what kind of role. Most things relied on more informal gauges of seniority.&lt;/p&gt;
&lt;p&gt; But that said, both Sorbet and the Payments Architecture team were relatively ambitious projects. Sorbet for example required pulling three senior engineers off of more concrete projects. Starting them required high levels of organizational respect and trust to get permission and support to pull the team off their existing work and having them instead work on these projects for a year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; This is somewhat seasonal around the planning process. Prioritization ultimately means staffing, and staffing decisions happen during planning.&lt;/p&gt;
&lt;p&gt; The planning season was a particularly acute period, but I was more or less continually thinking about prioritization at the engineering-wide level. It might be noticing a problem that a lot of engineers were encountering, or seeing something that was slowing teams down. It was a constant, recurring thread that I thought about and it would periodically become an acute priority where I’d spend time advocating for a team to be created or to work on a problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; That wasn’t an angle that I spent a lot of time thinking explicitly about in those terms, and I can&apos;t think of clear examples where I would describe that as what I was doing. An adjacent thing that I did a couple of times was helping to bootstrap teams that I wasn&apos;t part of. For example, some team would spin up to take over a system that used to be part my capacity, and I would work with them in a close advisory role to give them context and advice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the Architect title at Oracle after the Ksplice acquisition. What was your process for getting both the Architect title?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I don&apos;t remember if &lt;a href=&quot;https://en.wikipedia.org/wiki/Ksplice&quot;&gt;Ksplice&lt;/a&gt; had titles in place pre-acquisition. After the acquisition I spent one year at Oracle and had the title Architect, which I think at the time was their highest individual contributor level. There was definitely some acquisition title inflation going on there. I don&apos;t know if I would have reached that title if I had not come in via acquisition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;After Ksplice was acquired by Oracle and you became an Architect, did the work you were doing on a day-to-day basis change from before the acquisition?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I was broadly doing the same style of work. The thing that changed was that I spent a lot more time interfacing with the Oracle Linux organization within Oracle. I was focused on figuring out how our product would integrate with theirs, and also bringing them up to speed on our technology so that they were able to use it. I had previously spent time training new hires, but that was a much slower rate than what happened at Oracle which was, “We&apos;re dropping you into this 400-person org, and now training them is a big part of your job.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; The specific path I took was very dependent on coming in quite early at Stripe. I was roughly employee #30. The thing that I did with that though, which I think is not identical to what everyone else did, is I tried to build very broad context and awareness across Stripe. That was comparatively easy to do, when there were 15 engineers; there weren&apos;t that many things then.&lt;/p&gt;
&lt;p&gt; But I spent a lot of effort as the company grew trying to stay aware of &lt;em&gt;everything&lt;/em&gt; that was going on in engineering: the interactions between teams, the scaling pain points. I tried to have an unusually global perspective. That helped me know which problems were important to work on and especially what the one level removed important problems were. If I knew the organization had a goal of launching a specific product, I would have the perspective to see the reason why it would be hard is because of these previous architectural decisions, or that this downstream system wasn’t currently up to the task.&lt;/p&gt;
&lt;p&gt; As the organization got really big, seeing those one level removed dependencies got increasingly hard, and trying to keep a broad view and systems level view helped with that. It also helped me connect teams together, making me a router of information and ideas, as well as an originator of proposals.&lt;/p&gt;
&lt;p&gt; Many teams get stuck looking at their section of the world, and have a less developed conception of how their internal customers are integrating with them. This happens because they&apos;ve never worked on the internal customer teams they support. I helped bring teams the context of how other teams truly used their systems, and connected them to other people across the organization whose perspectives they should gather,&lt;/p&gt;
&lt;p&gt; It’s hard to keep all this context as the organization grows, but it’s even harder for someone who didn&apos;t start building that global context when the company was smaller. By starting early, you have a huge competitive advantage relative to someone starting later who tries to reverse engineer the architecture and organizational dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;When I spoke with &lt;a href=&quot;https://staffeng.com/stories/keavy-mcminn&quot;&gt;Keavy McMinn&lt;/a&gt;, one interesting point she made was that sometimes it’s helpful to be able to see things without the full historical context. Did you ever find that your context made it harder to move forward?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Absolutely. I would notice myself coming into conversations with a team and I was prepared to give them a seven year history of every time someone had attempted the thing that they&apos;re doing and why it didn&apos;t work. It would take deliberate effort to review that history and ask myself, “Why is this information helpful or relevant to them?”&lt;/p&gt;
&lt;p&gt; Sometimes the information isn’t useful. On the other hand, if someone tried to do this thing and died on the rocks, there may be some really hard technical problem that&apos;s still around. There might be some value in pointing out the rocks, but also there&apos;s a lot of value in having the audacity to try again because it’s years later and we&apos;ve become a different organization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I&apos;m instinctively a little bit wary of this sort of idea of a staff project, in part because one of the archetypes of Staff Engineers that I&apos;ve seen are people who don&apos;t necessarily run grand projects themselves or do big things. But just are sort of incredibly effective gurus and routers who make the whole engineering organization run better.&lt;/p&gt;
&lt;p&gt; Maybe my closest thing to a Staff Project is that I got my final promotion for work on something called the “Data Model Stripe Release Plan.” I led this six month long plan to get a bunch of teams to coordinate on a handful of projects addressing the weaknesses in our data models, and advancing the data model in ways that would, aspirationally, be transformative.&lt;/p&gt;
&lt;p&gt; I don&apos;t think it&apos;s a great instance of a Staff Project in some ways. For one, we did good work, but it was much less transformative than anyone hoped due to a combination of reasons. Some of which were in my control and some of which were that the problems were just too hard and the organization didn&apos;t have the resources to actually fix them in six months.&lt;/p&gt;
&lt;p&gt; While that project wasn’t necessarily better work than I did in other halves, it was a very visible, high profile role. It created visibility and increased my standing in the company in important ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you share a piece of advice on being a Staff Engineer that was helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; One lesson that I learned was the importance of focus and prioritization. That’s especially true when you have the broad organizational context that I talked about earlier. It&apos;s very easy at any moment to identify thirty different things that you would like to be working on.&lt;/p&gt;
&lt;p&gt; Occasionally you can push each of those thirty things forward a little bit. And that&apos;s productive for a while, but you need to be careful. If these are things that &lt;em&gt;aren&apos;t&lt;/em&gt; getting worked on and that you think &lt;em&gt;should&lt;/em&gt; get worked on, you&apos;re going to have much better luck picking one of them at a time and really focusing your effort rather than pushing a little across many different projects at once.&lt;/p&gt;
&lt;p&gt; One big distinction is whether there are already teams working on those thirty things. If there are already teams working on them, but not in the direction that you think is effective, you can get a lot of leverage out of going to those thirty teams and helping unblock them.&lt;/p&gt;
&lt;p&gt; In the end you have to say, “There are all of these things that I wish I could work on, and I&apos;m not going to do all of them. This year I’ll pick one or two to work on, and I&apos;m going to deliberately ignore the other for a while, even though I think they’re major problems.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; One thing is that I&apos;m a huge believer in the primacy of Conway&apos;s Law to guide organizations’ technical architecture.&lt;/p&gt;
&lt;p&gt; Another is to build and invest in your relationships with engineering leadership: the managers, the directors, and the vice-presidents. I think some of this might be specific to organizational structure, but certainly at Stripe those people often had a lot of implicit power because they were the obvious people to go to with questions. They also have a lot of influence over staffing and prioritization.&lt;/p&gt;
&lt;p&gt; It’s important to have good relationships with them both so that you can influence them with your ideas, but also so that you can understand what problems they&apos;re seeing. You need to know what their incentives are, and what problems they perceive that you don&apos;t perceive. Having better alignment with leadership makes a lot of things much easier.&lt;/p&gt;
&lt;p&gt; Something else that has been quite valuable for me is estimation. I find it really valuable to be able to look at a system and have the habit of estimating how many gigabytes-per-second is this thing, or how much storage would this data take? You don’t have to get it perfect, getting the nearest power of ten is usually enough to be useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I considered it but not very seriously. I have a pretty good understanding of myself that, at least for now, I wouldn&apos;t really enjoy that work. I think I’d find all the interactions not a sustainable way to spend my time. I occasionally wish I was more interested in it, because I do perceive it as a way to get a lot of power, but I fortunately have enough self awareness to believe, I think correctly, that I wouldn&apos;t enjoy it and therefore wouldn&apos;t be good at it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I get that question decently often because I have an unusually broad breadth of general knowledge, and I don&apos;t have a good answer for where it came from. I&apos;m pretty voraciously curious about computing, software and architecture. I read lots of different things, and I spend more time reading links on software engineering Twitter than perhaps is healthy.&lt;/p&gt;
&lt;p&gt; It’s also been really valuable for me to cultivate a good personal network of other senior engineers. I chat with them informally about whatever it is that we&apos;re working on and thinking about. When you have personal connections, you can get very unvarnished views of the problems people are seeing and the solutions they&apos;re considering.&lt;/p&gt;
&lt;p&gt; I’ve mostly bootstrapped this through the friends-of-friends networks of people I&apos;ve known professionally or going all the way back to when I was in school. It&apos;s not something I sought out post facto.&lt;/p&gt;
&lt;p&gt; I read the occasional technical paper, but it&apos;s not something I do actively. It’s mostly when it&apos;s referenced by someone or comes up in some other context. It&apos;s definitely not something I make any effort to keep track of systematically or to review the recent publications. I do think that having a decent handle on the quote unquote foundational literature is really handy. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Ritu Vincent - Staff Engineer at Dropbox]]></title><description><![CDATA[<p><span class="date">March, 2020</span>
<a href="https://www.linkedin.com/in/rituvincent/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p> I’m a Staff Engineer at Dropbox. I actually was a Staff Engineer at Dropbox, left to join a different startup, and then recently came back to Dropbox just a few months ago. I came back because a really interesting opportunity opened up within Dropbox to launch an internal incubator. We’re working to foster innovation within the company. Dropbox has become a strong brand in the file sync space, but there’s beginning to be a lot of competition there now, so we need to do more and branch out into new products. The incubator works directly with the CEO, and is a very small team.</p>
<p> I’d been at Dropbox long enough that I built really close bonds with a lot of people here, so when folks pitched me this role it sounded really fun. I’d also been a manager for a couple of years and was getting a little itchy to code again. Putting those together led me back to Dropbox.</p>
<p> There are two parts to the incubator.</p>
<p> The first is a more classic incubator where engineers across the company can pitch ideas and get funding to join the program, and try to show product-market fit or other forms of progress to continue getting funded every few months. The goal is for successful projects to graduate into their own lines of business, although we’re still early.</p>
<p> The second part is engineers who are permanently part of the incubator, and are always generating ideas from within the incubator and operating with a lot of autonomy. I’m one of the two engineers on that permanent “scouting” team, and we’re planning on growing over the next year. It’s very different from anything I’ve done before, which is why I wanted to sign up for it. It’s a huge paradigm shift for me. Honestly, the first few months have been a combination of really fun and really frustrating because it’s harder to measure obvious impact when your primary goal is to very quickly try out a ton of new ideas, many of which will not go anywhere. I’ve had to learn to think of impact in longer timescales - not in terms of what I’m shipping today, but what I could influence the company to ship in the future,</p>
<p><strong><em>What does a Staff-plus engineer do at your company?</em></strong></p>
<p> I'd say there are two different profiles of Staff Engineer at Dropbox. One is a tech lead who does a lot of coordination, designs work for their team, and spends time driving projects. The other is more of a specialist.</p>
<p> The tech lead was definitely my profile when I initially became Staff where I took a team of about eight engineers and drove an eighteen month project. That project had a lot of dependencies, a lot of gnarly parts. I had to control the communication around the project, as well as figure out how to allocate pieces of the project to the team in a way that both helped them grow and got the project done.</p>
<p> The specialist is deeply specialized in a particular area, for example <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum</a>, the creator of Python. Specialists would take on really complex projects and execute it themselves, often projects that no one else could take on effectively. There were fewer specialists than tech leads.</p>
<p><strong><em>Were the specialists predominantly external hires?</em></strong></p>
<p> There were some specialists that came in from industry, like Guido and a lot of very experienced folks on the ML team, but a lot of specialists ended up being homegrown. That might be related to rolling out titles relatively late at Dropbox, which gave folks longer to develop deep context in our technology.</p>
<p><strong><em>How do you spend your time day-to-day?</em></strong></p>
<p> In my current role within the incubator I’m spending all day prototyping, but in my previous tech lead role I did a lot of different things.</p>
<p> I was coding, but I wasn’t coding very much, maybe 20% of my time. I was the tech lead for the desktop client area, and spent a lot of time coordinating and providing guidance on projects. I also spent a lot of time partnering with recruiting, which was something that I did because I was interested in it, not because it was required.</p>
<p> For example, I worked on designing speciality interview loops, moderating debriefs and candidate screening. I also did a lot of work on diversity initiatives. That’s one of the reasons that I’ve tried engineering management multiple times during my career, because I enjoy participating in organizational growth.</p>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer?</em></strong></p>
<p> One of the things that I'm really proud of having worked on was a big revamp of our engineering levels. Back in 2017, I was one of the few individual contributors selected to work on an engineer levels refresh, most everyone else was a director or manager. I’m proud because the new ladder impacted every person at Dropbox working in Engineering, Product and Design.</p>
<p> It was also just really interesting to think deeply about how company growth changed roles and responsibilities. We were starting to bring in people from a lot of different backgrounds, and we wanted to be able to reward everyone in a healthy way. That was very different from my normal day-to-day responsibilities and pushed me outside of my comfort zone pretty significantly.</p>
<p> I’m also proud of my Staff Project, which was very technically complex. That project also gave me a chance to help a lot of people on the team grow. Years later, I’ve had engineers who left the company email me and say how much more confident they are or how much they learned because of that project.</p>
<p> It was also on that project where my manager helped me understand that my first impulse as a tech lead didn’t scale. Initially I was thinking, “I’ll break it into twenty pieces, assign out eighteen pieces, and keep the two hardest for myself,” and my manager pushed me to delegate the hard pieces to the team to stretch and develop them.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change?</em></strong></p>
<p> As a tech lead I spent a lot of time advocating for change. I would jump into a lot of different architecture and technical discussions, even in areas that weren’t directly within my area of expertise, because people seemed to trust my intuition. I know tons of engineers who have amazing technical intuition and don’t have the Staff Engineer title, but the title does formalize having that intuition.</p>
<p> I do prefer for the team that’s going to own a project to make the final decisions about it. In cases where I have a very clear “right decision” in my head, I’ll try to lead the team towards that decision rather than going in and saying “this is the right decision.”</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p> I definitely think of myself as a sponsor. Execution is one of the most rewarding parts of my job--I love building stuff--but I’ve always loved helping people grow. I feel really proud when I see somebody who I informally mentored or helped on a project go on to do something great.</p>
<p> As a Staff Engineer, and especially as a woman who is a Staff Engineer, I feel like a lot of people look up to me. There seem to be a lot more role models on the manager career path, so I try to make being a role model part of my responsibilities, instead of just keeping my head down coding. I mean, I could just keep my head down coding and that would be great, but I want to help other people, especially people with imposter syndrome.</p>
<p> I often get people coming to me and saying, “I don’t know how to make the next step.” or “I don’t know how to become a staff engineer, so I’m going to go be a manager instead.” I want to try to help them figure out their path. As a Staff Engineer, I think being visible and available for people to ask these sorts of questions is an important part of the role.</p>
<p><strong><em>What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done earlier in your career?</em></strong></p>
<p> There wasn’t anything I wasn’t able to do without the title, but the title did give me confidence. In addition to the title, the other thing that gave me confidence was realizing that everyone else is also struggling with imposter syndrome. The latter I learned in a pivotal conversation with someone who I thought was the most confident engineer I’d ever worked with, and when I talked with him about it he said, “I question every single thing I do. I go home and agonize over what I said earlier that day, and whether it was silly.”</p>
<p> It was really that conversation in combination with the title that pushed me to believe in myself as a Staff Engineer. Together they gave me the confidence to ask for the harder projects, or to ask my manager to give me more projects to work on.</p>
<p><strong><em>What was your proces of getting promoted to Staff Engineer at Dropbox?</em></strong></p>
<p> They rolled out external titles a while after I joined Dropbox. In the first review season with titles, they gave the Staff title to a very small number of engineers. They were really still calibrating the titles at that point. It was in the second review season that I got my Staff title.</p>
<p> By the second season, I’d been a Tech Lead for a while and my manager and I both felt that I had clearly been executing at the Staff level. We did go over the new career level definitions to identify any gaps before the review cycle, but overall it went pretty smoothly.</p>
<p><strong><em>What two or three factors were most important in you reaching Staff?</em></strong></p>
<p> One of the big factors for me was definitely visibility. Part of that came from doing so many things outside of normal engineering responsibilities.</p>
<p> For example, I helped recruiting with running the intern program one summer. During the program I worked with a ton of intern mentors across different teams, and since Dropbox tended to have very large intern classes, that ended up meaning that I gained visibility across pretty much the entire company. The hiring work helped too. If you’re moderating dozens of hiring debriefs every month, and driving hiring and calibration conversations, then you’ll get to interact with everyone in engineering. I also helped with onboarding, giving a core engineering presentation to incoming new hires.</p>
<p> Having a sponsor was also definitely important. My manager and I had a fantastic relationship, and I also had a great relationship with my skip-level manager. I think that played a big part as well.</p>
<p><strong><em>Was that work, which some companies would call “glue work,” directly valued?</em></strong></p>
<p> This work was highly valued by leadership at Dropbox. Leadership and many of the very senior engineers were heavily involved in these efforts, especially recruiting, and it was not considered glue work. That being said, it would not have gotten me to Staff on its own. It was a question of finding a good balance between having cultural impact and having something technically strong to showcase.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p> There isn’t an explicit expectation, nor is it listed anywhere as a formal requirement, but it is understood that you’ll complete a Staff Project to get promoted. I can’t think of any Staff promotion that didn’t include a really strong project, typically a multi-person project where the engineer was the Tech Lead.</p>
<p> I definitely had a Staff Project. Back in the day, Dropbox was initially a consumer product that people downloaded and installed on their machines. When we launched Dropbox for Business there was a request for both your personal and work Dropbox accounts to work simultaneously, including being able to switch across them without needing to log out and log back in.</p>
<p> The initial implementation was written under immense time pressure, and it ran multiple Dropbox processes. One for your personal account and another for business. My Staff project was to make it so a single Dropbox process could run with multiple users logged in. The hard part was that the project stretched from the kernel all the way to the user interface. I had to understand every single layer of the Dropbox system.</p>
<p> Initially we thought it would take six months, and it ended up taking eighteen months. It took up most of the Desktop Client team’s resources for quite a while.</p>
<p><strong><em>Would you share a piece of advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p> Early in my career, my instincts were to ask for projects that I felt I would be able to execute well on instead of projects with more ambiguity that would push me to grow. The advice I got was to push myself out of what I was comfortable with, and to ask for the hard projects on the team. To reach Staff Engineer, you have to know and do more than what you currently know. It’s important to always push beyond what you’re doing and not be scared of asking for things you think are too hard for you.</p>
<p> This is tied into imposter syndrome, where you might not want to try anything until you’re absolutely sure you’ll excel at it. But you have to get comfortable with the fact that you might crash and burn. That’s okay, you’ve got to try it.</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p> People frequently come to me and ask, “What should I do next to reach Staff?” One of the things that I tell them is to be super open and honest with your manager about what you want from your career. A mistake I made early on in my one-on-ones was telling my manager what I thought they wanted to hear, instead of what I actually felt.</p>
<p> They’d ask me if I was interested in a piece of work, and I’d wonder why they were asking, did they _want _me to take the work? So I’d say I was interested even if I wasn’t. Or they’d ask me how a project was going, and it might be going horribly, but I’d tell them it was going fine to avoid disappointing them, instead of saying I needed help.</p>
<p> Somewhere along the way I realized that your manager is really on your team. They’re looking for a way to make you grow, be productive, be happy and become the best engineer you can be. The way to have an effective relationship with your manager, including having them sponsor you, is to be super honest and open with them.</p>
<p> This became particularly obvious to me when I became a manager myself, because I <em>wanted</em> everyone on my team to become a Staff Engineer and to get promoted. I wanted to find reasons to promote them, and worked with them on that.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p> I do <a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">pendulum</a> a decent amount, because I’m interested in so many things on both sides of the career ladder. I’m interested in growing people, I really like working with recruiting, I’m one of those engineers that actually enjoy interviewing, I like understanding how teams grow. But I also really like writing code, and after I spend some time managing I want to get back into the code and hack around a little bit.</p>
<p> Once I started mentoring and managing I definitely found myself thinking about career growth very differently. The pendulum has helped me see a lot of different perspectives. As a manager you have very explicit responsibilities for things like headcount and performance reviews. Staff engineer responsibilities are really fuzzy and differ across companies. That ambiguity around Staff roles leads many folks to make the lateral switch to management who would have been happier staying as an engineer. That’s why it’s so valuable to get more information on the Staff role out there for people to read.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p> I read a lot, but my reading is very recreational. What’s been most impactful for me is having a lot of people who I think of as mentors, usually friends, former managers and folks that I’ve worked with. I have a decent number of recurring monthly lunches, coffee chats and dinners with people who’ve worked with me in the past, know me, and I trust. It’s those conversations about career challenges and growth that have gotten me to where I am in my career.</p>]]></description><link>https://staffeng.com/stories/ritu-vincent</link><guid isPermaLink="false">https://staffeng.com/stories/ritu-vincent</guid><pubDate>Thu, 02 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;March, 2020&lt;/span&gt;
&lt;a href=&quot;https://www.linkedin.com/in/rituvincent/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I’m a Staff Engineer at Dropbox. I actually was a Staff Engineer at Dropbox, left to join a different startup, and then recently came back to Dropbox just a few months ago. I came back because a really interesting opportunity opened up within Dropbox to launch an internal incubator. We’re working to foster innovation within the company. Dropbox has become a strong brand in the file sync space, but there’s beginning to be a lot of competition there now, so we need to do more and branch out into new products. The incubator works directly with the CEO, and is a very small team.&lt;/p&gt;
&lt;p&gt; I’d been at Dropbox long enough that I built really close bonds with a lot of people here, so when folks pitched me this role it sounded really fun. I’d also been a manager for a couple of years and was getting a little itchy to code again. Putting those together led me back to Dropbox.&lt;/p&gt;
&lt;p&gt; There are two parts to the incubator.&lt;/p&gt;
&lt;p&gt; The first is a more classic incubator where engineers across the company can pitch ideas and get funding to join the program, and try to show product-market fit or other forms of progress to continue getting funded every few months. The goal is for successful projects to graduate into their own lines of business, although we’re still early.&lt;/p&gt;
&lt;p&gt; The second part is engineers who are permanently part of the incubator, and are always generating ideas from within the incubator and operating with a lot of autonomy. I’m one of the two engineers on that permanent “scouting” team, and we’re planning on growing over the next year. It’s very different from anything I’ve done before, which is why I wanted to sign up for it. It’s a huge paradigm shift for me. Honestly, the first few months have been a combination of really fun and really frustrating because it’s harder to measure obvious impact when your primary goal is to very quickly try out a ton of new ideas, many of which will not go anywhere. I’ve had to learn to think of impact in longer timescales - not in terms of what I’m shipping today, but what I could influence the company to ship in the future,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at your company?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I&apos;d say there are two different profiles of Staff Engineer at Dropbox. One is a tech lead who does a lot of coordination, designs work for their team, and spends time driving projects. The other is more of a specialist.&lt;/p&gt;
&lt;p&gt; The tech lead was definitely my profile when I initially became Staff where I took a team of about eight engineers and drove an eighteen month project. That project had a lot of dependencies, a lot of gnarly parts. I had to control the communication around the project, as well as figure out how to allocate pieces of the project to the team in a way that both helped them grow and got the project done.&lt;/p&gt;
&lt;p&gt; The specialist is deeply specialized in a particular area, for example &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt;Guido van Rossum&lt;/a&gt;, the creator of Python. Specialists would take on really complex projects and execute it themselves, often projects that no one else could take on effectively. There were fewer specialists than tech leads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Were the specialists predominantly external hires?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; There were some specialists that came in from industry, like Guido and a lot of very experienced folks on the ML team, but a lot of specialists ended up being homegrown. That might be related to rolling out titles relatively late at Dropbox, which gave folks longer to develop deep context in our technology.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How do you spend your time day-to-day?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; In my current role within the incubator I’m spending all day prototyping, but in my previous tech lead role I did a lot of different things.&lt;/p&gt;
&lt;p&gt; I was coding, but I wasn’t coding very much, maybe 20% of my time. I was the tech lead for the desktop client area, and spent a lot of time coordinating and providing guidance on projects. I also spent a lot of time partnering with recruiting, which was something that I did because I was interested in it, not because it was required.&lt;/p&gt;
&lt;p&gt; For example, I worked on designing speciality interview loops, moderating debriefs and candidate screening. I also did a lot of work on diversity initiatives. That’s one of the reasons that I’ve tried engineering management multiple times during my career, because I enjoy participating in organizational growth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; One of the things that I&apos;m really proud of having worked on was a big revamp of our engineering levels. Back in 2017, I was one of the few individual contributors selected to work on an engineer levels refresh, most everyone else was a director or manager. I’m proud because the new ladder impacted every person at Dropbox working in Engineering, Product and Design.&lt;/p&gt;
&lt;p&gt; It was also just really interesting to think deeply about how company growth changed roles and responsibilities. We were starting to bring in people from a lot of different backgrounds, and we wanted to be able to reward everyone in a healthy way. That was very different from my normal day-to-day responsibilities and pushed me outside of my comfort zone pretty significantly.&lt;/p&gt;
&lt;p&gt; I’m also proud of my Staff Project, which was very technically complex. That project also gave me a chance to help a lot of people on the team grow. Years later, I’ve had engineers who left the company email me and say how much more confident they are or how much they learned because of that project.&lt;/p&gt;
&lt;p&gt; It was also on that project where my manager helped me understand that my first impulse as a tech lead didn’t scale. Initially I was thinking, “I’ll break it into twenty pieces, assign out eighteen pieces, and keep the two hardest for myself,” and my manager pushed me to delegate the hard pieces to the team to stretch and develop them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; As a tech lead I spent a lot of time advocating for change. I would jump into a lot of different architecture and technical discussions, even in areas that weren’t directly within my area of expertise, because people seemed to trust my intuition. I know tons of engineers who have amazing technical intuition and don’t have the Staff Engineer title, but the title does formalize having that intuition.&lt;/p&gt;
&lt;p&gt; I do prefer for the team that’s going to own a project to make the final decisions about it. In cases where I have a very clear “right decision” in my head, I’ll try to lead the team towards that decision rather than going in and saying “this is the right decision.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I definitely think of myself as a sponsor. Execution is one of the most rewarding parts of my job--I love building stuff--but I’ve always loved helping people grow. I feel really proud when I see somebody who I informally mentored or helped on a project go on to do something great.&lt;/p&gt;
&lt;p&gt; As a Staff Engineer, and especially as a woman who is a Staff Engineer, I feel like a lot of people look up to me. There seem to be a lot more role models on the manager career path, so I try to make being a role model part of my responsibilities, instead of just keeping my head down coding. I mean, I could just keep my head down coding and that would be great, but I want to help other people, especially people with imposter syndrome.&lt;/p&gt;
&lt;p&gt; I often get people coming to me and saying, “I don’t know how to make the next step.” or “I don’t know how to become a staff engineer, so I’m going to go be a manager instead.” I want to try to help them figure out their path. As a Staff Engineer, I think being visible and available for people to ask these sorts of questions is an important part of the role.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done earlier in your career?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; There wasn’t anything I wasn’t able to do without the title, but the title did give me confidence. In addition to the title, the other thing that gave me confidence was realizing that everyone else is also struggling with imposter syndrome. The latter I learned in a pivotal conversation with someone who I thought was the most confident engineer I’d ever worked with, and when I talked with him about it he said, “I question every single thing I do. I go home and agonize over what I said earlier that day, and whether it was silly.”&lt;/p&gt;
&lt;p&gt; It was really that conversation in combination with the title that pushed me to believe in myself as a Staff Engineer. Together they gave me the confidence to ask for the harder projects, or to ask my manager to give me more projects to work on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What was your proces of getting promoted to Staff Engineer at Dropbox?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; They rolled out external titles a while after I joined Dropbox. In the first review season with titles, they gave the Staff title to a very small number of engineers. They were really still calibrating the titles at that point. It was in the second review season that I got my Staff title.&lt;/p&gt;
&lt;p&gt; By the second season, I’d been a Tech Lead for a while and my manager and I both felt that I had clearly been executing at the Staff level. We did go over the new career level definitions to identify any gaps before the review cycle, but overall it went pretty smoothly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; One of the big factors for me was definitely visibility. Part of that came from doing so many things outside of normal engineering responsibilities.&lt;/p&gt;
&lt;p&gt; For example, I helped recruiting with running the intern program one summer. During the program I worked with a ton of intern mentors across different teams, and since Dropbox tended to have very large intern classes, that ended up meaning that I gained visibility across pretty much the entire company. The hiring work helped too. If you’re moderating dozens of hiring debriefs every month, and driving hiring and calibration conversations, then you’ll get to interact with everyone in engineering. I also helped with onboarding, giving a core engineering presentation to incoming new hires.&lt;/p&gt;
&lt;p&gt; Having a sponsor was also definitely important. My manager and I had a fantastic relationship, and I also had a great relationship with my skip-level manager. I think that played a big part as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Was that work, which some companies would call “glue work,” directly valued?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; This work was highly valued by leadership at Dropbox. Leadership and many of the very senior engineers were heavily involved in these efforts, especially recruiting, and it was not considered glue work. That being said, it would not have gotten me to Staff on its own. It was a question of finding a good balance between having cultural impact and having something technically strong to showcase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; There isn’t an explicit expectation, nor is it listed anywhere as a formal requirement, but it is understood that you’ll complete a Staff Project to get promoted. I can’t think of any Staff promotion that didn’t include a really strong project, typically a multi-person project where the engineer was the Tech Lead.&lt;/p&gt;
&lt;p&gt; I definitely had a Staff Project. Back in the day, Dropbox was initially a consumer product that people downloaded and installed on their machines. When we launched Dropbox for Business there was a request for both your personal and work Dropbox accounts to work simultaneously, including being able to switch across them without needing to log out and log back in.&lt;/p&gt;
&lt;p&gt; The initial implementation was written under immense time pressure, and it ran multiple Dropbox processes. One for your personal account and another for business. My Staff project was to make it so a single Dropbox process could run with multiple users logged in. The hard part was that the project stretched from the kernel all the way to the user interface. I had to understand every single layer of the Dropbox system.&lt;/p&gt;
&lt;p&gt; Initially we thought it would take six months, and it ended up taking eighteen months. It took up most of the Desktop Client team’s resources for quite a while.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Would you share a piece of advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Early in my career, my instincts were to ask for projects that I felt I would be able to execute well on instead of projects with more ambiguity that would push me to grow. The advice I got was to push myself out of what I was comfortable with, and to ask for the hard projects on the team. To reach Staff Engineer, you have to know and do more than what you currently know. It’s important to always push beyond what you’re doing and not be scared of asking for things you think are too hard for you.&lt;/p&gt;
&lt;p&gt; This is tied into imposter syndrome, where you might not want to try anything until you’re absolutely sure you’ll excel at it. But you have to get comfortable with the fact that you might crash and burn. That’s okay, you’ve got to try it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; People frequently come to me and ask, “What should I do next to reach Staff?” One of the things that I tell them is to be super open and honest with your manager about what you want from your career. A mistake I made early on in my one-on-ones was telling my manager what I thought they wanted to hear, instead of what I actually felt.&lt;/p&gt;
&lt;p&gt; They’d ask me if I was interested in a piece of work, and I’d wonder why they were asking, did they _want _me to take the work? So I’d say I was interested even if I wasn’t. Or they’d ask me how a project was going, and it might be going horribly, but I’d tell them it was going fine to avoid disappointing them, instead of saying I needed help.&lt;/p&gt;
&lt;p&gt; Somewhere along the way I realized that your manager is really on your team. They’re looking for a way to make you grow, be productive, be happy and become the best engineer you can be. The way to have an effective relationship with your manager, including having them sponsor you, is to be super honest and open with them.&lt;/p&gt;
&lt;p&gt; This became particularly obvious to me when I became a manager myself, because I &lt;em&gt;wanted&lt;/em&gt; everyone on my team to become a Staff Engineer and to get promoted. I wanted to find reasons to promote them, and worked with them on that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I do &lt;a href=&quot;https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/&quot;&gt;pendulum&lt;/a&gt; a decent amount, because I’m interested in so many things on both sides of the career ladder. I’m interested in growing people, I really like working with recruiting, I’m one of those engineers that actually enjoy interviewing, I like understanding how teams grow. But I also really like writing code, and after I spend some time managing I want to get back into the code and hack around a little bit.&lt;/p&gt;
&lt;p&gt; Once I started mentoring and managing I definitely found myself thinking about career growth very differently. The pendulum has helped me see a lot of different perspectives. As a manager you have very explicit responsibilities for things like headcount and performance reviews. Staff engineer responsibilities are really fuzzy and differ across companies. That ambiguity around Staff roles leads many folks to make the lateral switch to management who would have been happier staying as an engineer. That’s why it’s so valuable to get more information on the Staff role out there for people to read.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I read a lot, but my reading is very recreational. What’s been most impactful for me is having a lot of people who I think of as mentors, usually friends, former managers and folks that I’ve worked with. I have a decent number of recurring monthly lunches, coffee chats and dinners with people who’ve worked with me in the past, know me, and I trust. It’s those conversations about career challenges and growth that have gotten me to where I am in my career.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Joy Ebertz - Senior Staff Software Engineer at Split]]></title><description><![CDATA[<p><span class="date">March, 2020</span>
<a href="https://medium.com/@jkebertz">blog</a>,
<a href="https://twitter.com/jkebertz">twitter</a>,
<a href="https://www.linkedin.com/in/joyebertz/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p> I’m a Senior Staff Software Engineer at Split.io, working on the backend of what we call the COE team. Split is a feature flagging and experimentation framework. We focus on enabling our customers to separate deployment and release in CI/CD and also enabling A/B testing. My team is responsible for most of the main business logic of our web application, including everything from data storage to the APIs. There is a separate team that focuses on the experimentation side, including all of the detailed statistics that goes into that, so we’re able to focus more on the main platform.</p>
<p><strong><em>What does a Staff-plus engineer do at Split? How do you spend your time?</em></strong></p>
<p> I’m still somewhat new, so I’m still working to define my role, which is part of the beauty of more senior roles. Today, I’m still ramping up, so I’m probably spending around half to three quarters of my time on tasks for my specific scrum team, just like any other engineer here. With the rest of my time, I’m participating in conversations and working with other engineers to define a lot of our longer term architecture and strategy, including our future API and platform strategy, how we want to develop our authorization framework, breaking up and decoupling our builds and more. I’ve recently also taken over leadership of our backend chapter and now co-lead it with another engineer and we’re working to put together a backend technical vision, prioritize tech projects and lead standards discussions. If that wasn’t enough, I also continue to write regularly on my blog and speak at conferences.</p>
<div class="pull">
<p><strong>Writing from Joy Ebertz on Staff Engineer Roles</strong></p>
<ul>
<li><a href="https://code.likeagirl.io/no-lone-wolves-what-it-really-takes-to-get-to-the-top-of-engineering-d84b5a7af882">No Lone Wolves: What It Really Takes to Get to the Top of Engineering</a></li>
<li><a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-f3fc140d5f33">What a Senior Staff Software Engineer Actually Does, Part 1: The Role and My Tasks</a></li>
<li><a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-d55308fcdd41">What a Senior Staff Software Engineer Actually Does, Part 2: The Mindset and Focus of the Role</a></li>
<li><a href="https://code.likeagirl.io/finding-your-perfect-job-82f551294cb9">Finding Your Perfect Job</a></li>
</ul>
</div>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?</em></strong></p>
<p> I feel most impactful when I can facilitate setting a technical vision for an area and get people moving toward that vision. I think we would all agree that we want our code to be better architected than it is or improved in some way. However, I’ve found that often people have some vague sense of wanting better without having a clear idea of what that thing they want is. I like to help the group decide on a shared understanding of where exactly they’re trying to get (it’s actually okay if we never get there) and come up with a general game plan of how to get there. This way we’re all marching in the same direction. Having a clear idea of what we want allows us to work with Product to get it prioritized. Even if we never get the whole thing prioritized, knowing how to get there, allows us to slowly make changes that will lead us in that direction. For example, if I’m touching a file anyway and can make a few tweaks that brings me closer to that vision, I will. Without knowing that vision, those tweaks would never happen. The vision alone isn’t enough, we need everyone to understand that vision and internalize it. Part of the power of those small changes I just mentioned is if everyone is making them as a part of their normal coding. Suddenly we have everyone working toward a common goal.</p>
<p> I think the biggest thing that differs between now and when I was more junior is my sense of ownership and responsibility. I’ve always been willing to push back or to drive for improvement. However, when I was more junior, I would often just assume that something was someone else’s problem. Now, it’s all my problem. I may choose to not prioritize something because I think that it’s less important than something else, or I may choose to delegate or pass a problem off to someone else, but I still see it as my problem. I no longer ever assume that someone else will handle something. I’m still a big believer in picking my battles, I won’t work on everything - that’s too much. I also, however, won’t assume that anyone else will either, so if it’s worth getting done, it’s up to me to either do it or to pass it on to someone else.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?</em></strong></p>
<p> Yes. All of those. In my current role, I would say this is a huge part of my job. While, as an engineer, I am also contributing on a scrum team, I would say a lot of my job is to keep an eye out for pitfalls I’ve seen before or larger patterns of problems. I see my job as making all of engineering more efficient - be that through technology, through architecture or through process. However, I should never be making changes for the sake of changes. I’ve advocated for a number of things over the years, from rewriting our email notification system to rethinking testing to reworking several authorization frameworks.</p>
<p> For some things, like the email overhaul, I didn’t do anything big or grand, I just reminded Product every time they wanted to add a notification that our system was ready to fall over and that we really couldn’t add any more until we fixed it. As I pushed back, engineers around me also realized that they could push back. At first Product mostly opted to not add more notifications, but eventually they decided to fix the system. In this case, it was mostly a matter of explaining to them the risks of the system and sticking to what I thought was the right course of action in terms of keeping our systems running.</p>
<p> For other things, such as the authorization frameworks, I was tasked with finding a solution. In these cases, even when people want a new/better solution, you still need to convince them that you’ve picked the right thing. With incredibly complex systems, people will often think they’ve found things you’ve forgotten about (and maybe they did), so it’s really important to seek feedback early and often and to carefully record and communicate both what you chose and why but also what else you considered and why you didn’t chose something else. People need to feel heard and they need to know that you fully considered their concerns. They also want to understand what your thought process was, but even more important, they want to understand that you did thorough research and didn’t just pick the first thing to come along. In fact, when I’m vetting someone else’s design, this is one of the things I really look for - what else was considered?</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p> Yes. As soon as you get to any sort of more senior role, this is always a part of your role assuming you chose to take advantage of it. Since I’m still new at Split, I haven’t had much of a chance to here, but I’m positive that will change. Sometimes sponsoring is the big stuff - recommending people to lead projects or manage a team, but a lot of sponsoring is smaller things - encouraging someone who is a little unsure of themselves, showing off their accomplishments to more senior people they wouldn’t normally have access to, finding ways to delegate your work to people who could get a growth opportunity from doing it. I think it’s possible to be a senior staff engineer without sponsoring, but I’m not sure it’s possible to be a great senior staff engineer without sponsoring. Sponsoring is one of the most powerful ways we can grow those around us and I would say that growing others is one of the most important aspects of our role.</p>
<p><strong><em>You first got the title Staff Engineer at Box. What was the process of getting promoted to Staff?</em></strong></p>
<p> At Box, we submit a promotion case that outlines how, based on the engineering rubric, we’ve already been operating at the next level. Our managers also submit their recommendation and the two go to a promotion committee made up of managers and ICs (at least one level above the level we’re applying to). They review the case, call in the manager to answer any questions and then make a recommendation. Our VP was able to change any of the decisions (although to my knowledge this never happened). If the answer was no, feedback was given as to why and you could repeal the decision with additional information or try again the following time. Appeals did sometimes go through, so if you disagreed with the feedback, it was worth trying. I liked this process because it allowed the person with the most context on our accomplishments be the one to write them up and it allowed you to go up for a promotion even if your manager didn’t agree. On the other hand, I didn’t like the process because it subtly discriminates against those with a little less self confidence and those who struggle with self-promotion. It also resulted in managers taking a little less initiative in starting off the promotion process (letting engineers come to them saying they wanted the promotion rather than suggesting it).</p>
<p><strong><em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?</em></strong></p>
<p> I would say that my location probably hasn’t mattered too much. Education helped me a lot in terms of getting interviews when I was more junior, but a lot less so (at least directly) since then. I would say that the three biggest factors for me were company, visibility and opportunities.</p>
<p> I think it’s possible to advance at a lot of companies. However, I found that being at a fast-growing startup really helped me out. When I joined Box, engineering was around 30 people and when I left, 8 years later, it was at a few hundred, but much of that growth was in the first half. This allowed me to come into a smaller engineering environment where it was possible to really get to know the environment, people and code. Then, because we were growing, there were lots of leadership opportunities and technical challenges for those motivated and willing to take them. Because we grew, the opportunities grew with me. At the same time, there were also enough people around me for me to learn from (I was previously at a really tiny startup - 2-4 people, where that really wasn’t available).</p>
<p> By visibility, I just mean finding some way to be known. I’ve always worked onsite, which I find makes this a little easier, but I think this is possible even if you are remote (although possibly a bit more challenging). If you do really great work, but no one knows about it, when it comes time for promotion, you’ll be passed over. Furthermore, as you become more senior, part of your job becomes mentoring and teaching others and helping your company to create a tech brand - all of these are by definition, visible. Visibility can take a number of forms, but for me I would say that a few things contributed. I was very active in our Slack discussion forums, answering questions for people wherever I could. I also did a lot of blogging and some speaking both internally and externally. Finally, I was active in our women in tech group, which allowed me to form connections with various people throughout engineering.</p>
<p> Finally, opportunities. These can look vastly different as well. For me there was one in particular that was really helpful - I joined our API standards committee. I was actually a bit hesitant to do so at first because I didn’t think I was an expert at APIs, but after reading a few (short) books on REST, along with my work on various APIs previously, I had a pretty solid grasp. The powerful thing about this group is that it cross-cut many teams in engineering, which gave me a chance to work with a lot of different engineers (and gave me that visibility I just mentioned). It also allowed me to have something clear to point to in terms of influencing others and being someone who fights for quality. Our projects there had broad impact across engineering and allowed me to think about something (our API, in this case) holistically.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?</em></strong></p>
<p> I actually didn’t really have a Staff Project. At the time that I was promoted, I had transitioned back from management around 6 months prior, so I referenced some of my time managing for leadership. At the time, I was leading (from the technical side) the very small Box team on a cross-company collaboration project, which involved understanding another company’s development team’s requirements and figuring out how to build as little as possible while meeting their needs. I was a member of an engineering-wide API working group responsible for establishing and maintaining our API standards and I had several side projects going on. I would say that all of these contributed to various parts of my promotion and together helped me establish that I could demonstrate all aspects of what they expected.</p>
<p><strong><em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Is there an easier path to Staff that you could have taken?</em></strong></p>
<p> One piece of advice I got at some point was to amplify my strengths. All of us have strengths and weaknesses and we spend a lot of time talking about ‘areas of improvement.’ It can be easy to feel like the best way to advance is to eliminate all of those. However, it can require a lot of work and energy to barely move the needle if it’s truly an area we’re weak in. Obviously, you still want to make sure you don’t have any truly bad areas, but assuming you’ve gotten that, instead focus on amplifying your strengths. How can you turn something you’re good at into your superpower? The other thing to think about is how can you use something you’re good at to compensate for something you’re weak at? For example, I’m a giant introvert and don’t particularly like mingling with people I don’t know. I’m terrible at networking with strangers. However, I’m good at writing and enjoy doing it. I’ve used writing on my public blog to meet people I wouldn’t otherwise and get exposure more broadly. In fact, I’m sure I’ve gotten far more from that than I would have by going to many, many meetups.</p>
<p> The other more tactical thing that comes to mind is directly related to the process we have at Box of writing a promotion case. A few things were suggested to me - first to write the promotion case well before I was sure I was ready for the promotion. This allows you to see where there might be gaps and can give you very tangible things to work on. (Or maybe you’ll be surprised and realize that you’re ready for promotion before you thought you were). The second is to be very aware of where those gaps are. When a promotion committee is reading through promotion cases, all of the cases are going to be very positive. No one says anything negative when they go up for promotion. So instead of looking for negative things, that committee is going to be looking for what isn’t said. Where are the blank spots? What seems to be avoided or talked over. Take a look at your case from that light - what things might be missing? What things are you brushing over? Be sure to work on those. Finally, tell your story.</p>
<p>Our promotion cases had templates with pointed questions, but, especially at the higher levels, everyone isn’t the same, nor do we want them to be. Instead of just answering the questions, think first about what your strengths are. What are your superpowers? What is your story? Then figure out how to fit that story into the prompts. You’ll have a much better overall case if you include your best strengths in it.</p>
<p> It’s possible that if I hadn’t taken a meander through management, I would have gotten to Staff sooner. That said, I don’t regret doing it and I learned a lot about how people think, how organizations are run and how larger projects are prioritized. All of these have continued to help me do my job on the IC track and likely helped me further get promoted to Senior Staff. While I do think it’s distinctly possible that it slowed down when I got to Staff, I’m actually less sure for the next level - I think there’s a real chance I would have hung out at Staff longer without it. All of this is to say that even though I didn’t take the most direct route, I still learned a lot that has helped me out long term.</p>
<div class="pull">
<p><strong>More of Joy's writing</strong></p>
<ul>
<li><a href="https://medium.com/box-tech-blog/mitigating-risk-when-engineering-success-is-silent-6865f7aecd3f">Mitigating Risk: When Engineering Success Is Silent</a></li>
<li><a href="https://austinstartups.com/the-evolution-of-testing-with-your-codebase-b1f521cc283c">The Evolution of Testing With Your Codebase</a></li>
<li><a href="https://code.likeagirl.io/effective-software-testing-test-types-and-usages-52b19c62c213">Effective Software Testing: Test Types and Usages</a></li>
<li><a href="https://medium.com/@jkebertz/6-secrets-to-effectively-working-with-a-distributed-team-3deecfaedc6c">6 Secrets to Effectively Working with a Distributed Team</a></li>
</ul>
</div>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p> The more senior you get, the less your job is about code. Sure, unlike a people manager, you still have a very technical slant and even through principal, you’ll likely be doing at least some coding. However, the higher you get, the more your job becomes about mentoring and growing the people around you (and more broadly), building your team through building your company’s public tech brand, noticing larger technical trends that can be improved upon or corrected, helping to set the tech vision for your team or the company and advocating for resourcing for tech debt projects. It becomes much more about seeing broader things and getting others on board. Suddenly, communication, leadership and persuasion are even more important than they were previously.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p> I actually managed for about a year and a half in the middle of my time at Box and found that I hated it (you can find more about that in my <a href="https://code.likeagirl.io/why-i-left-management-the-engineering-technical-track-vs-management-track-abef5b1d914d">blog post on that topic</a>). That said, I found that there is actually a lot of overlap between management and staff+ roles in most companies. Both roles require mentoring others, leading and the ability to persuade people. They require thinking bigger and more attention to longer term - both in terms of technologies and people. While I don’t plan to go back to management, I did <a href="https://medium.com/box-tech-blog/no-regrets-my-time-in-management-wasnt-wasted-140b40ded0e6">learn a lot during my time managing</a> and the experience has actually helped me as I’ve advanced to Staff and beyond.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p> I don’t tend to follow any particular person, but instead learn from and find inspiration from almost everyone around me. I’ll list a few here, but in all honesty, I would say that I’ve learned from countless different people at all levels (including many more junior than myself).</p>
<p> I had a manager who every time I came to him with a problem, he would always turn it around on me and ask me what I thought I should do. This got to the point where I could hear him telling me to give feedback to someone directly or telling me to figure out how to fix something without me ever having to talk to him. He really taught me that while, as a manager, he was willing to support me, I would learn the most and be the best version of myself if I could do it on my own. He taught me to take responsibility for everything.</p>
<p> As a counterpoint, I would also mention a principal engineer I worked with, who later taught me that I didn’t need to try to do everything myself. After I learned to take responsibility, I started to forget that I wasn’t alone. Of course I had heard people talk about delegation, but it’s one thing to hear about it or think about it in terms of sprint tasks, but it's another to delegate getting something prioritized or delegate figuring out tech vision for a team or delegate following up on an initiative.</p>
<p> There was another co-worker that I worked with who would drive me completely bonkers sometimes because her approach to solving problems was so different from mine. She would ask for clarification when I thought it was obvious and she would ask for detailed explanations when I thought everyone was on the same page. However, she’s also one of the smartest engineers I’ve ever worked with and working with her made me realize that not only can different styles be just as good, but that sometimes putting together two clashing styles can result in much better results than either of us would have gotten on our own. She found holes in things I thought were obvious and while she drove me nuts sometimes, we got some amazing things accomplished and I am better for it. </p>]]></description><link>https://staffeng.com/stories/joy-ebertz</link><guid isPermaLink="false">https://staffeng.com/stories/joy-ebertz</guid><pubDate>Tue, 31 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;March, 2020&lt;/span&gt;
&lt;a href=&quot;https://medium.com/@jkebertz&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/jkebertz&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/joyebertz/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I’m a Senior Staff Software Engineer at Split.io, working on the backend of what we call the COE team. Split is a feature flagging and experimentation framework. We focus on enabling our customers to separate deployment and release in CI/CD and also enabling A/B testing. My team is responsible for most of the main business logic of our web application, including everything from data storage to the APIs. There is a separate team that focuses on the experimentation side, including all of the detailed statistics that goes into that, so we’re able to focus more on the main platform.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at Split? How do you spend your time?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I’m still somewhat new, so I’m still working to define my role, which is part of the beauty of more senior roles. Today, I’m still ramping up, so I’m probably spending around half to three quarters of my time on tasks for my specific scrum team, just like any other engineer here. With the rest of my time, I’m participating in conversations and working with other engineers to define a lot of our longer term architecture and strategy, including our future API and platform strategy, how we want to develop our authorization framework, breaking up and decoupling our builds and more. I’ve recently also taken over leadership of our backend chapter and now co-lead it with another engineer and we’re working to put together a backend technical vision, prioritize tech projects and lead standards discussions. If that wasn’t enough, I also continue to write regularly on my blog and speak at conferences.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Writing from Joy Ebertz on Staff Engineer Roles&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.likeagirl.io/no-lone-wolves-what-it-really-takes-to-get-to-the-top-of-engineering-d84b5a7af882&quot;&gt;No Lone Wolves: What It Really Takes to Get to the Top of Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-f3fc140d5f33&quot;&gt;What a Senior Staff Software Engineer Actually Does, Part 1: The Role and My Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-d55308fcdd41&quot;&gt;What a Senior Staff Software Engineer Actually Does, Part 2: The Mindset and Focus of the Role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.likeagirl.io/finding-your-perfect-job-82f551294cb9&quot;&gt;Finding Your Perfect Job&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I feel most impactful when I can facilitate setting a technical vision for an area and get people moving toward that vision. I think we would all agree that we want our code to be better architected than it is or improved in some way. However, I’ve found that often people have some vague sense of wanting better without having a clear idea of what that thing they want is. I like to help the group decide on a shared understanding of where exactly they’re trying to get (it’s actually okay if we never get there) and come up with a general game plan of how to get there. This way we’re all marching in the same direction. Having a clear idea of what we want allows us to work with Product to get it prioritized. Even if we never get the whole thing prioritized, knowing how to get there, allows us to slowly make changes that will lead us in that direction. For example, if I’m touching a file anyway and can make a few tweaks that brings me closer to that vision, I will. Without knowing that vision, those tweaks would never happen. The vision alone isn’t enough, we need everyone to understand that vision and internalize it. Part of the power of those small changes I just mentioned is if everyone is making them as a part of their normal coding. Suddenly we have everyone working toward a common goal.&lt;/p&gt;
&lt;p&gt; I think the biggest thing that differs between now and when I was more junior is my sense of ownership and responsibility. I’ve always been willing to push back or to drive for improvement. However, when I was more junior, I would often just assume that something was someone else’s problem. Now, it’s all my problem. I may choose to not prioritize something because I think that it’s less important than something else, or I may choose to delegate or pass a problem off to someone else, but I still see it as my problem. I no longer ever assume that someone else will handle something. I’m still a big believer in picking my battles, I won’t work on everything - that’s too much. I also, however, won’t assume that anyone else will either, so if it’s worth getting done, it’s up to me to either do it or to pass it on to someone else.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Yes. All of those. In my current role, I would say this is a huge part of my job. While, as an engineer, I am also contributing on a scrum team, I would say a lot of my job is to keep an eye out for pitfalls I’ve seen before or larger patterns of problems. I see my job as making all of engineering more efficient - be that through technology, through architecture or through process. However, I should never be making changes for the sake of changes. I’ve advocated for a number of things over the years, from rewriting our email notification system to rethinking testing to reworking several authorization frameworks.&lt;/p&gt;
&lt;p&gt; For some things, like the email overhaul, I didn’t do anything big or grand, I just reminded Product every time they wanted to add a notification that our system was ready to fall over and that we really couldn’t add any more until we fixed it. As I pushed back, engineers around me also realized that they could push back. At first Product mostly opted to not add more notifications, but eventually they decided to fix the system. In this case, it was mostly a matter of explaining to them the risks of the system and sticking to what I thought was the right course of action in terms of keeping our systems running.&lt;/p&gt;
&lt;p&gt; For other things, such as the authorization frameworks, I was tasked with finding a solution. In these cases, even when people want a new/better solution, you still need to convince them that you’ve picked the right thing. With incredibly complex systems, people will often think they’ve found things you’ve forgotten about (and maybe they did), so it’s really important to seek feedback early and often and to carefully record and communicate both what you chose and why but also what else you considered and why you didn’t chose something else. People need to feel heard and they need to know that you fully considered their concerns. They also want to understand what your thought process was, but even more important, they want to understand that you did thorough research and didn’t just pick the first thing to come along. In fact, when I’m vetting someone else’s design, this is one of the things I really look for - what else was considered?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Yes. As soon as you get to any sort of more senior role, this is always a part of your role assuming you chose to take advantage of it. Since I’m still new at Split, I haven’t had much of a chance to here, but I’m positive that will change. Sometimes sponsoring is the big stuff - recommending people to lead projects or manage a team, but a lot of sponsoring is smaller things - encouraging someone who is a little unsure of themselves, showing off their accomplishments to more senior people they wouldn’t normally have access to, finding ways to delegate your work to people who could get a growth opportunity from doing it. I think it’s possible to be a senior staff engineer without sponsoring, but I’m not sure it’s possible to be a great senior staff engineer without sponsoring. Sponsoring is one of the most powerful ways we can grow those around us and I would say that growing others is one of the most important aspects of our role.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title Staff Engineer at Box. What was the process of getting promoted to Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; At Box, we submit a promotion case that outlines how, based on the engineering rubric, we’ve already been operating at the next level. Our managers also submit their recommendation and the two go to a promotion committee made up of managers and ICs (at least one level above the level we’re applying to). They review the case, call in the manager to answer any questions and then make a recommendation. Our VP was able to change any of the decisions (although to my knowledge this never happened). If the answer was no, feedback was given as to why and you could repeal the decision with additional information or try again the following time. Appeals did sometimes go through, so if you disagreed with the feedback, it was worth trying. I liked this process because it allowed the person with the most context on our accomplishments be the one to write them up and it allowed you to go up for a promotion even if your manager didn’t agree. On the other hand, I didn’t like the process because it subtly discriminates against those with a little less self confidence and those who struggle with self-promotion. It also resulted in managers taking a little less initiative in starting off the promotion process (letting engineers come to them saying they wanted the promotion rather than suggesting it).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I would say that my location probably hasn’t mattered too much. Education helped me a lot in terms of getting interviews when I was more junior, but a lot less so (at least directly) since then. I would say that the three biggest factors for me were company, visibility and opportunities.&lt;/p&gt;
&lt;p&gt; I think it’s possible to advance at a lot of companies. However, I found that being at a fast-growing startup really helped me out. When I joined Box, engineering was around 30 people and when I left, 8 years later, it was at a few hundred, but much of that growth was in the first half. This allowed me to come into a smaller engineering environment where it was possible to really get to know the environment, people and code. Then, because we were growing, there were lots of leadership opportunities and technical challenges for those motivated and willing to take them. Because we grew, the opportunities grew with me. At the same time, there were also enough people around me for me to learn from (I was previously at a really tiny startup - 2-4 people, where that really wasn’t available).&lt;/p&gt;
&lt;p&gt; By visibility, I just mean finding some way to be known. I’ve always worked onsite, which I find makes this a little easier, but I think this is possible even if you are remote (although possibly a bit more challenging). If you do really great work, but no one knows about it, when it comes time for promotion, you’ll be passed over. Furthermore, as you become more senior, part of your job becomes mentoring and teaching others and helping your company to create a tech brand - all of these are by definition, visible. Visibility can take a number of forms, but for me I would say that a few things contributed. I was very active in our Slack discussion forums, answering questions for people wherever I could. I also did a lot of blogging and some speaking both internally and externally. Finally, I was active in our women in tech group, which allowed me to form connections with various people throughout engineering.&lt;/p&gt;
&lt;p&gt; Finally, opportunities. These can look vastly different as well. For me there was one in particular that was really helpful - I joined our API standards committee. I was actually a bit hesitant to do so at first because I didn’t think I was an expert at APIs, but after reading a few (short) books on REST, along with my work on various APIs previously, I had a pretty solid grasp. The powerful thing about this group is that it cross-cut many teams in engineering, which gave me a chance to work with a lot of different engineers (and gave me that visibility I just mentioned). It also allowed me to have something clear to point to in terms of influencing others and being someone who fights for quality. Our projects there had broad impact across engineering and allowed me to think about something (our API, in this case) holistically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I actually didn’t really have a Staff Project. At the time that I was promoted, I had transitioned back from management around 6 months prior, so I referenced some of my time managing for leadership. At the time, I was leading (from the technical side) the very small Box team on a cross-company collaboration project, which involved understanding another company’s development team’s requirements and figuring out how to build as little as possible while meeting their needs. I was a member of an engineering-wide API working group responsible for establishing and maintaining our API standards and I had several side projects going on. I would say that all of these contributed to various parts of my promotion and together helped me establish that I could demonstrate all aspects of what they expected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Is there an easier path to Staff that you could have taken?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; One piece of advice I got at some point was to amplify my strengths. All of us have strengths and weaknesses and we spend a lot of time talking about ‘areas of improvement.’ It can be easy to feel like the best way to advance is to eliminate all of those. However, it can require a lot of work and energy to barely move the needle if it’s truly an area we’re weak in. Obviously, you still want to make sure you don’t have any truly bad areas, but assuming you’ve gotten that, instead focus on amplifying your strengths. How can you turn something you’re good at into your superpower? The other thing to think about is how can you use something you’re good at to compensate for something you’re weak at? For example, I’m a giant introvert and don’t particularly like mingling with people I don’t know. I’m terrible at networking with strangers. However, I’m good at writing and enjoy doing it. I’ve used writing on my public blog to meet people I wouldn’t otherwise and get exposure more broadly. In fact, I’m sure I’ve gotten far more from that than I would have by going to many, many meetups.&lt;/p&gt;
&lt;p&gt; The other more tactical thing that comes to mind is directly related to the process we have at Box of writing a promotion case. A few things were suggested to me - first to write the promotion case well before I was sure I was ready for the promotion. This allows you to see where there might be gaps and can give you very tangible things to work on. (Or maybe you’ll be surprised and realize that you’re ready for promotion before you thought you were). The second is to be very aware of where those gaps are. When a promotion committee is reading through promotion cases, all of the cases are going to be very positive. No one says anything negative when they go up for promotion. So instead of looking for negative things, that committee is going to be looking for what isn’t said. Where are the blank spots? What seems to be avoided or talked over. Take a look at your case from that light - what things might be missing? What things are you brushing over? Be sure to work on those. Finally, tell your story.&lt;/p&gt;
&lt;p&gt;Our promotion cases had templates with pointed questions, but, especially at the higher levels, everyone isn’t the same, nor do we want them to be. Instead of just answering the questions, think first about what your strengths are. What are your superpowers? What is your story? Then figure out how to fit that story into the prompts. You’ll have a much better overall case if you include your best strengths in it.&lt;/p&gt;
&lt;p&gt; It’s possible that if I hadn’t taken a meander through management, I would have gotten to Staff sooner. That said, I don’t regret doing it and I learned a lot about how people think, how organizations are run and how larger projects are prioritized. All of these have continued to help me do my job on the IC track and likely helped me further get promoted to Senior Staff. While I do think it’s distinctly possible that it slowed down when I got to Staff, I’m actually less sure for the next level - I think there’s a real chance I would have hung out at Staff longer without it. All of this is to say that even though I didn’t take the most direct route, I still learned a lot that has helped me out long term.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;More of Joy&apos;s writing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/box-tech-blog/mitigating-risk-when-engineering-success-is-silent-6865f7aecd3f&quot;&gt;Mitigating Risk: When Engineering Success Is Silent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://austinstartups.com/the-evolution-of-testing-with-your-codebase-b1f521cc283c&quot;&gt;The Evolution of Testing With Your Codebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.likeagirl.io/effective-software-testing-test-types-and-usages-52b19c62c213&quot;&gt;Effective Software Testing: Test Types and Usages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jkebertz/6-secrets-to-effectively-working-with-a-distributed-team-3deecfaedc6c&quot;&gt;6 Secrets to Effectively Working with a Distributed Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; The more senior you get, the less your job is about code. Sure, unlike a people manager, you still have a very technical slant and even through principal, you’ll likely be doing at least some coding. However, the higher you get, the more your job becomes about mentoring and growing the people around you (and more broadly), building your team through building your company’s public tech brand, noticing larger technical trends that can be improved upon or corrected, helping to set the tech vision for your team or the company and advocating for resourcing for tech debt projects. It becomes much more about seeing broader things and getting others on board. Suddenly, communication, leadership and persuasion are even more important than they were previously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I actually managed for about a year and a half in the middle of my time at Box and found that I hated it (you can find more about that in my &lt;a href=&quot;https://code.likeagirl.io/why-i-left-management-the-engineering-technical-track-vs-management-track-abef5b1d914d&quot;&gt;blog post on that topic&lt;/a&gt;). That said, I found that there is actually a lot of overlap between management and staff+ roles in most companies. Both roles require mentoring others, leading and the ability to persuade people. They require thinking bigger and more attention to longer term - both in terms of technologies and people. While I don’t plan to go back to management, I did &lt;a href=&quot;https://medium.com/box-tech-blog/no-regrets-my-time-in-management-wasnt-wasted-140b40ded0e6&quot;&gt;learn a lot during my time managing&lt;/a&gt; and the experience has actually helped me as I’ve advanced to Staff and beyond.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I don’t tend to follow any particular person, but instead learn from and find inspiration from almost everyone around me. I’ll list a few here, but in all honesty, I would say that I’ve learned from countless different people at all levels (including many more junior than myself).&lt;/p&gt;
&lt;p&gt; I had a manager who every time I came to him with a problem, he would always turn it around on me and ask me what I thought I should do. This got to the point where I could hear him telling me to give feedback to someone directly or telling me to figure out how to fix something without me ever having to talk to him. He really taught me that while, as a manager, he was willing to support me, I would learn the most and be the best version of myself if I could do it on my own. He taught me to take responsibility for everything.&lt;/p&gt;
&lt;p&gt; As a counterpoint, I would also mention a principal engineer I worked with, who later taught me that I didn’t need to try to do everything myself. After I learned to take responsibility, I started to forget that I wasn’t alone. Of course I had heard people talk about delegation, but it’s one thing to hear about it or think about it in terms of sprint tasks, but it&apos;s another to delegate getting something prioritized or delegate figuring out tech vision for a team or delegate following up on an initiative.&lt;/p&gt;
&lt;p&gt; There was another co-worker that I worked with who would drive me completely bonkers sometimes because her approach to solving problems was so different from mine. She would ask for clarification when I thought it was obvious and she would ask for detailed explanations when I thought everyone was on the same page. However, she’s also one of the smartest engineers I’ve ever worked with and working with her made me realize that not only can different styles be just as good, but that sometimes putting together two clashing styles can result in much better results than either of us would have gotten on our own. She found holes in things I thought were obvious and while she drove me nuts sometimes, we got some amazing things accomplished and I am better for it. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dan Na - Staff Engineer and Team Lead at Squarespace]]></title><description><![CDATA[<p><span class="date">March, 2020</span>
<a href="https://blog.danielna.com/">blog</a>,
<a href="https://twitter.com/dxna">twitter</a>,
<a href="https://www.linkedin.com/in/danielna/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p> I'm a Staff Engineer at Squarespace. Squarespace is the leading all-in-one platform to build a beautiful online presence: websites, domains, online stores, marketing tools, scheduling appointments, etc. I also operate as the Team Lead of the Internationalization Platform team, which is responsible for building and maintaining the foundational primitives of internationalization across Squarespace products. Engineers use the tools and libraries we own to create localized products.</p>
<p><strong><em>What does a Staff-plus engineer do at Squarespace? How do you spend your time?</em></strong></p>
<p> I think in practice the day-to-day responsibilities of Staff-plus engineers vary, depending on both your precise role and how your responsibilities map in the organization.</p>
<p> My position as a Team Lead means I'm fully accountable for the output of my team, both from a business and technical perspective. On the business side, I spend a lot of time meeting with different teams and functions across the company. These stakeholders include product, strategy, customer operations, etc. I want to ensure that I have as many inputs as possible to validate that my team's roadmap reflects our company's most important priorities.</p>
<p> On the technical side, I often find myself reviewing technical documents or scoping work in front of a whiteboard for my team's work in flight. My role has evolved to less hands on coding work and more asking probing questions about architectural decisions and deployment strategies. One irony is that as a Staff Engineer I actually code significantly less than I did as a non-Staff. By no means is that universally true across the role, but in the context of my team, closing vim and operating in more of a strategic/oversight role was the highest leverage use of my time. I’m lucky in that my team is already composed of awesome engineers so my specific code contributions are less material to our output.</p>
<p> But many Staff-plus engineers at Squarespace are not Team Leads and code a lot. Others focus on engineering process and culture. In general I'd say Staff-plus Engineer responsibilities are highly contextual.</p>
<div class="pull">
<p><strong>Some of Dan's writing on engineering leadership</strong></p>
<ul>
<li><a href="https://blog.danielna.com/boogeyman-problems/">Boogeyman Problems</a></li>
<li><a href="https://blog.danielna.com/questionstorms/">Questionstorms</a></li>
<li><a href="https://blog.danielna.com/understanding-project-management-will-improve-your-developer-job/">Understanding Project Management Will Improve Your Developer Job</a></li>
<li><a href="https://blog.danielna.com/my-management-philosophy/">My Management Philosophy</a></li>
</ul>
</div>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?</em></strong></p>
<p> I have a seat at the table at higher level engineering discussions that occur at a level above individual projects and teams. We have recurring staff engineering meetings where we discuss problems that span teams which are both technical and non-technical in nature. As a hypothetical example, I'd feel comfortable surfacing what I perceive as shortcomings in the engineering onboarding process in this type of meeting. It can be hard to attribute a topic like engineering onboarding to a specific team but a lack of formal ownership doesn't make it less important. I think a key responsibility of Staff-plus is a willingness to own all of the things that contribute to (or block) engineering output, which includes both technical strategy and culture.</p>
<p> Regarding something that’s changed, on an everyday basis my title affords a high level of credibility at the outset of conversations. While I'm not advocating for a culture that values titles over ideas, I'd be lying if I said it didn't help me escalate or push through issues that I previously might've had a harder time getting through.</p>
<p><strong><em>Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?</em></strong></p>
<p> I don't really think about advocacy in terms of categories. I mostly just want our engineering team and product to be the best it can be and address things that experience tells me I can help change.</p>
<p> Some examples:</p>
<ul>
<li>When I first joined the company we were in the midst of enormous employee growth, and I noticed it felt hard to get to know anyone on other teams unless you happened to work on a project together. As a result I created a slack room — #connect-engineering — that uses a bot to randomly pair two people in engineering for coffee every two weeks. That room has been pairing people for coffee for over two years now.</li>
<li>I knew based on personal experience that engineering leadership roles can feel isolating and talking to coworkers I could hear some of those feelings of loneliness. As a result some peers and I <a href="https://blog.danielna.com/starting-an-engineering-management-book-club/">created an unofficial Engineering Management Book Club</a>, open to Team Leads and Engineering Managers. There are now two self-organized book clubs with ~10 participants each, providing a safe space for both new and experienced leaders to support each other. The feedback about book club has been enormously positive. </li></li>
</ul>
<p> To be fair, neither of these examples required a Staff-plus title. But I do think part of being an effective Staff-plus engineer is caring about and addressing cultural gaps as much as technical gaps.</p>
<p><strong><em>You first got the title Staff Engineer at Squarespace. What was the process of getting promoted to Staff?</em></strong></p>
<p> I was hired as a Senior Software Engineer II (one level below Staff). I was fortunate to land on a team working on a high impact project that I was able to contribute to immediately. The hardest parts about the project concerned a problem space I was already familiar with — wide, sweeping changes across codebases — and I proposed, prototyped and eventually shipped an alternative architecture that I felt would better position the company for success. That became our frontend translation system, which I wrote about on our engineering blog: <a href="https://engineering.squarespace.com/blog/2018/building-a-system-for-front-end-translations">Building a System for Frontend Translations</a>.</p>
<p> I also owned the communication and education effort around the new translation system, presenting the architecture at internal meetings and sending relevant emails about the status of the project. Grouping this technical contribution to some meaningful cultural initiatives — other internal presentations, #connect-engineering, etc. — my manager had a good case for promotion that was agreed upon by the Engineering Directors.</p>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p> I feel like progressing up a career ladder is an additive exercise in forcing you to care about more things than you previously cared about. Caring about more things is hard.</p>
<p> As a trivial example: The intern cares about the small aspect of a feature they can build in three months. The full-time engineer on the team cares about the entire lifecycle of that feature. The team lead/manager cares about the suite of features that compose a product. The director cares about the suite of products owned by their organization. And so on.</p>
<p> Every rung up the ladder means you care about another layer of abstraction, in addition to caring about all the layers beneath your current one.</p>
<p> I feel like a Staff Engineering role is similar in that you're leaving the comfort zone of a specific technical domain to a more general problem domain: engineering. And as leaders you're leaving a potential technical comfort zone to the realm of the system of challenges that impact engineering output. What are the biggest problems holding back engineering teams that fall between the cracks of team ownership? Those are your problems now, in addition to all of the problems of your technical domain.</p>
<p> So while Staff is an aspirational title to achieve, it also includes significant added responsibility. You’re a leader now, whether you want to be or not.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>I think sponsorship is a key responsibility of any senior role and material to the growth of any engineering organization. I suppose the definition of “sponsorship” varies, but to me one tangible way is to provide opportunities for exposure. For example:</p>
<ul>
<li>Giving less senior teammates the opportunity to own and present their work at wider meetings.</li>
<li>Reaching out to a team who just shipped an awesome feature to write a post for our engineering blog.</li>
<li>Encouraging someone I met in a #connect-engineering coffee who has unique experience or perspective to give an internal presentation.</li>
<li>Ensuring that meetings are not dominated by the perspectives of a vocal minority and soliciting opinions from everyone in the room.</li>
<li>Giving public kudos in a large slack room to someone who just did something great that everyone didn’t see.</li>
</ul>
<p>Lara Hogan has a great post on sponsorship in practice: <a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What does sponsorship look like?</a></p>
<div class="pull">
<p><strong>Talks by Dan Na</strong></p>
<ul>
<li><a href="https://blog.danielna.com/talks/pushing-through-friction/">Pushing through Friction</a></li>
<li><a href="https://blog.danielna.com/talks/transitioning-to-sass-at-scale/">Transitioning to Sass at Scale</a></li>
</ul>
</div>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p> Yes, and I still actively consider it. I know it’s more convenient to think about the two ladders as mutually exclusive but I don’t.</p>
<p> I still enjoy both shipping code and running teams, and I think the ability to do both at a high level is critical for long-term engineering success. Charity Majors has a fantastic blog post on this topic that I recommend reading: "<a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">The Engineer/Manager Pendulum</a>".</p>
<p> Charity argues that "manager career path vs engineering career path" is a false dichotomy, and taking time to alternate between both roles makes you better at both. This maps to my own experience. I'm a better manager because I know how terrible it is to be an IC on a poorly planned project, and I'm a better IC because I know how and when to sound an alarm when a project is going poorly.</p>
<p> I think one of the most important strategic skills for building software is the ability to converge towards pragmatic decision making. A failure mode I’ve seen repeatedly is when a product manager comes with business requirements and an engineer comes with technical pushback and neither are willing to budge. The ability to empathize with both sets of incentives and navigate that tension is the only way to get anything done, and the best way to build that empathy is to sit in both seats.</p>
<p> To specifically answer this question: my previous role prior to joining Squarespace was an Engineering Manager. I love being an Engineering Manager but I wanted to keep my technical skills sharp so I accepted an IC role. Then I was promoted to Staff.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p> In the context of engineering leadership, two books stand out.</p>
<p> My favorite engineering leadership book of all time is <a href="https://www.amazon.com/dp/B015VACHOK/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1">High Output Management by Andrew Grove</a>. I pick it up from my bookshelf once a year and end up unintentionally re-reading it. Many ideas from Grove's book have significantly shaped how I view work and leadership: "the measure of a manager is the output of the organization underneath them," "delegation is not abdication," the concept of engineering/managerial leverage, etc. In terms of communicating the tactical aspects of engineering leadership I still think Grove's book is best.</p>
<p> On the human side of leadership, I really loved <a href="http://larahogan.me">Lara Hogan</a>'s book: <a href="https://resilient-management.com/">Resilient Management</a>. I had the absurdly good fortune of starting my NYC tech career at Etsy in 2013 where Lara was my first engineering manager. Lara is a master of unpacking and addressing the hardest parts about navigating emotions and personalities, fostering psychological safety, and sponsoring coworkers. And having worked directly under her for close to four years, she is totally the real deal and practices what she preaches.</p>
<p> In terms of non-books, I subscribe to and enjoy reading "<a href="https://lethain.com/">Irrational Exuberance</a>", where Will Larson regularly blogs about engineering management with a highly pragmatic and strategic perspective. I've also recently discovered and enjoyed reading Marty Cagan's "<a href="https://svpg.com/articles/">Insights Blog</a>", mostly because product leadership is a domain I'm less familiar with and am interested in learning more about.</p>
<p> My role models are some of the amazing coworkers I've worked closely with over the years. I sat next to <a href="http://www.danielespeset.com">Daniel Espeset</a> for four years at Etsy and learned an immeasurable amount about coupling technical execution with cultural impact. I learned a lot watching Lara do things like advocate for and achieve pay equity across our engineering group. I learn a lot watching current coworkers like <a href="http://noidea.dog">Tanya Reilly</a> institute and evolve our engineering processes to match our ever-growing scale. I’m inspired most by people whom I've personally witnessed have the courage to change companies for the better, despite whatever friction they encountered along the way. </p>]]></description><link>https://staffeng.com/stories/dan-na</link><guid isPermaLink="false">https://staffeng.com/stories/dan-na</guid><pubDate>Thu, 26 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;March, 2020&lt;/span&gt;
&lt;a href=&quot;https://blog.danielna.com/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/dxna&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/danielna/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I&apos;m a Staff Engineer at Squarespace. Squarespace is the leading all-in-one platform to build a beautiful online presence: websites, domains, online stores, marketing tools, scheduling appointments, etc. I also operate as the Team Lead of the Internationalization Platform team, which is responsible for building and maintaining the foundational primitives of internationalization across Squarespace products. Engineers use the tools and libraries we own to create localized products.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at Squarespace? How do you spend your time?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I think in practice the day-to-day responsibilities of Staff-plus engineers vary, depending on both your precise role and how your responsibilities map in the organization.&lt;/p&gt;
&lt;p&gt; My position as a Team Lead means I&apos;m fully accountable for the output of my team, both from a business and technical perspective. On the business side, I spend a lot of time meeting with different teams and functions across the company. These stakeholders include product, strategy, customer operations, etc. I want to ensure that I have as many inputs as possible to validate that my team&apos;s roadmap reflects our company&apos;s most important priorities.&lt;/p&gt;
&lt;p&gt; On the technical side, I often find myself reviewing technical documents or scoping work in front of a whiteboard for my team&apos;s work in flight. My role has evolved to less hands on coding work and more asking probing questions about architectural decisions and deployment strategies. One irony is that as a Staff Engineer I actually code significantly less than I did as a non-Staff. By no means is that universally true across the role, but in the context of my team, closing vim and operating in more of a strategic/oversight role was the highest leverage use of my time. I’m lucky in that my team is already composed of awesome engineers so my specific code contributions are less material to our output.&lt;/p&gt;
&lt;p&gt; But many Staff-plus engineers at Squarespace are not Team Leads and code a lot. Others focus on engineering process and culture. In general I&apos;d say Staff-plus Engineer responsibilities are highly contextual.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Some of Dan&apos;s writing on engineering leadership&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/boogeyman-problems/&quot;&gt;Boogeyman Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/questionstorms/&quot;&gt;Questionstorms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/understanding-project-management-will-improve-your-developer-job/&quot;&gt;Understanding Project Management Will Improve Your Developer Job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/my-management-philosophy/&quot;&gt;My Management Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I have a seat at the table at higher level engineering discussions that occur at a level above individual projects and teams. We have recurring staff engineering meetings where we discuss problems that span teams which are both technical and non-technical in nature. As a hypothetical example, I&apos;d feel comfortable surfacing what I perceive as shortcomings in the engineering onboarding process in this type of meeting. It can be hard to attribute a topic like engineering onboarding to a specific team but a lack of formal ownership doesn&apos;t make it less important. I think a key responsibility of Staff-plus is a willingness to own all of the things that contribute to (or block) engineering output, which includes both technical strategy and culture.&lt;/p&gt;
&lt;p&gt; Regarding something that’s changed, on an everyday basis my title affords a high level of credibility at the outset of conversations. While I&apos;m not advocating for a culture that values titles over ideas, I&apos;d be lying if I said it didn&apos;t help me escalate or push through issues that I previously might&apos;ve had a harder time getting through.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I don&apos;t really think about advocacy in terms of categories. I mostly just want our engineering team and product to be the best it can be and address things that experience tells me I can help change.&lt;/p&gt;
&lt;p&gt; Some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I first joined the company we were in the midst of enormous employee growth, and I noticed it felt hard to get to know anyone on other teams unless you happened to work on a project together. As a result I created a slack room — #connect-engineering — that uses a bot to randomly pair two people in engineering for coffee every two weeks. That room has been pairing people for coffee for over two years now.&lt;/li&gt;
&lt;li&gt;I knew based on personal experience that engineering leadership roles can feel isolating and talking to coworkers I could hear some of those feelings of loneliness. As a result some peers and I &lt;a href=&quot;https://blog.danielna.com/starting-an-engineering-management-book-club/&quot;&gt;created an unofficial Engineering Management Book Club&lt;/a&gt;, open to Team Leads and Engineering Managers. There are now two self-organized book clubs with ~10 participants each, providing a safe space for both new and experienced leaders to support each other. The feedback about book club has been enormously positive. &lt;/li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; To be fair, neither of these examples required a Staff-plus title. But I do think part of being an effective Staff-plus engineer is caring about and addressing cultural gaps as much as technical gaps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;You first got the title Staff Engineer at Squarespace. What was the process of getting promoted to Staff?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I was hired as a Senior Software Engineer II (one level below Staff). I was fortunate to land on a team working on a high impact project that I was able to contribute to immediately. The hardest parts about the project concerned a problem space I was already familiar with — wide, sweeping changes across codebases — and I proposed, prototyped and eventually shipped an alternative architecture that I felt would better position the company for success. That became our frontend translation system, which I wrote about on our engineering blog: &lt;a href=&quot;https://engineering.squarespace.com/blog/2018/building-a-system-for-front-end-translations&quot;&gt;Building a System for Frontend Translations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; I also owned the communication and education effort around the new translation system, presenting the architecture at internal meetings and sending relevant emails about the status of the project. Grouping this technical contribution to some meaningful cultural initiatives — other internal presentations, #connect-engineering, etc. — my manager had a good case for promotion that was agreed upon by the Engineering Directors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; I feel like progressing up a career ladder is an additive exercise in forcing you to care about more things than you previously cared about. Caring about more things is hard.&lt;/p&gt;
&lt;p&gt; As a trivial example: The intern cares about the small aspect of a feature they can build in three months. The full-time engineer on the team cares about the entire lifecycle of that feature. The team lead/manager cares about the suite of features that compose a product. The director cares about the suite of products owned by their organization. And so on.&lt;/p&gt;
&lt;p&gt; Every rung up the ladder means you care about another layer of abstraction, in addition to caring about all the layers beneath your current one.&lt;/p&gt;
&lt;p&gt; I feel like a Staff Engineering role is similar in that you&apos;re leaving the comfort zone of a specific technical domain to a more general problem domain: engineering. And as leaders you&apos;re leaving a potential technical comfort zone to the realm of the system of challenges that impact engineering output. What are the biggest problems holding back engineering teams that fall between the cracks of team ownership? Those are your problems now, in addition to all of the problems of your technical domain.&lt;/p&gt;
&lt;p&gt; So while Staff is an aspirational title to achieve, it also includes significant added responsibility. You’re a leader now, whether you want to be or not.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think sponsorship is a key responsibility of any senior role and material to the growth of any engineering organization. I suppose the definition of “sponsorship” varies, but to me one tangible way is to provide opportunities for exposure. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Giving less senior teammates the opportunity to own and present their work at wider meetings.&lt;/li&gt;
&lt;li&gt;Reaching out to a team who just shipped an awesome feature to write a post for our engineering blog.&lt;/li&gt;
&lt;li&gt;Encouraging someone I met in a #connect-engineering coffee who has unique experience or perspective to give an internal presentation.&lt;/li&gt;
&lt;li&gt;Ensuring that meetings are not dominated by the perspectives of a vocal minority and soliciting opinions from everyone in the room.&lt;/li&gt;
&lt;li&gt;Giving public kudos in a large slack room to someone who just did something great that everyone didn’t see.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lara Hogan has a great post on sponsorship in practice: &lt;a href=&quot;https://larahogan.me/blog/what-sponsorship-looks-like/&quot;&gt;What does sponsorship look like?&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Talks by Dan Na&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/talks/pushing-through-friction/&quot;&gt;Pushing through Friction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.danielna.com/talks/transitioning-to-sass-at-scale/&quot;&gt;Transitioning to Sass at Scale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Yes, and I still actively consider it. I know it’s more convenient to think about the two ladders as mutually exclusive but I don’t.&lt;/p&gt;
&lt;p&gt; I still enjoy both shipping code and running teams, and I think the ability to do both at a high level is critical for long-term engineering success. Charity Majors has a fantastic blog post on this topic that I recommend reading: &quot;&lt;a href=&quot;https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/&quot;&gt;The Engineer/Manager Pendulum&lt;/a&gt;&quot;.&lt;/p&gt;
&lt;p&gt; Charity argues that &quot;manager career path vs engineering career path&quot; is a false dichotomy, and taking time to alternate between both roles makes you better at both. This maps to my own experience. I&apos;m a better manager because I know how terrible it is to be an IC on a poorly planned project, and I&apos;m a better IC because I know how and when to sound an alarm when a project is going poorly.&lt;/p&gt;
&lt;p&gt; I think one of the most important strategic skills for building software is the ability to converge towards pragmatic decision making. A failure mode I’ve seen repeatedly is when a product manager comes with business requirements and an engineer comes with technical pushback and neither are willing to budge. The ability to empathize with both sets of incentives and navigate that tension is the only way to get anything done, and the best way to build that empathy is to sit in both seats.&lt;/p&gt;
&lt;p&gt; To specifically answer this question: my previous role prior to joining Squarespace was an Engineering Manager. I love being an Engineering Manager but I wanted to keep my technical skills sharp so I accepted an IC role. Then I was promoted to Staff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; In the context of engineering leadership, two books stand out.&lt;/p&gt;
&lt;p&gt; My favorite engineering leadership book of all time is &lt;a href=&quot;https://www.amazon.com/dp/B015VACHOK/ref=dp-kindle-redirect?_encoding=UTF8&amp;#x26;btkr=1&quot;&gt;High Output Management by Andrew Grove&lt;/a&gt;. I pick it up from my bookshelf once a year and end up unintentionally re-reading it. Many ideas from Grove&apos;s book have significantly shaped how I view work and leadership: &quot;the measure of a manager is the output of the organization underneath them,&quot; &quot;delegation is not abdication,&quot; the concept of engineering/managerial leverage, etc. In terms of communicating the tactical aspects of engineering leadership I still think Grove&apos;s book is best.&lt;/p&gt;
&lt;p&gt; On the human side of leadership, I really loved &lt;a href=&quot;http://larahogan.me&quot;&gt;Lara Hogan&lt;/a&gt;&apos;s book: &lt;a href=&quot;https://resilient-management.com/&quot;&gt;Resilient Management&lt;/a&gt;. I had the absurdly good fortune of starting my NYC tech career at Etsy in 2013 where Lara was my first engineering manager. Lara is a master of unpacking and addressing the hardest parts about navigating emotions and personalities, fostering psychological safety, and sponsoring coworkers. And having worked directly under her for close to four years, she is totally the real deal and practices what she preaches.&lt;/p&gt;
&lt;p&gt; In terms of non-books, I subscribe to and enjoy reading &quot;&lt;a href=&quot;https://lethain.com/&quot;&gt;Irrational Exuberance&lt;/a&gt;&quot;, where Will Larson regularly blogs about engineering management with a highly pragmatic and strategic perspective. I&apos;ve also recently discovered and enjoyed reading Marty Cagan&apos;s &quot;&lt;a href=&quot;https://svpg.com/articles/&quot;&gt;Insights Blog&lt;/a&gt;&quot;, mostly because product leadership is a domain I&apos;m less familiar with and am interested in learning more about.&lt;/p&gt;
&lt;p&gt; My role models are some of the amazing coworkers I&apos;ve worked closely with over the years. I sat next to &lt;a href=&quot;http://www.danielespeset.com&quot;&gt;Daniel Espeset&lt;/a&gt; for four years at Etsy and learned an immeasurable amount about coupling technical execution with cultural impact. I learned a lot watching Lara do things like advocate for and achieve pay equity across our engineering group. I learn a lot watching current coworkers like &lt;a href=&quot;http://noidea.dog&quot;&gt;Tanya Reilly&lt;/a&gt; institute and evolve our engineering processes to match our ever-growing scale. I’m inspired most by people whom I&apos;ve personally witnessed have the courage to change companies for the better, despite whatever friction they encountered along the way. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Keavy McMinn - Senior Principal Engineer at Fastly]]></title><description><![CDATA[<p><span class="date">March, 2020</span>
<a href="https://keavy.com/">blog</a>,
<a href="https://twitter.com/keavy">twitter</a>,
<a href="https://www.linkedin.com/in/keavy/">linkedin</a></p>
<p><strong><em>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?</em></strong></p>
<p>I'm a senior principal engineer at <a href="https://www.fastly.com/">Fastly</a>. Fastly is an edge cloud platform that provides services like a CDN. I work in OCTO, the Office of the CTO, which is composed of about ten principal or distinguished engineers who report directly to the CTO. Each member of OCTO tends to have their own focus, and mine is being the API Lead.</p>
<p><strong><em>What does a Staff-plus engineer do at your company? How do you spend your time?</em></strong></p>
<p>There are several quite different types of principal and distinguished engineers in OCTO. There are also principal engineers that work within engineering teams directly, rather than within OCTO. In the OCTO group, some work on internet standards or academic research, some do deep technical research and prototyping, some help incubate a team building something completely new. I’m closely involved with the broader engineering organization in my API Lead role.</p>
<p>We all work on different things, but we have a common goal of taking a holistic, long-term and system-wide view on things. We also try to find and help with the sort of things across engineering that might get overlooked or fall between the cracks. Our CTO supports our work, but doesn’t identify the projects to work on, that’s up to us.</p>
<p>I’ve never thought about my time in terms of percentages. Some of my work goes in phases, with more of one thing this week, more of that the next. A massive amount of my time is spent doing written work, research, and talking to people. I’ll have regular meetings with the teams and managers that build APIs. I’ll spend time breaking a long-term strategy into little chunks, doing research, and writing a proposal on that. Then I’ll have to market that proposal around the company. Less on writing code lately, but in other phases I’ll build demos or tooling to support the wider work. That coding work is still really enjoyable.</p>
<div class="pull">
<p><strong>Some of Keavy's writing on engineering leadership</strong></p>
<ul>
<li><a href="https://keavy.com/work/thriving-on-the-technical-leadership-path/">Thriving on the Technical Leadership Path</a></li>
<li><a href="https://keavy.com/work/building-bridges/">Building Bridges as a Technical Leader</a></li>
<li><a href="https://keavy.com/work/where-to-start/">Where to Start</a></li>
<li><a href="https://keavy.com/work/technical-preparation/">Technical Research and Preparation</a></li>
</ul>
</div>
<p><strong><em>Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in your career?</em></strong></p>
<p>As a regular engineer, it can be hard to carve out time. You have to work more within the constraints and cadence of regularly scheduled projects. As a principal, you have the trust, the time and the space to try something out.</p>
<p>When you have a title, you don’t have to spend so much energy putting your credentials on the table. It helps set the context for others. You’re more respected from the outset, and that’s been really noticeable. You also get access to executives, so you get information earlier and might have a seat at the table to influence things.</p>
<p><strong>_Do you spend time advocating for technology, practice, process or architectural change? _</strong></p>
<p>I was hired specifically to set the direction for strategy for the API. Part of that is steering the technical direction and choices we make. I approach it as a collaborative exercise. You know I’ll do the grind work of doing the research, I analyse all the information, present tradeoffs, and make a recommendation. I’ll take in all the organizational and engineering group context.</p>
<p>I present what I think is the best case for us, and people can disagree with that. And, you know, they often do. I’m steering and influencing more than saying, “I’ve got the authority to just tell you what to do.” I’ve never seen that style work well.</p>
<p>For controversial decisions, I’ll meet up with representatives from different, relevant groups. I’ll meet with a group of engineers, tell them what I’m going to recommend, and ask “What do y’all think about that? What am I missing?” I’ll also meet with the management and product side, and maybe legal, docs, security or different people depending on the project. I’ve also done it the opposite direction of just presenting the thing first, and then having calls to get feedback instead of just waiting for people to leave a comment in the document.</p>
<p><strong><em>What’s something you’ve advocated for?</em></strong></p>
<p>One of the things that I’ve been advocating hard for in my current job is design documents for API changes. So before anybody writes any code, when the cost of making changes is low, they write down the user workflows and what would an interface look like that could enable those workflows. Sometimes it turns out that a seemingly simple thing is really difficult, particularly when the group isn’t used to flexing those muscles.</p>
<p>My approach to advocacy is to remind ourselves what the pain points are that everyone felt that led us to trying to make a change. We’re not trying to be perfect for sake of theory, code beauty, or a lofty concern. I bring it back to “These are the pain points that everybody said they felt, and this is an approach that you know ultimately is going to help with that.”</p>
<p>I help get other people to care about the same things, like I’m going to start pairing with more engineers on API reviews. While I do the reviews, I try to help teach others what I’m looking at, and be encouraging through the processes and conversations.</p>
<p><strong><em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?</em></strong></p>
<p>This hasn’t been as much of a focus for me in my current role. At Github I was conscious that I had privileges from my seniority and tenure, and sponsored an engineer there. I would give him more and more challenging things to work on, encouraged him to question anything that was unclear or curious to him about my work, and advocated for further responsibility and recognition for him.</p>
<p><strong><em>How did you build organizational trust?</em></strong></p>
<p>At Fastly, I was given trust from the beginning. When I joined, I was hired to come in and work on specific things. I remember asking, “Is there a time scale for this?” and for their notions about strategy, and being told explicitly that they wanted <em>me</em> to figure it out and tell <em>them</em>. So definitely a lot of trust and responsibility.</p>
<p>There are pros and cons of when you build that trust instead of being hired with it. As you build up trust, you simultaneously build up a lot of context, which is how it worked for me at Github. Although, I find in my current job that it was actually really useful to come in without context and be a set of fresh eyes. That makes it easy to question when folks think, “Oh, well, maybe we’ve just always done it this way.” It can be liberating not to be tied to the past.</p>
<p><strong><em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a "Staff Project," and if so what was it?</em></strong></p>
<p>I’ve never heard it given a name, but I understand the idea. I did lead and architect that type of project - solving gnarly engineering problems, with large impact for the company - a few times, but unfortunately they didn’t lead to me being promoted. They did lead to my career progression though. Those projects gave me the experience, knowledge and confidence to position myself differently. Even to give public conference talks or know that “I’ve done X and could do X again.”</p>
<p><strong><em>Were public speaking or public visibility important to reaching your current level?</em></strong></p>
<p>Yeah, I think it’s been a huge factor for my career development in general. I don’t think it’s necessary, but I think it can definitely be helpful, it’s been helpful for me. My very first conference talk I was asked to do - because the organizers thought I had an interesting perspective to share, coming from an art background. It was terrifying, and initially I wanted to say no. But my mother persuaded me to say yes. So public speaking was a slightly more accidental than deliberate strategy to start with.</p>
<p>Mostly, I enjoyed the people I met at conferences. Later the speaker networks led to job opportunities for me.</p>
<p><strong>_How did you first get a Staff or Principal title? What factors contributed most in you reaching that title? _</strong></p>
<p>I was hired at Fastly as a Principal Engineer. So, to be honest, for me the biggest factor was changing companies. The type of work I was doing didn’t dramatically change, but changing companies was the thing that ultimately enabled me to get the title.</p>
<p>There was someone that was a strong advocate for hiring me specifically, and I’m sure that helped. They weren’t someone I’d directly worked with before, but they were familiar with my work.</p>
<p><strong><em>Has working remotely impacted your career trajectory?</em></strong></p>
<p>Not that I’m aware of. I’ve always been a remote employee and I’m sure it’s been a factor in being able to have serendipitous conversations but I’ve just been doing it so long. You make a deliberate effort to have the conversations and build relationships. Also, my companies have been largely distributed. I can imagine it being more of a potential issue if being remote is the minority, or the company doesn’t fully embrace being distributed.</p>
<p><strong><em>Did you get any advice on reaching Staff that was particularly helpful for you?</em></strong></p>
<p>Not really, I got some bad advice. It’s such a cliche, but the “This is great. Now you have to prove it again.” There’s some advice that pushes people more in the sort of hero direction, like saying that you need to invent something unusual or magical to qualify. There are so many different directions one can make it. Engineering ladders often contribute to these beliefs.</p>
<div class="pull">
<p><strong>Book recommendations</strong></p>
<ul>
<li><a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/">The Passionate Programmer</a></li>
<li> <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a></li>
</ul>
</div>
<p><strong><em>What about a piece of advice for someone who has just started as a Staff Engineer?</em></strong></p>
<p>The thing that springs to mind is to find your peers or support network. Just like management, it gets lonely the higher up you go and it’s important to find peers that will still challenge you and you can brainstorm ideas with. It doesn’t even matter if they’re in your similar area of work or even are in different companies.</p>
<p><strong><em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?</em></strong></p>
<p>I tried it once and didn’t have a good experience. I realized it’s just not where my passions lie. I have too much respect for engineering management to do it for anything other than the right reason. The right reason is to support other people.</p>
<p><strong><em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?</em></strong></p>
<p> Conferences have been a resource for me, as well as getting to work with mature, low-ego, wonderful engineering leaders and engineers. Chad Fowler, and his book <a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/">The Passionate Programmer</a>, is at top of that list. Dave Thomas is another one of those people whose workshops I used to go to when I was first learning Ruby and his book <a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a> is another great one.</p>]]></description><link>https://staffeng.com/stories/keavy-mcminn</link><guid isPermaLink="false">https://staffeng.com/stories/keavy-mcminn</guid><pubDate>Tue, 24 Mar 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span class=&quot;date&quot;&gt;March, 2020&lt;/span&gt;
&lt;a href=&quot;https://keavy.com/&quot;&gt;blog&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/keavy&quot;&gt;twitter&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/keavy/&quot;&gt;linkedin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m a senior principal engineer at &lt;a href=&quot;https://www.fastly.com/&quot;&gt;Fastly&lt;/a&gt;. Fastly is an edge cloud platform that provides services like a CDN. I work in OCTO, the Office of the CTO, which is composed of about ten principal or distinguished engineers who report directly to the CTO. Each member of OCTO tends to have their own focus, and mine is being the API Lead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does a Staff-plus engineer do at your company? How do you spend your time?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are several quite different types of principal and distinguished engineers in OCTO. There are also principal engineers that work within engineering teams directly, rather than within OCTO. In the OCTO group, some work on internet standards or academic research, some do deep technical research and prototyping, some help incubate a team building something completely new. I’m closely involved with the broader engineering organization in my API Lead role.&lt;/p&gt;
&lt;p&gt;We all work on different things, but we have a common goal of taking a holistic, long-term and system-wide view on things. We also try to find and help with the sort of things across engineering that might get overlooked or fall between the cracks. Our CTO supports our work, but doesn’t identify the projects to work on, that’s up to us.&lt;/p&gt;
&lt;p&gt;I’ve never thought about my time in terms of percentages. Some of my work goes in phases, with more of one thing this week, more of that the next. A massive amount of my time is spent doing written work, research, and talking to people. I’ll have regular meetings with the teams and managers that build APIs. I’ll spend time breaking a long-term strategy into little chunks, doing research, and writing a proposal on that. Then I’ll have to market that proposal around the company. Less on writing code lately, but in other phases I’ll build demos or tooling to support the wider work. That coding work is still really enjoyable.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Some of Keavy&apos;s writing on engineering leadership&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://keavy.com/work/thriving-on-the-technical-leadership-path/&quot;&gt;Thriving on the Technical Leadership Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://keavy.com/work/building-bridges/&quot;&gt;Building Bridges as a Technical Leader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://keavy.com/work/where-to-start/&quot;&gt;Where to Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://keavy.com/work/technical-preparation/&quot;&gt;Technical Research and Preparation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where do you feel most impactful as a Staff-plus Engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in your career?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a regular engineer, it can be hard to carve out time. You have to work more within the constraints and cadence of regularly scheduled projects. As a principal, you have the trust, the time and the space to try something out.&lt;/p&gt;
&lt;p&gt;When you have a title, you don’t have to spend so much energy putting your credentials on the table. It helps set the context for others. You’re more respected from the outset, and that’s been really noticeable. You also get access to executives, so you get information earlier and might have a seat at the table to influence things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_Do you spend time advocating for technology, practice, process or architectural change? _&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was hired specifically to set the direction for strategy for the API. Part of that is steering the technical direction and choices we make. I approach it as a collaborative exercise. You know I’ll do the grind work of doing the research, I analyse all the information, present tradeoffs, and make a recommendation. I’ll take in all the organizational and engineering group context.&lt;/p&gt;
&lt;p&gt;I present what I think is the best case for us, and people can disagree with that. And, you know, they often do. I’m steering and influencing more than saying, “I’ve got the authority to just tell you what to do.” I’ve never seen that style work well.&lt;/p&gt;
&lt;p&gt;For controversial decisions, I’ll meet up with representatives from different, relevant groups. I’ll meet with a group of engineers, tell them what I’m going to recommend, and ask “What do y’all think about that? What am I missing?” I’ll also meet with the management and product side, and maybe legal, docs, security or different people depending on the project. I’ve also done it the opposite direction of just presenting the thing first, and then having calls to get feedback instead of just waiting for people to leave a comment in the document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What’s something you’ve advocated for?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the things that I’ve been advocating hard for in my current job is design documents for API changes. So before anybody writes any code, when the cost of making changes is low, they write down the user workflows and what would an interface look like that could enable those workflows. Sometimes it turns out that a seemingly simple thing is really difficult, particularly when the group isn’t used to flexing those muscles.&lt;/p&gt;
&lt;p&gt;My approach to advocacy is to remind ourselves what the pain points are that everyone felt that led us to trying to make a change. We’re not trying to be perfect for sake of theory, code beauty, or a lofty concern. I bring it back to “These are the pain points that everybody said they felt, and this is an approach that you know ultimately is going to help with that.”&lt;/p&gt;
&lt;p&gt;I help get other people to care about the same things, like I’m going to start pairing with more engineers on API reviews. While I do the reviews, I try to help teach others what I’m looking at, and be encouraging through the processes and conversations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This hasn’t been as much of a focus for me in my current role. At Github I was conscious that I had privileges from my seniority and tenure, and sponsored an engineer there. I would give him more and more challenging things to work on, encouraged him to question anything that was unclear or curious to him about my work, and advocated for further responsibility and recognition for him.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How did you build organizational trust?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At Fastly, I was given trust from the beginning. When I joined, I was hired to come in and work on specific things. I remember asking, “Is there a time scale for this?” and for their notions about strategy, and being told explicitly that they wanted &lt;em&gt;me&lt;/em&gt; to figure it out and tell &lt;em&gt;them&lt;/em&gt;. So definitely a lot of trust and responsibility.&lt;/p&gt;
&lt;p&gt;There are pros and cons of when you build that trust instead of being hired with it. As you build up trust, you simultaneously build up a lot of context, which is how it worked for me at Github. Although, I find in my current job that it was actually really useful to come in without context and be a set of fresh eyes. That makes it easy to question when folks think, “Oh, well, maybe we’ve just always done it this way.” It can be liberating not to be tied to the past.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a &quot;Staff Project,&quot; and if so what was it?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve never heard it given a name, but I understand the idea. I did lead and architect that type of project - solving gnarly engineering problems, with large impact for the company - a few times, but unfortunately they didn’t lead to me being promoted. They did lead to my career progression though. Those projects gave me the experience, knowledge and confidence to position myself differently. Even to give public conference talks or know that “I’ve done X and could do X again.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Were public speaking or public visibility important to reaching your current level?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, I think it’s been a huge factor for my career development in general. I don’t think it’s necessary, but I think it can definitely be helpful, it’s been helpful for me. My very first conference talk I was asked to do - because the organizers thought I had an interesting perspective to share, coming from an art background. It was terrifying, and initially I wanted to say no. But my mother persuaded me to say yes. So public speaking was a slightly more accidental than deliberate strategy to start with.&lt;/p&gt;
&lt;p&gt;Mostly, I enjoyed the people I met at conferences. Later the speaker networks led to job opportunities for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_How did you first get a Staff or Principal title? What factors contributed most in you reaching that title? _&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was hired at Fastly as a Principal Engineer. So, to be honest, for me the biggest factor was changing companies. The type of work I was doing didn’t dramatically change, but changing companies was the thing that ultimately enabled me to get the title.&lt;/p&gt;
&lt;p&gt;There was someone that was a strong advocate for hiring me specifically, and I’m sure that helped. They weren’t someone I’d directly worked with before, but they were familiar with my work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Has working remotely impacted your career trajectory?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not that I’m aware of. I’ve always been a remote employee and I’m sure it’s been a factor in being able to have serendipitous conversations but I’ve just been doing it so long. You make a deliberate effort to have the conversations and build relationships. Also, my companies have been largely distributed. I can imagine it being more of a potential issue if being remote is the minority, or the company doesn’t fully embrace being distributed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you get any advice on reaching Staff that was particularly helpful for you?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not really, I got some bad advice. It’s such a cliche, but the “This is great. Now you have to prove it again.” There’s some advice that pushes people more in the sort of hero direction, like saying that you need to invent something unusual or magical to qualify. There are so many different directions one can make it. Engineering ladders often contribute to these beliefs.&lt;/p&gt;
&lt;div class=&quot;pull&quot;&gt;
&lt;p&gt;&lt;strong&gt;Book recommendations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/&quot;&gt;The Passionate Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The thing that springs to mind is to find your peers or support network. Just like management, it gets lonely the higher up you go and it’s important to find peers that will still challenge you and you can brainstorm ideas with. It doesn’t even matter if they’re in your similar area of work or even are in different companies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I tried it once and didn’t have a good experience. I realized it’s just not where my passions lie. I have too much respect for engineering management to do it for anything other than the right reason. The right reason is to support other people.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Conferences have been a resource for me, as well as getting to work with mature, low-ego, wonderful engineering leaders and engineers. Chad Fowler, and his book &lt;a href=&quot;https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/&quot;&gt;The Passionate Programmer&lt;/a&gt;, is at top of that list. Dave Thomas is another one of those people whose workshops I used to go to when I was first learning Ruby and his book &lt;a href=&quot;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt; is another great one.&lt;/p&gt;</content:encoded></item></channel></rss>